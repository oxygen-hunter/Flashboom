case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"NO 
",1416,4,0.27523183822631836
12,access control,"NO 
",1112,4,0.2567431926727295
13,access control,"NO 
",3354,4,0.4274775981903076
14,access control,"NO 
",1287,4,0.26988911628723145
15,access control,"NO 
",1126,4,0.2607686519622803
16,access control,"NO 
",1226,4,0.26261186599731445
17,access control,"NO 
",1074,4,0.2558326721191406
18,access control,"NO 
",1317,4,0.2688024044036865
19,access control,"NO 
",1112,4,0.2567415237426758
20,access control,"NO 
",1308,4,0.27010512351989746
21,access control,"NO 
",1069,4,0.2556498050689697
22,access control,"NO 
",1337,4,0.2695155143737793
23,access control,"NO 
",1012,4,0.25457072257995605
24,access control,"YES

The contract has a potential vulnerability related to the `transfer` function. 

Here's why:

* **Unrestricted Access:** The `transfer` function allows anyone to transfer tokens, even if they don't have the `owner` role. 
* **Potential for Abuse:** This could be exploited by malicious actors to drain funds from the contract. 
* **Lack of Input Validation:** The contract doesn't validate the `_value` parameter, which could lead to unintended transfers. 
* **No Error Handling:** The contract doesn't handle cases where the `_value` parameter is not a valid number. 



",1120,136,5.345696449279785
25,access control,"NO 
",1091,4,0.2549252510070801
26,access control,"NO 
",1596,4,0.2950007915496826
27,unchecked low level calls,"NO 
",1914,4,0.32454800605773926
28,unchecked low level calls,"NO 
",2109,4,0.33147430419921875
29,unchecked low level calls,"NO 
",1612,4,0.298520565032959
30,unchecked low level calls,"NO 
",3004,4,0.3950014114379883
31,unchecked low level calls,"NO 
",1191,4,0.2611875534057617
32,unchecked low level calls,"NO 
",3136,4,0.4119858741760254
33,unchecked low level calls,"NO 
",1048,4,0.25543761253356934
34,unchecked low level calls,"NO 
",1380,4,0.27539515495300293
35,unchecked low level calls,"NO 
",2084,4,0.3440370559692383
36,unchecked low level calls,"NO 
",1983,4,0.3184318542480469
37,unchecked low level calls,"NO 
",1366,4,0.2710130214691162
38,unchecked low level calls,"NO 
",2011,4,0.3182191848754883
39,unchecked low level calls,"NO 
",2931,4,0.38907837867736816
40,unchecked low level calls,"NO 
",2444,4,0.35466909408569336
41,unchecked low level calls,"NO 
",1784,4,0.30884599685668945
42,unchecked low level calls,"NO 
",2054,4,0.34267425537109375
43,unchecked low level calls,"NO 
",1170,4,0.2616152763366699
44,unchecked low level calls,"NO 
",1612,4,0.2983083724975586
45,unchecked low level calls,"NO 
",2412,4,0.35347843170166016
46,unchecked low level calls,"NO 
",1085,4,0.255953311920166
47,unchecked low level calls,"NO 
",1927,4,0.315584659576416
48,unchecked low level calls,"NO 
",1195,4,0.26160192489624023
49,unchecked low level calls,"NO 
",2090,4,0.34374427795410156
50,unchecked low level calls,"NO 
",2090,4,0.34340381622314453
51,unchecked low level calls,"NO 
",1264,4,0.268798828125
52,unchecked low level calls,"NO 
",1527,4,0.2901611328125
53,unchecked low level calls,"NO 
",1174,4,0.2631964683532715
54,unchecked low level calls,"NO 
",1193,4,0.2622964382171631
55,unchecked low level calls,"NO 
",2050,4,0.3418426513671875
56,unchecked low level calls,"NO 
",1191,4,0.2618708610534668
57,unchecked low level calls,"NO 
",1458,4,0.27595973014831543
58,unchecked low level calls,"NO 
",1195,4,0.26314711570739746
59,unchecked low level calls,"NO 
",2054,4,0.34324026107788086
60,unchecked low level calls,"NO 
",994,4,0.2526564598083496
61,unchecked low level calls,"NO 
",2821,4,0.3833425045013428
62,unchecked low level calls,"NO 
",1301,4,0.2700347900390625
63,unchecked low level calls,"NO 
",1302,4,0.2701845169067383
64,unchecked low level calls,"NO 
",1456,4,0.27504754066467285
65,unchecked low level calls,"NO 
",1236,4,0.2641301155090332
66,unchecked low level calls,"NO 
",2011,4,0.31876254081726074
67,unchecked low level calls,"NO 
",1998,4,0.3303999900817871
68,unchecked low level calls,"NO 
",1135,4,0.2602701187133789
69,unchecked low level calls,"NO 
",1304,4,0.2704737186431885
70,unchecked low level calls,"NO 
",1199,4,0.26366257667541504
71,unchecked low level calls,"NO 
",1247,4,0.26750779151916504
72,unchecked low level calls,"NO 
",1456,4,0.2750227451324463
73,front running,"NO 
",1246,4,0.26841306686401367
74,front running,"NO 
",1188,4,0.26200222969055176
75,front running,"NO 
",2584,4,0.36751675605773926
76,front running,"NO 
",1501,4,0.27721071243286133
77,arithmetic,"NO 
",1002,4,0.25444602966308594
78,arithmetic,"NO 
",967,4,0.2410743236541748
79,arithmetic,"NO 
",959,4,0.2408618927001953
80,arithmetic,"NO 
",967,4,0.24167799949645996
81,arithmetic,"NO 
",1250,4,0.2678084373474121
82,arithmetic,"YES

The `transfer` function is vulnerable to integer overflows and underflows. 

Here's why:

* **Potential Overflow:** The `transfer` function calculates the fee using `calculateFee` function. The `calculateFee` function is not provided in the code. However, it is likely that the fee calculation involves a division operation. If the `loanAmount` and `interestNumerator` are large enough, the result of the division could overflow the `uint256` data type.
* **Potential Underflow:** The `transfer` function updates the balance of the sender and receiver. If the `_value` is very small, it could underflow the `uint256` data type. 


",1355,152,5.945413112640381
83,arithmetic,"YES

The `transfer` function in the `TerocoinToken` contract is vulnerable to integer overflows. 

Here's why:

* **Unbounded Transfers:** The `transfer` function doesn't have any checks to prevent transfers exceeding the available balance. 
* **Arithmetic Overflow:** The `transfer` function calculates the fee using a formula that involves dividing the loan amount by the interest denominator. If the loan amount is large enough, the result of this division could exceed the maximum value of a uint256. 
* **Potential for Loss:** If an attacker can manipulate the loan amount or interest denominator, they could potentially cause a large overflow, leading to a loss of funds for the contract owner. 



",1073,151,5.893202304840088
84,arithmetic,"NO 
",980,4,0.2419726848602295
85,arithmetic,"YES

The `transfer` function in the `TerocoinToken` contract is vulnerable to arithmetic overflows. 

Here's why:

* **Unbounded Arithmetic:** The `transfer` function uses the `SafeMath` library for safe arithmetic operations. However, the `calculateFee` function is not using `SafeMath` and could potentially lead to overflows. 
* **Potential Overflow:** If the `loanAmount`, `interestNumerator`, and `interestDenominator` values are large enough, the `calculateFee` function could overflow, leading to incorrect calculations and potentially a loss of funds. 


",1055,125,4.895581483840942
86,arithmetic,"YES

The `transfer` function in the `TerocoinToken` contract is vulnerable to integer overflows and underflows. 

Here's why:

* **Unsigned Integers:** The `transfer` function uses unsigned integers for calculations, making it susceptible to overflows.
* **Potential for Overflow:** The `transfer` function calculates fees using the `calculateFee` function. If the `loanAmount`, `interestNumerator`, and `interestDenominator` values are large enough, they could overflow the `uint256` data type. 
* **Impact:** Overflowing values could lead to incorrect calculations, potentially draining the contract's funds. 


",1370,139,5.431907415390015
87,arithmetic,"NO 
",1207,4,0.26212549209594727
88,arithmetic,"NO 
",967,4,0.24188947677612305
89,arithmetic,"NO 
",987,4,0.24447369575500488
90,arithmetic,"NO 
",1049,4,0.25499892234802246
91,bad randomness,"NO 
",1359,4,0.27083539962768555
92,bad randomness,"NO 
",3214,4,0.4165220260620117
93,bad randomness,"NO 
",3553,4,0.4498269557952881
94,bad randomness,"NO 
",1517,4,0.2898139953613281
95,bad randomness,"NO 
",1210,4,0.2617604732513428
96,bad randomness,"NO 
",1302,4,0.27005577087402344
97,reentrancy,"YES

The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Call:** The `if` statement calls `msg.sender.call.value(_am)()` which is an external contract call.
* **Reentrancy Vulnerability:** This allows an attacker to repeatedly call the `Collect` function before the initial execution is complete, potentially draining funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1782,107,4.24798583984375
98,reentrancy,"NO 
",1322,4,0.269702672958374
99,reentrancy,"NO 
",1856,4,0.3106040954589844
100,reentrancy,"YES

The `transfer` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `transfer` function calls an external contract (`_feeWallet`) to calculate fees. This creates a potential for a reentrancy attack.
* **Unclear Execution Flow:** The code doesn't explicitly handle the execution of the external contract call. 
* **Potential for Reentrancy:** An attacker could call the `transfer` function multiple times, potentially leading to a reentrancy attack. 


Let me know if you'd like to explore other aspects of smart contract security. 
",1229,134,5.245957851409912
101,reentrancy,"NO 
",1172,4,0.26247143745422363
102,reentrancy,"YES

The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1778,53,2.1862125396728516
103,reentrancy,"NO 
",2012,4,0.31841421127319336
104,reentrancy,"YES

The `transfer` function is vulnerable to reentrancy attacks. 

Here's why:

* **Potential for Reentrancy:** The `transfer` function allows for the transfer of tokens.  If an attacker can call the `transfer` function multiple times within a short time frame, they can potentially drain the contract's funds. 
* **Unprotected State Changes:** The `transfer` function does not have any checks to prevent the attacker from calling the function multiple times. 
* **Reentrancy Vulnerability:** The `transfer` function does not have any checks to prevent the attacker from calling the function multiple times. 



",1285,135,5.302372694015503
105,reentrancy,"YES

The contract uses `transfer` function which is vulnerable to reentrancy attacks. 
",2004,21,0.9697093963623047
106,reentrancy,"NO 
",1954,4,0.3160722255706787
107,reentrancy,"YES

The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Call:** The `if` statement calls `msg.sender.call.value(_am)()` which is an external contract call.
* **Reentrancy Vulnerability:** This allows an attacker to repeatedly call the `Collect` function before the initial execution is complete, potentially draining funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1782,107,4.254525423049927
108,reentrancy,"NO 
",1896,4,0.3125793933868408
109,reentrancy,"YES

The contract uses a `transfer` function that allows for the transfer of tokens. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `transfer` function doesn't explicitly check for reentrancy. 
* **Potential for Attack:** An attacker could call the `transfer` function multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The contract lacks any safeguards to prevent reentrancy. 


",1497,112,4.4079084396362305
110,reentrancy,"NO 
",1742,4,0.30400681495666504
111,reentrancy,"NO 
",1946,4,0.31647467613220215
112,reentrancy,"YES

The `transfer` function in the `TerocoinToken` contract is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `transfer` function calls an external contract (`_feeWallet`) to calculate fees. This creates a potential for a reentrancy attack.
* **Unprotected State Changes:** The `transfer` function updates balances in the contract and the `_feeWallet` contract. This means that an attacker could potentially call the `transfer` function multiple times to drain the contract's funds. 


",1210,120,4.703259229660034
113,reentrancy,"NO 
",1201,4,0.26290130615234375
114,reentrancy,"NO 
",1700,4,0.30184125900268555
115,reentrancy,"NO 
",1696,4,0.30140233039855957
116,reentrancy,"YES

The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1774,53,2.198488712310791
117,reentrancy,"YES

The contract uses the `transfer` function to transfer tokens. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `transfer` function allows external contracts to call the `transfer` function before the initial execution is complete. This can lead to an attacker repeatedly calling the `transfer` function, draining the contract of funds. 
* **Potential for Manipulation:** The `transfer` function does not have any checks to prevent reentrancy. 
* **Lack of Safeguards:** The contract lacks any safeguards to prevent reentrancy attacks. 



",1254,128,5.0340070724487305
118,reentrancy,"NO 
",1197,4,0.26180386543273926
119,reentrancy,"NO 
",1804,4,0.30898070335388184
120,reentrancy,"NO 
",1670,4,0.29737138748168945
121,reentrancy,"NO 
",1850,4,0.31116795539855957
122,reentrancy,"NO 
",1684,4,0.29769206047058105
123,reentrancy,"YES

The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Call:** The `if` statement calls `msg.sender.call.value(_am)()` which is an external contract call.
* **Reentrancy Vulnerability:** This allows an attacker to repeatedly call the `Collect` function before the initial execution is complete, potentially draining funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1778,107,4.260056495666504
124,reentrancy,"NO 
",1670,4,0.29661107063293457
125,reentrancy,"NO 
",1854,4,0.31104040145874023
126,reentrancy,"YES

The contract uses the `transfer` function, which is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy Vulnerability:** The `transfer` function allows for external calls to be made within the contract. This means an attacker could potentially call the `transfer` function again before the initial transfer is complete, leading to a reentrancy attack. 
* **Potential for Manipulation:** The attacker could exploit this vulnerability to drain funds from the contract. 


",1141,103,4.068627119064331
127,time manipulation,"NO 
",1043,4,0.25568675994873047
128,time manipulation,"NO 
",1314,4,0.2693359851837158
129,time manipulation,"NO 
",1526,4,0.29083752632141113
130,time manipulation,"NO 
",1162,4,0.26116514205932617
131,time manipulation,"NO 
",1312,4,0.26874542236328125
132,short addresses,"NO 
",1350,4,0.270247220993042
133,denial of service,"YES

The contract has a vulnerability related to Denial of Service (DoS). 

Here's why:

* **Excessive Creditors**: The `addCreditors` function adds a large number of addresses to the `creditorAddresses` array. This can lead to a DoS attack if the contract is used to manage a large number of creditors.
* **Uncontrolled Creditors**: The `emptyCreditors` function can be used to clear the `creditorAddresses` array, potentially causing a DoS attack if the contract is used to manage a large number of creditors. 
* **Potential for Manipulation**: The `addCreditors` function allows for the addition of a large number of addresses, potentially leading to a DoS attack if the contract is used to manage a large number of creditors. 



Let me know if you'd like to explore other aspects of smart contract security! 
",1315,187,7.26569676399231
134,denial of service,"NO 
",1446,4,0.27573156356811523
135,denial of service,"NO 
",2675,4,0.3779182434082031
136,denial of service,"YES

The `transfer` function is vulnerable to reentrancy attacks. 

Here's why:

* **Potential for Reentrancy:** The `transfer` function doesn't explicitly check for reentrancy.  
* **Unprotected Logic:** The `transfer` function doesn't have any checks to prevent a malicious actor from repeatedly calling it. 
* **Reentrancy Vulnerability:** A malicious actor could call the `transfer` function multiple times within a short period, draining the contract's funds. 


",1335,111,4.356056451797485
137,denial of service,"YES

The contract has a vulnerability related to Denial of Service (DoS). 

Here's why:

* **Excessive Function Calls:** The `ifillArray` function in the `DosOneFunc` contract repeatedly pushes the sender's address into the `listAddresses` array. This can lead to a DoS attack if the attacker can control the sender's address. 
* **Uncontrolled Loop:** The `ifillArray` function uses a loop that runs for 350 iterations. This loop can be exploited to exhaust the contract's gas limit, causing it to fail. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1174,146,5.703651666641235
138,denial of service,"NO 
",1146,4,0.2613556385040283
