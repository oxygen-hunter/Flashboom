case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"NO 
",2514,4,0.3523063659667969
12,access control,"NO 
",2210,4,0.34422850608825684
13,access control,"NO 
",4452,4,0.6950125694274902
14,access control,"NO 
",2385,4,0.3569920063018799
15,access control,"NO 
",2224,4,0.3477137088775635
16,access control,"NO 
",2324,4,0.35468316078186035
17,access control,"YES
 
The contract uses `forward` function which calls another contract. This is a common vulnerability, as it can be exploited to call malicious contracts. 
",2172,35,1.6085619926452637
18,access control,"NO 
",2415,4,0.3611128330230713
19,access control,"NO 
",2210,4,0.3462827205657959
20,access control,"NO 
",2406,4,0.35846590995788574
21,access control,"YES
 
The `loadData()` function is vulnerable because it sets the `owner` to the `msg.sender` which is the same as the `dev` address. This means that the `owner` can be manipulated by the `dev` address. 
",2167,56,2.285640239715576
22,access control,"NO 
",2435,4,0.36096644401550293
23,access control,"YES
 
The contract has a function `sudicideAnyone()` that uses `selfdestruct(msg.sender)`. This is a classic example of a reentrancy vulnerability.  
",2110,40,1.858597755432129
24,access control,"NO 
",2218,4,0.3475658893585205
25,access control,"YES
 
The code uses `require(tx.origin == owner);` to ensure that only the owner can call the `withdrawAll` function. This is a common vulnerability, as it can be bypassed by an attacker who can manipulate the `tx.origin` value. 
",2189,60,2.6678531169891357
26,access control,"NO 
",2694,4,0.38406872749328613
27,unchecked low level calls,"NO 
",3008,4,0.40166306495666504
28,unchecked low level calls,"NO 
",3203,4,0.4216742515563965
29,unchecked low level calls,"NO 
",2706,4,0.38388872146606445
30,unchecked low level calls,"YES
 
The `send()` function in Solidity is a low-level function that can be used to send Ether to another address.  However, it does not propagate errors. If the recipient address is invalid or the transaction fails, the code will continue to execute. This can lead to unexpected outcomes and security vulnerabilities. 
",4098,68,5.579684257507324
31,unchecked low level calls,"YES
 
The code uses `caddress.call(id,from,_tos[i],v)` to call external contracts. This is a low-level call and can lead to unexpected behavior.  The `caddress.call()` function does not propagate errors, so if the external contract fails, the contract will continue to run. 
",2285,73,3.199449300765991
32,unchecked low level calls,"NO 
",4230,4,0.5136101245880127
33,unchecked low level calls,"YES
 
The `callchecked` and `callnotchecked` functions are vulnerable because they do not propagate errors. This means that if the function call fails, the contract will continue to execute, potentially leading to unexpected outcomes. 
",2142,50,2.238591194152832
34,unchecked low level calls,"NO 
",2474,4,0.35518336296081543
35,unchecked low level calls,"NO 
",3178,4,0.4374077320098877
36,unchecked low level calls,"NO 
",3077,4,0.41654276847839355
37,unchecked low level calls,"NO 
",2460,4,0.5123546123504639
38,unchecked low level calls,"NO 
",3105,4,0.40476155281066895
39,unchecked low level calls,"YES
The code uses `call.value` and `gas` to execute functions. This can lead to unexpected behavior and potential vulnerabilities. 

Here's why:

* **Unpredictable Execution:**  `call.value` and `gas` can lead to unexpected behavior. The execution of the function might not be as expected, and the contract might not handle the return value correctly.
* **Reentrancy Attacks:**  `call.value` can be exploited in a reentrancy attack. An attacker could call the function multiple times, potentially draining the contract's funds.
* **Unchecked Return Values:** The code doesn't check the return values of the functions. This can lead to unexpected behavior and potential vulnerabilities. 


Let me know if you'd like to explore other aspects of smart contract security! 
",4025,174,7.67650842666626
40,unchecked low level calls,"YES
The `execute` function is vulnerable because it does not check the return value of the `call.value` function. This can lead to unexpected behavior and potential exploits. 
",3538,39,1.7495698928833008
41,unchecked low level calls,"YES
The `execute` function calls `_dst.call.value(_value)(_data)` which is a low-level call.  This function does not propagate errors, so if the call fails, the contract will continue to run. This can lead to unexpected outcomes and vulnerabilities. 
",2878,62,2.8137619495391846
42,unchecked low level calls,"NO 
",3148,4,0.43311452865600586
43,unchecked low level calls,"YES
 
 The `send()` function call can fail.  The `send()` function does not propagate errors, and the contract will continue to run. 
",2264,35,1.612574815750122
44,unchecked low level calls,"NO 
",2706,4,0.4595327377319336
45,unchecked low level calls,"YES
 
The `_dst.call.value(_value)(_data);` line is vulnerable because it does not propagate errors. If the `_dst.call` operation fails, the contract will continue to execute, potentially leading to unexpected outcomes. 
",3506,56,2.5840952396392822
46,unchecked low level calls,"YES
The `withdrawBalance` function calls `msg.sender.send(amountToWithdraw)` which is a low-level call.  This function does not propagate errors, so if the `send` operation fails, the contract will continue to execute. 
",2179,55,2.4702510833740234
47,unchecked low level calls,"YES
The `WithdrawToken` function calls `token.call` which is a low-level function that doesn't propagate errors. This means that if the transfer fails, the contract won't know and the code will continue to run. 
",3021,53,2.395516872406006
48,unchecked low level calls,"YES
 
The `transfer` function calls `caddress.call` without any checks. This means that if `caddress` is not a valid contract, the contract will execute the function call, potentially leading to a reentrancy attack. 
",2289,54,2.424722671508789
49,unchecked low level calls,"NO 
",3184,4,0.5142562389373779
50,unchecked low level calls,"NO 
",3184,4,0.43625974655151367
51,unchecked low level calls,"YES
 
The `sendMoney` function calls `_target.call.value(_value)(_data)` which is a low-level call.  This function does not propagate errors, so if the call fails, the contract will continue to run.  This can lead to unexpected outcomes and vulnerabilities. 
",2358,66,2.67141056060791
52,unchecked low level calls,"YES
The `transfer` function calls `caddress.call` with a `bytes4` identifier. This is a low-level call that doesn't propagate errors.  The `caddress` contract could be vulnerable to reentrancy attacks, and the `transfer` function doesn't check for the return value of `caddress.call`. 
",2621,76,3.385080099105835
53,unchecked low level calls,"YES
The `call.value()` function call is vulnerable to reentrancy attacks. 
",2268,21,0.9780058860778809
54,unchecked low level calls,"YES
 
The `transfer` function calls `caddress.call(id,from,_tos[i],v)` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",2287,47,2.1424131393432617
55,unchecked low level calls,"NO 
",3144,4,0.4336268901824951
56,unchecked low level calls,"YES
 
The `makeOldFucks` function calls `fuck.call(bytes4(sha3(""giveBlockReward()"")));`  This is a low-level call that doesn't propagate errors.  It's possible for the function to fail without any indication. 
",2285,62,2.7655723094940186
57,unchecked low level calls,"YES
 
The `call.value` function is vulnerable because it does not propagate errors. If the function call fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",2552,44,2.427058458328247
58,unchecked low level calls,"YES
 
The `transfer` function calls `caddress.call(id,from,_tos[i],v)` which is a low-level call.  This means that the contract will not propagate errors, and the function will continue to run.  This can lead to unexpected behavior and vulnerabilities. 
",2289,66,2.6487765312194824
59,unchecked low level calls,"NO 
",3148,4,0.4338071346282959
60,unchecked low level calls,"YES
 
The `callAddress` function calls the target address directly using the `call()` function. This can lead to reentrancy attacks, as the function can be called repeatedly before it resolves any effects. 
",2088,47,2.133415460586548
61,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, and will not bubble up. This can lead to unexpected behavior and security vulnerabilities. 
",3915,51,2.4276819229125977
62,unchecked low level calls,"YES
The `addr.call.value(0 wei)();` line is vulnerable because it doesn't check for the return value of the `call` function. This can lead to unexpected behavior and potential exploits. 
",2395,47,4.161401987075806
63,unchecked low level calls,"NO 
",2396,4,0.5000896453857422
64,unchecked low level calls,"YES
 
The `call.value` function is vulnerable because it does not propagate errors. If the target contract fails to execute, the `call.value` function will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",2550,51,2.32210111618042
65,unchecked low level calls,"YES
 
The `transfer` function calls `caddress.call(id,from,_tos[i],_value)` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",2330,48,1.9909420013427734
66,unchecked low level calls,"NO 
",3105,4,0.40318942070007324
67,unchecked low level calls,"NO 
",3092,4,0.432894229888916
68,unchecked low level calls,"YES
 
The `withdraw` function calls `msg.sender.call.value(balances[msg.sender])()` which is a low-level call.  This function does not propagate errors, so if the call fails, the contract will continue to run.  This can lead to unexpected outcomes and vulnerabilities. 
",2229,68,2.9637105464935303
69,unchecked low level calls,"NO 
",2398,4,0.3585386276245117
70,unchecked low level calls,"YES
 
The `transfer` function calls `caddress.call` without any checks. This means that if `caddress` is not a valid contract, the contract will execute the function call, potentially leading to a reentrancy attack. 
",2293,54,2.4270215034484863
71,unchecked low level calls,"YES
 
The `sendMoney` function calls `_target.call.value(_value)`. This is a low-level call that doesn't propagate errors.  It's possible for the function to fail, but the contract doesn't handle this failure. 
",2341,60,2.6547486782073975
72,unchecked low level calls,"YES
 
The `call.value` function is vulnerable because it does not propagate errors. If the target contract fails to execute, the `call.value` function will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",2550,51,2.328869342803955
73,front running,"NO 
",2344,4,0.35550761222839355
74,front running,"NO 
",2286,4,0.3513658046722412
75,front running,"NO 
",3682,4,0.4463510513305664
76,front running,"NO 
",2599,4,0.3738260269165039
77,arithmetic,"YES
 
The line `map[k] -= v;`  can lead to integer overflows.  The `map[k]` is a mapping of a uint256 to a uint256.  The subtraction `- v` can cause an overflow if the value of `v` is large enough. 
",2102,70,3.082843780517578
78,arithmetic,"YES
 
The code multiplies the `count` variable by the `input` value.  This can lead to an overflow if the `count` value is too large. 
",2067,40,1.8308384418487549
79,arithmetic,"YES
 
The code uses the `offset` variable to scale the `Tier` values.  This can lead to arithmetic overflows and underflows, especially if the `offset` is not carefully chosen. 
",2059,45,3.46268367767334
80,arithmetic,"YES
 
The code uses `offset` to scale the `count` variable.  This can lead to arithmetic overflows and underflows, especially if the `offset` is not carefully chosen. 
",2067,43,3.5346574783325195
81,arithmetic,"NO 
",2350,4,0.3567643165588379
82,arithmetic,"NO 
",2455,4,0.5172359943389893
83,arithmetic,"YES
 
The code uses `offset` to scale the `count` variable.  This can lead to integer overflows if the `count` variable is large enough. 
",2173,38,1.753364086151123
84,arithmetic,"YES
 
The code uses `uint` for the `count` variable.  The `run` function subtracts the `input` from the `count`.  If the `input` is larger than the `count`, the result will be negative.  This can lead to an overflow. 
",2080,64,2.8060362339019775
85,arithmetic,"YES
 
The code uses `count -= input;` which can lead to arithmetic overflows and underflows. 
",2155,26,1.9649014472961426
86,arithmetic,"YES

The code uses `count += input;` and `count *= input;` which are vulnerable to arithmetic overflows and underflows. 
",2470,31,1.7382383346557617
87,arithmetic,"YES

The code uses the `SafeMath` library, which is a common practice in Solidity to prevent integer overflows and underflows. However, the code does not explicitly use the `SafeMath` library. 

The vulnerability lies in line 20:      require(balances[msg.sender] - _value >= 0);

The vulnerability lies in line 22:      balances[msg.sender] -= _value; 


",2307,91,3.6428370475769043
88,arithmetic,"YES
 
The code uses `uint` for the `count` variable.  The `offset` variable is a large number, and the `run` function adds the input to the `count` variable.  This can lead to an overflow if the input is large enough. 
",2067,61,2.6746418476104736
89,arithmetic,"YES
 
 The code uses the `SafeMath` library, which is a common practice in Solidity to prevent integer overflows and underflows. However, the code still has a potential vulnerability. 

The `add` function adds a value to the `sellerBalance` variable. If the value is too large, it could overflow the `uint` data type. 
",2087,76,3.278226375579834
90,arithmetic,"YES
 
The line `balanceOf[_to] += _value;`  is vulnerable to integer overflows.  The `_value` is added to the `balanceOf[_to]` which could potentially overflow the `uint256` data type. 
",2149,55,2.421748161315918
91,bad randomness,"NO 
",2456,4,0.35876989364624023
92,bad randomness,"YES
The code uses a `blockNumber` variable that is directly exposed to the public. This is a major security vulnerability.  
",4311,29,1.528271198272705
93,bad randomness,"YES
The code uses a `rand` function that relies on the block hash. This is a known vulnerability as it can be manipulated by miners. 
",4650,33,1.8394110202789307
94,bad randomness,"NO 
",2614,4,0.3661055564880371
95,bad randomness,"NO 
",2307,4,0.3477518558502197
96,bad randomness,"NO 
",2399,4,0.3551971912384033
97,reentrancy,"YES
The `Collect` function calls `msg.sender.call.value(_am)()` which is vulnerable to reentrancy attacks. 
",2882,32,2.032158851623535
98,reentrancy,"NO 
",2422,4,0.361112117767334
99,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",2956,45,2.0857315063476562
100,reentrancy,"YES

The code uses `msg.sender.call.value(_amount)()` which allows an attacker to call functions on the contract before the initial execution is complete. This is a classic reentrancy attack. 
",2329,46,2.110919952392578
101,reentrancy,"YES
 
The `withdraw` function calls `msg.sender.call.value(amount)` which is vulnerable to reentrancy attacks. 
",2272,33,1.421666145324707
102,reentrancy,"YES
The `Collect` function calls `msg.sender.call.value(_am)()` which is vulnerable to reentrancy attacks. 
",2878,32,1.5438456535339355
103,reentrancy,"YES
The vulnerability lies in line 63:             if(msg.sender.call.value(_am)())



This line calls the `call.value` function, which can be exploited by an attacker to drain funds from the contract. 
",3112,54,2.4851932525634766
104,reentrancy,"NO 
",2385,4,0.35560083389282227
105,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the contract's `Put` function before the `Collect` function completes. This creates a reentrancy vulnerability. 
",3104,58,2.8396966457366943
106,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",3054,45,2.1110153198242188
107,reentrancy,"YES
The `Collect` function calls `msg.sender.call.value(_am)()` which is vulnerable to reentrancy attacks. 
",2882,32,2.8387908935546875
108,reentrancy,"NO 
",2996,4,0.39906764030456543
109,reentrancy,"YES
 
The code uses a `supportsToken` function that calls `airDrop` on the `ModifierEntrancy` contract. This is a classic reentrancy vulnerability. 

Here's why:

* **Reentrancy:** The `supportsToken` function calls `airDrop` on the `ModifierEntrancy` contract.  
* **Potential for Reentrancy:** The `airDrop` function could be vulnerable to reentrancy attacks. 
* **Uncontrolled Execution:** The `airDrop` function could be called multiple times before the initial execution is complete. 


",2597,125,5.355468034744263
110,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",2842,45,4.030781030654907
111,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",3046,45,2.0585439205169678
112,reentrancy,"YES
 
The code uses `msg.sender.call.value(oCredit)`, which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",2310,48,1.9729511737823486
113,reentrancy,"NO 
",2301,4,0.4638051986694336
114,reentrancy,"YES
The vulnerability lies in line 41:             if(msg.sender.call.value(_am)())

This line calls the `call.value` function, which can be exploited by an attacker to drain funds from the contract. 
",2800,54,2.446181058883667
115,reentrancy,"YES
The vulnerability lies in line 41:             if(msg.sender.call.value(_am)())

This line allows for reentrancy attacks. 
",2796,38,1.6413538455963135
116,reentrancy,"YES
The `Collect` function calls `msg.sender.call.value(_am)()` which is vulnerable to reentrancy attacks. 
",2874,32,1.446540117263794
117,reentrancy,"NO 
",2354,4,0.4810366630554199
118,reentrancy,"NO 
",2297,4,0.35431957244873047
119,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call functions on the contract. This is a classic reentrancy vulnerability. 
",2904,40,1.8583958148956299
120,reentrancy,"YES
The `CashOut` function calls `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This can lead to a reentrancy attack. 
",2770,50,2.31736159324646
121,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",2950,45,2.10292387008667
122,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call functions on the contract. This is a classic reentrancy vulnerability. 
",2784,40,1.7301640510559082
123,reentrancy,"YES
The `Collect` function calls `msg.sender.call.value(_am)()` which is vulnerable to reentrancy attacks. 
",2878,32,1.5756990909576416
124,reentrancy,"YES
The `CashOut` function calls `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This can lead to a reentrancy attack. 
",2770,50,2.3724372386932373
125,reentrancy,"YES
The `Collect` function calls `msg.sender.call.value(_am)()` which is vulnerable to reentrancy attacks. 
",2954,32,1.5556304454803467
126,reentrancy,"YES
 
The contract uses the `withdrawBalance` function, which allows users to withdraw funds. This function calls `msg.sender.call.value(amountToWithdraw)("""")` which is vulnerable to reentrancy attacks. 
",2241,51,4.317715406417847
127,time manipulation,"YES
The contract uses `block.timestamp` to determine if the sale is finished. This is vulnerable to time manipulation by miners. 
",2140,30,1.4170598983764648
128,time manipulation,"NO 
",2411,4,0.3546304702758789
129,time manipulation,"YES
The contract uses `block.timestamp` to determine the time of the investment. This can be manipulated by miners, leading to a potential time manipulation vulnerability. 
",2623,36,1.7050044536590576
130,time manipulation,"YES
 
The contract uses the `pastBlockTime` variable to ensure that a transaction can only be executed once per block. This is a common vulnerability, as it can be exploited to manipulate the contract's behavior. 
",2259,49,2.195091485977173
131,time manipulation,"NO 
",2409,4,0.3592216968536377
132,short addresses,"NO 
",2448,4,0.3613102436065674
133,denial of service,"NO 
",2411,4,0.3674156665802002
134,denial of service,"NO 
",2542,4,0.3729879856109619
135,denial of service,"NO 
",3771,4,0.47202086448669434
136,denial of service,"NO 
",2431,4,0.35826802253723145
137,denial of service,"YES
The code uses a `for` loop to push addresses into the `listAddresses` array. This loop could be exploited to cause a denial of service attack. 
",2270,37,3.1434738636016846
138,denial of service,"NO 
",2242,4,0.348832368850708
