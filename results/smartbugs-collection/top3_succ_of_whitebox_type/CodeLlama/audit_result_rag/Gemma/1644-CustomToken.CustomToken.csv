case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"NO 
",937,4,0.23161792755126953
12,access control,"NO 
",633,4,0.21706104278564453
13,access control,"NO 
",2875,4,0.4227304458618164
14,access control,"NO 
",808,4,0.22356605529785156
15,access control,"NO 
",647,4,0.21492958068847656
16,access control,"NO 
",747,4,0.2234950065612793
17,access control,"NO 
",595,4,0.210784912109375
18,access control,"NO 
",838,4,0.22809553146362305
19,access control,"NO 
",633,4,0.2135789394378662
20,access control,"NO 
",829,4,0.2247004508972168
21,access control,"NO 
",590,4,0.21588754653930664
22,access control,"NO 
",858,4,0.2244715690612793
23,access control,"NO 
",533,4,0.20792174339294434
24,access control,"NO 
",641,4,0.21451282501220703
25,access control,"NO 
",612,4,0.2131500244140625
26,access control,"NO 
",1117,4,0.24442243576049805
27,unchecked low level calls,"NO 
",1431,4,0.2794034481048584
28,unchecked low level calls,"NO 
",1626,4,0.2801990509033203
29,unchecked low level calls,"NO 
",1129,4,0.25568389892578125
30,unchecked low level calls,"YES
 
The code has several vulnerabilities related to low-level calls.  Here's a breakdown:

* **`msg.sender.send(valuePaid)`:** This line sends Ether directly from the contract's `msg.sender` to the address specified. This is a potential vulnerability because it doesn't propagate errors. If the `send` operation fails, the contract execution will continue without any error handling.
* **`msg.sender.send(excessPaid)`:** Similar to the previous line, this line sends Ether from the contract's `msg.sender` to the address specified.
* **`currentMonarch.etherAddress.send(compensation)`:** This line sends Ether from the contract's `currentMonarch` to the address specified. 


These lines are vulnerable because they don't handle potential errors. If the `send` operation fails, the contract execution will continue without any error handling. 
",2521,196,7.408456563949585
31,unchecked low level calls,"NO 
",708,4,0.216094970703125
32,unchecked low level calls,"YES
 
The `CustomToken` contract is vulnerable to a reentrancy attack. 

Here's why:

* **`CustomToken` contract:** The `CustomToken` contract is designed to manage a token.
* **`CustomToken` contract's `balanceOf`:** The `balanceOf` function is used to track the balance of the token for each address.
* **`CustomToken` contract's `Transfer` function:** The `Transfer` function is used to transfer tokens between addresses.
* **`CustomToken` contract's `CustomToken` constructor:** The `CustomToken` constructor is used to initialize the token.

The `CustomToken` contract's `balanceOf` and `Transfer` functions are vulnerable to reentrancy attacks because they do not have any checks to prevent reentrancy. 

**How a reentrancy attack works:**

1. **Attacker sends a large amount of tokens:** The attacker sends a large amount of tokens to the contract.
2. **Attacker calls `Transfer` function:** The attacker calls the `Transfer` function to transfer tokens to their own address.
3. **Attacker calls `balanceOf` function:** The attacker calls the `balanceOf` function to check their balance.
4. **Attacker calls `Transfer` function again:** The attacker calls the `Transfer` function again to transfer more tokens.
5. **Attacker calls `balanceOf`",2653,301,11.306389331817627
33,unchecked low level calls,"NO 
",565,4,0.2102503776550293
34,unchecked low level calls,"NO 
",897,4,0.23129701614379883
35,unchecked low level calls,"NO 
",1601,4,0.2964174747467041
36,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that doesn't propagate errors. This means that if the transfer fails, the contract won't revert.  The vulnerability lies in line 44:         token.call(bytes4(sha3(""transfer(address,uint256)"")),to,amount); 
 
The vulnerability lies in line 97:                 _addr.call.value(_wei); 
 
These lines are vulnerable to reentrancy attacks. 
",1500,120,4.5357441902160645
37,unchecked low level calls,"NO 
",883,4,0.22986841201782227
38,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level call that doesn't propagate errors. This means that if the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",1528,64,2.5574584007263184
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions. These functions are low-level and can be exploited.  The `call.value` function can be used to send a value to a contract, and the `gas` function can be used to set the gas limit for the transaction.  These functions can be used to send a large amount of gas to a contract, which can be used to drain the contract of funds. 
",2448,97,3.8520214557647705
40,unchecked low level calls,"YES
 
The `execute` function calls a target contract with `_dst.call.value(_value)(_data)`. This is a low-level call that doesn't propagate errors.  The contract doesn't check the return value of the `execute` function. This can lead to unexpected behavior and potential vulnerabilities. 
",1961,72,2.87394642829895
41,unchecked low level calls,"YES
 
The `execute` function calls a function on the target address (`_dst`) with the provided value (`_value`) and data (`_data`) using the `call.value` function. This function call is vulnerable because it does not check the return value of the `call.value` function. If the `call.value` function returns false, the execution of the contract will continue, but the contract will not be able to handle the error. 
",1301,99,3.7739553451538086
42,unchecked low level calls,"NO 
",1571,4,0.29223155975341797
43,unchecked low level calls,"YES
 
The `CustomToken` function creates a token with a specific supply and assigns it to an address. This function is not related to the `Lotto` contract and does not directly contribute to the vulnerability of the `Lotto` contract. 

However, the `sendToWinner` and `withdrawLeftOver` functions in the `Lotto` contract call `send` and `msg.sender.send` which are low-level functions. These functions can be vulnerable to unchecked low-level calls. 
",687,106,4.077040910720825
44,unchecked low level calls,"NO 
",1129,4,0.25034642219543457
45,unchecked low level calls,"YES
 
The `execute` function calls the target contract with `_dst.call.value(_value)(_data)`. This is a low-level call that does not propagate errors.  The `_dst.call` function can fail, and the contract will continue to run.  This can lead to unexpected behavior and vulnerabilities. 
",1929,74,2.8905727863311768
46,unchecked low level calls,"NO 
",602,4,0.21111345291137695
47,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that doesn't propagate errors. This means that if the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",1444,61,2.3584325313568115
48,unchecked low level calls,"NO 
",712,4,0.21725964546203613
49,unchecked low level calls,"NO 
",1607,4,0.29448509216308594
50,unchecked low level calls,"NO 
",1607,4,0.29868578910827637
51,unchecked low level calls,"NO 
",781,4,0.22429490089416504
52,unchecked low level calls,"NO 
",1044,4,0.24287152290344238
53,unchecked low level calls,"NO 
",691,4,0.21869969367980957
54,unchecked low level calls,"NO 
",710,4,0.2164630889892578
55,unchecked low level calls,"NO 
",1567,4,0.2918405532836914
56,unchecked low level calls,"YES

The contract uses `fuck.call(bytes4(sha3(""giveBlockReward()"")));` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",708,44,1.688420295715332
57,unchecked low level calls,"YES
 
The `call.value` function is vulnerable to low-level call issues.  The `call` function does not propagate errors, and the `value` parameter is not checked. This can lead to unexpected behavior and potential vulnerabilities. 
",975,54,2.068790912628174
58,unchecked low level calls,"NO 
",712,4,0.21968460083007812
59,unchecked low level calls,"NO 
",1571,4,0.29421186447143555
60,unchecked low level calls,"NO 
",511,4,0.2086644172668457
61,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the contract will continue to run. This can lead to unexpected outcomes and vulnerabilities. 
",2338,57,2.2816319465637207
62,unchecked low level calls,"YES

The code uses `addr.call.value(0 wei)();` which is a low-level call that doesn't propagate errors. This means that if the call fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",818,56,2.1428544521331787
63,unchecked low level calls,"NO 
",819,4,0.2272510528564453
64,unchecked low level calls,"YES
 
The `proxy` function calls `target.call.value(msg.value)(data)` which is a low-level call.  This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",973,66,2.5100159645080566
65,unchecked low level calls,"NO 
",753,4,0.2232217788696289
66,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that doesn't propagate errors. This means that if the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",1528,61,2.4305419921875
67,unchecked low level calls,"NO 
",1515,4,0.2897987365722656
68,unchecked low level calls,"NO 
",652,4,0.2160639762878418
69,unchecked low level calls,"NO 
",821,4,0.22614836692810059
70,unchecked low level calls,"NO 
",716,4,0.21727609634399414
71,unchecked low level calls,"NO 
",764,4,0.22111940383911133
72,unchecked low level calls,"YES
 
The `deposit()` function calls `target.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",973,46,1.7756352424621582
73,front running,"NO 
",767,4,0.2206411361694336
74,front running,"NO 
",709,4,0.21800589561462402
75,front running,"YES
 
The contract's `CustomToken` constructor sets the total supply of tokens to 2100000000000000. This is a very high number, and it could be exploited by a malicious actor to drain the contract of funds. 
",2105,64,2.588994264602661
76,front running,"NO 
",1022,4,0.2442188262939453
77,arithmetic,"NO 
",525,4,0.20742416381835938
78,arithmetic,"NO 
",490,4,0.20638489723205566
79,arithmetic,"NO 
",482,4,0.20789170265197754
80,arithmetic,"NO 
",490,4,0.20990252494812012
81,arithmetic,"NO 
",773,4,0.22157931327819824
82,arithmetic,"NO 
",878,4,0.23178696632385254
83,arithmetic,"NO 
",596,4,0.21036338806152344
84,arithmetic,"YES
 
The code uses unsigned integers and the `count - input` operation can lead to arithmetic overflows. 
",503,26,1.0381455421447754
85,arithmetic,"YES

The `run` function in the provided code performs a subtraction operation on the `count` variable. This operation could potentially lead to an integer overflow if the input value is large enough. 
",578,42,1.6065115928649902
86,arithmetic,"YES
 
The code uses unsigned integers and performs arithmetic operations without proper checks for overflows and underflows. This can lead to unexpected results and potential vulnerabilities. 
",893,35,1.381676435470581
87,arithmetic,"NO 
",730,4,0.22065329551696777
88,arithmetic,"NO 
",490,4,0.20940375328063965
89,arithmetic,"YES

The code uses unsigned integers and has a potential for arithmetic overflow. 
",510,18,0.7441363334655762
90,arithmetic,"YES

The `transfer` function in the provided code has a potential for integer overflow.  The line `balanceOf[_to] += _value;`  could cause an overflow if the value of `_value` is too large. 
",572,51,1.982057809829712
91,bad randomness,"NO 
",879,4,0.22982120513916016
92,bad randomness,"YES
The code uses `block.number` to generate random numbers for the raffle. This is a bad practice because `block.number` is predictable and can be manipulated by miners. 
",2734,41,1.7665226459503174
93,bad randomness,"YES
The code uses a function called `rand` that relies on the block hash to generate a random number. This is a known vulnerability as the block hash can be predictable and therefore the random number can be manipulated. 
",3073,47,1.9767818450927734
94,bad randomness,"NO 
",1037,4,0.24523591995239258
95,bad randomness,"NO 
",730,4,0.22000813484191895
96,bad randomness,"NO 
",822,4,0.22349143028259277
97,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1305,127,4.776525497436523
98,reentrancy,"NO 
",845,4,0.22458577156066895
99,reentrancy,"YES
 
The contract's `Collect` function allows for reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls an external contract (`msg.sender.call.value(_am)`) before the initial execution is complete. 
* **Potential for Reentrancy:** This allows an attacker to call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1379,112,4.267896890640259
100,reentrancy,"YES
 
The contract uses the `call.value` function, which allows external contracts to call functions on the contract. This can lead to reentrancy attacks. 
",752,38,1.4759113788604736
101,reentrancy,"NO 
",695,4,0.22308731079101562
102,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `if` statement checks for a condition, but the `msg.sender.call.value(_am)()` call could be re-entered by the external contract. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1301,124,4.684976100921631
103,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a situation where the contract's state is manipulated. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1535,121,4.576536417007446
104,reentrancy,"NO 
",808,4,0.2242436408996582
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is an external contract call.
* **Potential for Reentrancy:**  The `Collect` function could be called repeatedly by an attacker, leading to a reentrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1527,109,4.169646263122559
106,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a potential reentrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1477,116,4.382805824279785
107,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1305,127,4.795173645019531
108,reentrancy,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `WithdrawToHolder` function calls an external contract (`_addr.call.value(_wei)`) without any checks. This means an attacker could potentially call the function multiple times within a short period, draining the contract's funds. 
* **Reentrancy Vulnerability:** The `WithdrawToHolder` function doesn't handle the potential for reentrancy.  The attacker could exploit this vulnerability to drain funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1419,142,5.472532510757446
109,reentrancy,"YES

The contract uses the `supportsToken` function to check if the caller has the token. This function is vulnerable to reentrancy attacks because it allows the attacker to call the `airDrop` function repeatedly before the initial execution is complete. 
",1020,53,2.0914950370788574
110,reentrancy,"YES
 
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",1265,33,1.3270056247711182
111,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the potential for the external contract to call itself again before the initial execution is complete. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1469,118,4.570202589035034
112,reentrancy,"YES
 
The `withdrawAll` function calls `msg.sender.call.value(oCredit)`, which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",733,52,2.0279815196990967
113,reentrancy,"NO 
",724,4,0.220994234085083
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1223,47,1.8332099914550781
115,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The `CashOut` function allows for external contract calls before the initial execution is complete. This can lead to an attacker repeatedly calling the function and draining the contract of funds. 
",1219,52,2.0644233226776123
116,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. This means the contract can be called again before the initial execution is complete.
* **Potential for Reentrancy:**  The attacker can call `Collect` multiple times, potentially draining the contract's funds. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1297,121,4.68321681022644
117,reentrancy,"YES
 
The contract has a function `CustomToken()` that creates a token with a specific supply, name, symbol, and decimals. This function is not a standard function for a smart contract and is likely a vulnerability. 
",777,49,1.877016305923462
118,reentrancy,"YES
 
The contract has a function `CustomToken()` that creates a token with a specific supply, name, symbol, and decimals. This function is not a standard function for a smart contract and is likely a vulnerability. 
",720,49,1.8721041679382324
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1327,47,1.8392221927642822
120,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1193,47,1.8419480323791504
121,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1373,130,4.9296875
122,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1207,47,1.896406650543213
123,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `if` statement checks for a condition, but the `msg.sender.call.value(_am)()` call could be re-entered by the external contract. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1301,124,4.699247598648071
124,reentrancy,"YES
 
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",1193,33,1.328000545501709
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1377,47,1.8417634963989258
126,reentrancy,"YES
 
The contract uses the `withdrawBalance` function, which allows an attacker to call it repeatedly, draining the contract of funds. This is a classic reentrancy attack. 
",664,41,1.5795130729675293
127,time manipulation,"NO 
",563,4,0.21297526359558105
128,time manipulation,"NO 
",834,4,0.22660064697265625
129,time manipulation,"YES
 
The contract relies on `block.timestamp` for its functionality, which is susceptible to manipulation by miners. This can lead to the contract being exploited to manipulate the state of the contract. 
",1046,44,1.7222223281860352
130,time manipulation,"NO 
",682,4,0.216949462890625
131,time manipulation,"NO 
",832,4,0.22381877899169922
132,short addresses,"YES
 
The contract's `CustomToken` function sets the initial supply of tokens and assigns them to a specific address. This could be exploited by an attacker to create a large number of tokens and then transfer them to a malicious address. 
",871,53,2.0473718643188477
133,denial of service,"NO 
",834,4,0.22428035736083984
134,denial of service,"NO 
",965,4,0.2315962314605713
135,denial of service,"NO 
",2194,4,0.3247075080871582
136,denial of service,"NO 
",854,4,0.22647666931152344
137,denial of service,"NO 
",693,4,0.21664714813232422
138,denial of service,"NO 
",665,4,0.21560049057006836
