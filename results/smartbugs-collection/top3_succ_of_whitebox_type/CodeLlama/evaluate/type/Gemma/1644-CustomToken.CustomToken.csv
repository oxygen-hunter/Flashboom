case_id,vuln_type,audit_report,gt,eval_score,eval_input_token_num,eval_output_token_num,eval_inference_time
11,access control,"NO 
",access control,1.0,530.0,6.0,0.8785390853881836
12,access control,"NO 
",access control,1.0,530.0,6.0,0.7994301319122314
13,access control,"NO 
",access control,1.0,530.0,6.0,0.7731351852416992
14,access control,"NO 
",access control,1.0,530.0,6.0,0.7632784843444824
15,access control,"NO 
",access control,1.0,530.0,6.0,0.8334050178527832
16,access control,"NO 
",access control,1.0,530.0,6.0,0.8007895946502686
17,access control,"NO 
",access control,1.0,530.0,6.0,0.8976755142211914
18,access control,"NO 
",access control,1.0,530.0,6.0,0.7855803966522217
19,access control,"NO 
",access control,1.0,530.0,6.0,0.8363015651702881
20,access control,"NO 
",access control,1.0,530.0,6.0,0.7711327075958252
21,access control,"NO 
",access control,1.0,530.0,6.0,0.8351356983184814
22,access control,"NO 
",access control,1.0,530.0,6.0,0.8484110832214355
23,access control,"NO 
",access control,1.0,530.0,6.0,0.8176932334899902
24,access control,"NO 
",access control,1.0,530.0,6.0,0.8676393032073975
25,access control,"NO 
",access control,1.0,530.0,6.0,0.8337016105651855
26,access control,"NO 
",access control,1.0,530.0,6.0,0.7920372486114502
27,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.872866153717041
28,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.825298547744751
29,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.9377541542053223
30,unchecked low level calls,"YES
 
The code has several vulnerabilities related to low-level calls.  Here's a breakdown:

* **`msg.sender.send(valuePaid)`:** This line sends Ether directly from the contract's `msg.sender` to the address specified. This is a potential vulnerability because it doesn't propagate errors. If the `send` operation fails, the contract execution will continue without any error handling.
* **`msg.sender.send(excessPaid)`:** Similar to the previous line, this line sends Ether from the contract's `msg.sender` to the address specified.
* **`currentMonarch.etherAddress.send(compensation)`:** This line sends Ether from the contract's `currentMonarch` to the address specified. 


These lines are vulnerable because they don't handle potential errors. If the `send` operation fails, the contract execution will continue without any error handling. 
",unchecked low level calls,3.0,705.0,6.0,0.9184932708740234
31,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,2.37271785736084
32,unchecked low level calls,"YES
 
The `CustomToken` contract is vulnerable to a reentrancy attack. 

Here's why:

* **`CustomToken` contract:** The `CustomToken` contract is designed to manage a token.
* **`CustomToken` contract's `balanceOf`:** The `balanceOf` function is used to track the balance of the token for each address.
* **`CustomToken` contract's `Transfer` function:** The `Transfer` function is used to transfer tokens between addresses.
* **`CustomToken` contract's `CustomToken` constructor:** The `CustomToken` constructor is used to initialize the token.

The `CustomToken` contract's `balanceOf` and `Transfer` functions are vulnerable to reentrancy attacks because they do not have any checks to prevent reentrancy. 

**How a reentrancy attack works:**

1. **Attacker sends a large amount of tokens:** The attacker sends a large amount of tokens to the contract.
2. **Attacker calls `Transfer` function:** The attacker calls the `Transfer` function to transfer tokens to their own address.
3. **Attacker calls `balanceOf` function:** The attacker calls the `balanceOf` function to check their balance.
4. **Attacker calls `Transfer` function again:** The attacker calls the `Transfer` function again to transfer more tokens.
5. **Attacker calls `balanceOf`",unchecked low level calls,2.0,818.0,6.0,0.7980115413665771
33,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.845660924911499
34,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8387556076049805
35,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8020827770233154
36,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that doesn't propagate errors. This means that if the transfer fails, the contract won't revert.  The vulnerability lies in line 44:         token.call(bytes4(sha3(""transfer(address,uint256)"")),to,amount); 
 
The vulnerability lies in line 97:                 _addr.call.value(_wei); 
 
These lines are vulnerable to reentrancy attacks. 
",unchecked low level calls,4.0,624.0,6.0,0.8448505401611328
37,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7940833568572998
38,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level call that doesn't propagate errors. This means that if the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",unchecked low level calls,3.0,585.0,6.0,0.7629067897796631
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions. These functions are low-level and can be exploited.  The `call.value` function can be used to send a value to a contract, and the `gas` function can be used to set the gas limit for the transaction.  These functions can be used to send a large amount of gas to a contract, which can be used to drain the contract of funds. 
",unchecked low level calls,3.0,620.0,6.0,0.7605352401733398
40,unchecked low level calls,"YES
 
The `execute` function calls a target contract with `_dst.call.value(_value)(_data)`. This is a low-level call that doesn't propagate errors.  The contract doesn't check the return value of the `execute` function. This can lead to unexpected behavior and potential vulnerabilities. 
",unchecked low level calls,3.0,589.0,6.0,0.8239257335662842
41,unchecked low level calls,"YES
 
The `execute` function calls a function on the target address (`_dst`) with the provided value (`_value`) and data (`_data`) using the `call.value` function. This function call is vulnerable because it does not check the return value of the `call.value` function. If the `call.value` function returns false, the execution of the contract will continue, but the contract will not be able to handle the error. 
",unchecked low level calls,3.0,622.0,6.0,0.8782892227172852
42,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7464079856872559
43,unchecked low level calls,"YES
 
The `CustomToken` function creates a token with a specific supply and assigns it to an address. This function is not related to the `Lotto` contract and does not directly contribute to the vulnerability of the `Lotto` contract. 

However, the `sendToWinner` and `withdrawLeftOver` functions in the `Lotto` contract call `send` and `msg.sender.send` which are low-level functions. These functions can be vulnerable to unchecked low-level calls. 
",unchecked low level calls,3.0,631.0,6.0,0.8583662509918213
44,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8244566917419434
45,unchecked low level calls,"YES
 
The `execute` function calls the target contract with `_dst.call.value(_value)(_data)`. This is a low-level call that does not propagate errors.  The `_dst.call` function can fail, and the contract will continue to run.  This can lead to unexpected behavior and vulnerabilities. 
",unchecked low level calls,3.0,593.0,6.0,0.8291811943054199
46,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8002853393554688
47,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that doesn't propagate errors. This means that if the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",unchecked low level calls,3.0,582.0,6.0,0.9121804237365723
48,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.838857889175415
49,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8155841827392578
50,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8388748168945312
51,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7784111499786377
52,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,1.0385396480560303
53,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8666775226593018
54,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8247497081756592
55,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,3.0985355377197266
56,unchecked low level calls,"YES

The contract uses `fuck.call(bytes4(sha3(""giveBlockReward()"")));` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",unchecked low level calls,3.0,569.0,6.0,0.8290302753448486
57,unchecked low level calls,"YES
 
The `call.value` function is vulnerable to low-level call issues.  The `call` function does not propagate errors, and the `value` parameter is not checked. This can lead to unexpected behavior and potential vulnerabilities. 
",unchecked low level calls,3.0,578.0,6.0,0.8410837650299072
58,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7897355556488037
59,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7940764427185059
60,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.9672753810882568
61,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the contract will continue to run. This can lead to unexpected outcomes and vulnerabilities. 
",unchecked low level calls,3.0,582.0,6.0,0.8710050582885742
62,unchecked low level calls,"YES

The code uses `addr.call.value(0 wei)();` which is a low-level call that doesn't propagate errors. This means that if the call fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",unchecked low level calls,3.0,580.0,6.0,0.8868517875671387
63,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7973189353942871
64,unchecked low level calls,"YES
 
The `proxy` function calls `target.call.value(msg.value)(data)` which is a low-level call.  This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",unchecked low level calls,3.0,587.0,6.0,0.7963471412658691
65,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8521194458007812
66,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that doesn't propagate errors. This means that if the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",unchecked low level calls,3.0,582.0,6.0,0.862403392791748
67,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8377306461334229
68,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7384169101715088
69,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8382394313812256
70,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,1.6546082496643066
71,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.863487720489502
72,unchecked low level calls,"YES
 
The `deposit()` function calls `target.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",unchecked low level calls,3.0,567.0,6.0,1.1357011795043945
73,front running,"NO 
",front running,1.0,530.0,6.0,0.9010148048400879
74,front running,"NO 
",front running,1.0,530.0,6.0,0.7821700572967529
75,front running,"YES
 
The contract's `CustomToken` constructor sets the total supply of tokens to 2100000000000000. This is a very high number, and it could be exploited by a malicious actor to drain the contract of funds. 
",front running,2.0,577.0,6.0,0.7963001728057861
76,front running,"NO 
",front running,1.0,530.0,6.0,0.8420023918151855
77,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,1.0081636905670166
78,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.8390355110168457
79,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,1.2060377597808838
80,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.7879154682159424
81,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.8060760498046875
82,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.7646358013153076
83,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.7898597717285156
84,arithmetic,"YES
 
The code uses unsigned integers and the `count - input` operation can lead to arithmetic overflows. 
",arithmetic,3.0,550.0,6.0,0.8173291683197021
85,arithmetic,"YES

The `run` function in the provided code performs a subtraction operation on the `count` variable. This operation could potentially lead to an integer overflow if the input value is large enough. 
",arithmetic,3.0,567.0,6.0,0.7828121185302734
86,arithmetic,"YES
 
The code uses unsigned integers and performs arithmetic operations without proper checks for overflows and underflows. This can lead to unexpected results and potential vulnerabilities. 
",arithmetic,3.0,559.0,6.0,0.8489832878112793
87,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.7846853733062744
88,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.8813042640686035
89,arithmetic,"YES

The code uses unsigned integers and has a potential for arithmetic overflow. 
",arithmetic,3.0,543.0,6.0,0.831843376159668
90,arithmetic,"YES

The `transfer` function in the provided code has a potential for integer overflow.  The line `balanceOf[_to] += _value;`  could cause an overflow if the value of `_value` is too large. 
",arithmetic,3.0,576.0,6.0,0.7867112159729004
91,bad randomness,"NO 
",bad randomness,1.0,530.0,6.0,0.8190884590148926
92,bad randomness,"YES
The code uses `block.number` to generate random numbers for the raffle. This is a bad practice because `block.number` is predictable and can be manipulated by miners. 
",bad randomness,3.0,565.0,6.0,0.894970178604126
93,bad randomness,"YES
The code uses a function called `rand` that relies on the block hash to generate a random number. This is a known vulnerability as the block hash can be predictable and therefore the random number can be manipulated. 
",bad randomness,3.0,573.0,6.0,0.9717743396759033
94,bad randomness,"NO 
",bad randomness,1.0,530.0,6.0,0.7796206474304199
95,bad randomness,"NO 
",bad randomness,1.0,530.0,6.0,0.8069682121276855
96,bad randomness,"NO 
",bad randomness,1.0,530.0,6.0,0.794579267501831
97,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,638.0,6.0,0.8213887214660645
98,reentrancy,"NO 
",reentrancy,1.0,531.0,6.0,0.7999353408813477
99,reentrancy,"YES
 
The contract's `Collect` function allows for reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls an external contract (`msg.sender.call.value(_am)`) before the initial execution is complete. 
* **Potential for Reentrancy:** This allows an attacker to call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,625.0,6.0,0.802924394607544
100,reentrancy,"YES
 
The contract uses the `call.value` function, which allows external contracts to call functions on the contract. This can lead to reentrancy attacks. 
",reentrancy,3.0,562.0,6.0,0.7992887496948242
101,reentrancy,"NO 
",reentrancy,1.0,531.0,6.0,0.8308200836181641
102,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `if` statement checks for a condition, but the `msg.sender.call.value(_am)()` call could be re-entered by the external contract. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,636.0,6.0,0.7931909561157227
103,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a situation where the contract's state is manipulated. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,635.0,6.0,0.8380622863769531
104,reentrancy,"NO 
",reentrancy,1.0,531.0,6.0,0.852003812789917
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is an external contract call.
* **Potential for Reentrancy:**  The `Collect` function could be called repeatedly by an attacker, leading to a reentrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,624.0,6.0,0.8487997055053711
106,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a potential reentrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,631.0,6.0,0.8418712615966797
107,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,638.0,6.0,0.7616422176361084
108,reentrancy,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `WithdrawToHolder` function calls an external contract (`_addr.call.value(_wei)`) without any checks. This means an attacker could potentially call the function multiple times within a short period, draining the contract's funds. 
* **Reentrancy Vulnerability:** The `WithdrawToHolder` function doesn't handle the potential for reentrancy.  The attacker could exploit this vulnerability to drain funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,656.0,6.0,0.9712707996368408
109,reentrancy,"YES

The contract uses the `supportsToken` function to check if the caller has the token. This function is vulnerable to reentrancy attacks because it allows the attacker to call the `airDrop` function repeatedly before the initial execution is complete. 
",reentrancy,3.0,580.0,6.0,0.7592215538024902
110,reentrancy,"YES
 
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",reentrancy,3.0,558.0,6.0,2.1250154972076416
111,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the potential for the external contract to call itself again before the initial execution is complete. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,631.0,6.0,0.8622317314147949
112,reentrancy,"YES
 
The `withdrawAll` function calls `msg.sender.call.value(oCredit)`, which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",reentrancy,3.0,573.0,6.0,1.1103029251098633
113,reentrancy,"NO 
",reentrancy,1.0,531.0,6.0,0.814262866973877
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",reentrancy,3.0,569.0,6.0,0.8221316337585449
115,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The `CashOut` function allows for external contract calls before the initial execution is complete. This can lead to an attacker repeatedly calling the function and draining the contract of funds. 
",reentrancy,3.0,577.0,6.0,0.8293929100036621
116,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. This means the contract can be called again before the initial execution is complete.
* **Potential for Reentrancy:**  The attacker can call `Collect` multiple times, potentially draining the contract's funds. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,637.0,6.0,0.9598524570465088
117,reentrancy,"YES
 
The contract has a function `CustomToken()` that creates a token with a specific supply, name, symbol, and decimals. This function is not a standard function for a smart contract and is likely a vulnerability. 
",reentrancy,2.0,574.0,6.0,0.8686678409576416
118,reentrancy,"YES
 
The contract has a function `CustomToken()` that creates a token with a specific supply, name, symbol, and decimals. This function is not a standard function for a smart contract and is likely a vulnerability. 
",reentrancy,2.0,574.0,6.0,0.8808925151824951
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",reentrancy,3.0,569.0,6.0,0.82106614112854
120,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",reentrancy,3.0,569.0,6.0,0.8621335029602051
121,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,641.0,6.0,0.801063060760498
122,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",reentrancy,3.0,569.0,6.0,0.8335938453674316
123,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `if` statement checks for a condition, but the `msg.sender.call.value(_am)()` call could be re-entered by the external contract. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,636.0,6.0,0.8558676242828369
124,reentrancy,"YES
 
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",reentrancy,3.0,558.0,6.0,0.755500078201294
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",reentrancy,3.0,569.0,6.0,0.8331212997436523
126,reentrancy,"YES
 
The contract uses the `withdrawBalance` function, which allows an attacker to call it repeatedly, draining the contract of funds. This is a classic reentrancy attack. 
",reentrancy,3.0,566.0,6.0,0.8350002765655518
127,time manipulation,"NO 
",time manipulation,1.0,530.0,6.0,0.8831424713134766
128,time manipulation,"NO 
",time manipulation,1.0,530.0,6.0,0.8831925392150879
129,time manipulation,"YES
 
The contract relies on `block.timestamp` for its functionality, which is susceptible to manipulation by miners. This can lead to the contract being exploited to manipulate the state of the contract. 
",time manipulation,3.0,567.0,6.0,0.8469376564025879
130,time manipulation,"NO 
",time manipulation,1.0,530.0,6.0,0.7924535274505615
131,time manipulation,"NO 
",time manipulation,1.0,530.0,6.0,0.7992165088653564
132,short addresses,"YES
 
The contract's `CustomToken` function sets the initial supply of tokens and assigns them to a specific address. This could be exploited by an attacker to create a large number of tokens and then transfer them to a malicious address. 
",short addresses,1.0,576.0,6.0,0.8239858150482178
133,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.7859897613525391
134,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.7941091060638428
135,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.7925372123718262
136,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.7924072742462158
137,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.8432416915893555
138,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.7759628295898438
