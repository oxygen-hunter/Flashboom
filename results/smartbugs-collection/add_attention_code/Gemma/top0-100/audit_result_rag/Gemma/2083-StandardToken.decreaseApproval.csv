case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"NO 
",973,4,0.24245309829711914
12,access control,"NO 
",669,4,0.2266845703125
13,access control,"YES
The contract's `DynamicPyramid` function allows anyone to call it, which means anyone can change the contract's owner. This is a classic access control vulnerability. 
",2911,39,1.7405595779418945
14,access control,"NO 
",844,4,0.2348318099975586
15,access control,"NO 
",683,4,0.2263026237487793
16,access control,"NO 
",783,4,0.23209285736083984
17,access control,"NO 
",631,4,0.2237694263458252
18,access control,"NO 
",874,4,0.23707032203674316
19,access control,"NO 
",669,4,0.2247943878173828
20,access control,"NO 
",865,4,0.23686647415161133
21,access control,"NO 
",626,4,0.22392535209655762
22,access control,"NO 
",894,4,0.2380080223083496
23,access control,"NO 
",569,4,0.2195603847503662
24,access control,"YES
 
The contract uses `msg.sender` to determine the owner. This is a common vulnerability, as it can be manipulated by attackers. 
",677,34,1.3744378089904785
25,access control,"NO 
",648,4,0.22475504875183105
26,access control,"YES
 
The contract uses `fibonacciLibrary.delegatecall` to execute external functions. This is a common vulnerability, as it can be exploited to call arbitrary functions on the contract. 
",1153,42,1.709702730178833
27,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling the target address with the provided data and value. This is a classic example of a reentrancy vulnerability. 
",1471,40,1.6565992832183838
28,unchecked low level calls,"YES
 
The contract uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if the `call` function fails, the contract will continue to execute. This can lead to unexpected behavior and vulnerabilities. 
",1666,61,2.485931396484375
29,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",1169,46,1.8778023719787598
30,unchecked low level calls,"YES
 
The code has several vulnerabilities:

* **Unchecked Return Values:** The `claimThrone` function returns a boolean value, but it doesn't check the return value. This can lead to unexpected behavior.
* **Low Level Functions:** The `msg.sender.send` function is vulnerable to reentrancy attacks. 
* **Unprotected Access Control:** The `transferOwnership` function is not properly protected. 
* **Unclear State Management:** The code lacks clear state management, making it difficult to understand how the contract works. 
* **Unclear Error Handling:** The code doesn't handle errors gracefully. 
* **Lack of Security Measures:** The contract lacks security measures such as a nonce or a timelock. 



",2561,160,6.330546855926514
31,unchecked low level calls,"YES

The `transfer` function calls `caddress.call(id,from,_tos[i],v)` which is a low-level call. This can lead to unexpected behavior and potential vulnerabilities. 
",748,45,1.804316520690918
32,unchecked low level calls,"YES
 
 The `cash` function is vulnerable because it does not check the return value of `winner.send(subpot)`. This can lead to a reentrancy attack, where an attacker can repeatedly call the `cash` function to drain the contract's funds. 
",2693,61,2.5535497665405273
33,unchecked low level calls,"NO 
",605,4,0.22060465812683105
34,unchecked low level calls,"NO 
",937,4,0.23989391326904297
35,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling `adr.call.value(msg.value)(data)`. This is a classic example of a reentrancy vulnerability.  The `call` function does not have any built-in checks for reentrancy, and the `value` parameter can be manipulated to bypass the contract's intended behavior. 
",1641,81,3.2443108558654785
36,unchecked low level calls,"YES
 
The `WithdrawToken` function in the `TokenBank` contract calls the `token.call` function with a `bytes4` value representing the `transfer` function. This is a low-level call that does not propagate errors. If the `transfer` function fails, the contract will not revert. This can lead to unexpected outcomes and potential vulnerabilities. 
",1540,79,3.163479804992676
37,unchecked low level calls,"NO 
",923,4,0.2384169101715088
38,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds. 
",1568,63,2.568551540374756
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions. These functions are low-level and can be exploited. 
",2488,32,1.4276809692382812
40,unchecked low level calls,"YES
 
The contract uses `_dst.call.value(_value)(_data)` which is a low-level call function. This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and vulnerabilities. 
",2001,62,2.5486879348754883
41,unchecked low level calls,"YES
 
The `execute` function is vulnerable because it calls a function on the target address (`_dst`) without any checks. This can lead to reentrancy attacks, where an attacker can repeatedly call the `execute` function to drain the contract's funds. 
",1341,59,2.3750293254852295
42,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling the target address with the provided data and value. This is a classic example of a reentrancy vulnerability. 
",1611,40,1.6838881969451904
43,unchecked low level calls,"NO 
",727,4,0.2276620864868164
44,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling `adr.call.value(msg.value)(data)`. This is a major security vulnerability as it bypasses any checks on the `adr` contract and allows for malicious code execution. 
",1169,57,2.282700777053833
45,unchecked low level calls,"YES
 
The `execute` function is vulnerable to reentrancy attacks.  Here's why:

* **Low-Level Calls:** The `_dst.call.value(_value)(_data)` line calls a function on the target contract (`_dst`) with the specified value and data.
* **No Revert:** Solidity's `call`, `callcode`, `delegatecall`, and `send` functions do not propagate errors. If the target contract's function throws an error, the execution will continue. 
* **Reentrancy Vulnerability:** An attacker can call the `execute` function multiple times within a short time frame, potentially draining funds from the contract. 


",1969,148,5.863897323608398
46,unchecked low level calls,"NO 
",642,4,0.22478723526000977
47,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to unexpected behavior and potential vulnerabilities. 
",1484,61,2.4606401920318604
48,unchecked low level calls,"YES

The `caddress.call` function is vulnerable to reentrancy attacks.  The code does not check for the return value of the `caddress.call` function. 
",752,41,1.638669490814209
49,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1647,45,1.8778955936431885
50,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1647,45,1.8789854049682617
51,unchecked low level calls,"YES

The `sendMoney` function uses `_target.call.value(_value)(_data)` which is a low-level call.  This function does not propagate errors, meaning if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",821,64,2.5400032997131348
52,unchecked low level calls,"YES
 
The contract uses `caddress.call()` which is a low-level function that does not propagate errors. This means that if the `caddress.call()` function fails, the contract will continue to execute the rest of the code without any error handling. This can lead to unexpected behavior and potential vulnerabilities. 
",1084,69,2.743558168411255
53,unchecked low level calls,"YES

The contract uses `target.call.value(msg.value)`. This is a low-level call that does not propagate errors.  It can lead to unexpected behavior and potential vulnerabilities. 
",731,44,1.7535648345947266
54,unchecked low level calls,"YES

The `caddress.call` function is vulnerable to reentrancy attacks.  The code does not check for the return value of the `caddress.call` function. 
",750,41,1.6531012058258057
55,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling the target address with the provided data and value. This is a classic example of a reentrancy vulnerability. 
",1607,40,1.689840316772461
56,unchecked low level calls,"YES
 
The contract uses `fuck.call(bytes4(sha3(""giveBlockReward()"")));` which is a low-level call. This can lead to unexpected behavior and potential vulnerabilities. 
",748,45,1.8014285564422607
57,unchecked low level calls,"YES
 
The `proxy` function in the `VaultProxy` contract calls the target contract using the `call.value` function. This function does not propagate errors, meaning that if the target contract call fails, the `VaultProxy` contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",1015,69,2.7409701347351074
58,unchecked low level calls,"YES

The `transfer` function calls `caddress.call(id,from,_tos[i],v)` which is a low-level call. This can lead to unexpected behavior and potential vulnerabilities. 
",752,45,1.8063201904296875
59,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling the target address with the provided data and value. This is a classic example of a reentrancy vulnerability. 
",1611,40,1.6865465641021729
60,unchecked low level calls,"NO 
",551,4,0.21910881996154785
61,unchecked low level calls,"YES
 
The contract uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the contract will continue to execute. This can lead to unexpected outcomes and vulnerabilities. 
",2378,57,2.372664451599121
62,unchecked low level calls,"YES

The `addr.call.value(0 wei)();` line is vulnerable to reentrancy attacks.  It allows an attacker to call the function repeatedly, draining the contract of funds. 
",858,43,1.727475643157959
63,unchecked low level calls,"NO 
",859,4,0.23428869247436523
64,unchecked low level calls,"YES
 
The `proxy` function in the `VaultProxy` contract calls the target contract using the `call.value` function. This function does not propagate errors, meaning that if the target contract call fails, the `VaultProxy` contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",1013,69,2.745553731918335
65,unchecked low level calls,"YES
 
The `transfer` function calls `caddress.call(id,from,_tos[i],_value)` which is a low-level call. This can lead to unexpected behavior and potential vulnerabilities. 
",793,48,1.915734052658081
66,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level call that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to unexpected behavior and potential vulnerabilities. 
",1568,64,2.5956695079803467
67,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1555,45,1.86820387840271
68,unchecked low level calls,"YES

The `withdraw()` function calls `msg.sender.call.value(balances[msg.sender])()` which is a low-level call. This function does not propagate errors and can lead to unexpected behavior. 
",692,48,1.9119815826416016
69,unchecked low level calls,"NO 
",861,4,0.23526620864868164
70,unchecked low level calls,"NO 
",756,4,0.23080182075500488
71,unchecked low level calls,"YES

The `sendMoney` function uses `_target.call.value(_value)();`. This is a low-level call that doesn't propagate errors.  It's possible for the call to fail, and the contract will continue to execute. This can lead to unexpected outcomes and vulnerabilities. 
",804,65,2.5745351314544678
72,unchecked low level calls,"YES
 
The `proxy` function in the `DepositProxy` contract uses the `call.value` function. This function is a low-level call that does not propagate errors. If the `call.value` function fails, it will not revert the current execution. This can lead to unexpected behavior and potential vulnerabilities. 
",1013,70,2.7766759395599365
73,front running,"NO 
",803,4,0.23339009284973145
74,front running,"NO 
",745,4,0.23068976402282715
75,front running,"NO 
",2141,4,0.3318674564361572
76,front running,"NO 
",1058,4,0.2541849613189697
77,arithmetic,"YES

The `sub` function in the `SafeMath` library is vulnerable to integer overflows.  The `sub` function subtracts `b` from `a` and returns the result. If `b` is larger than `a`, the result will be incorrect. 
",559,58,2.298478603363037
78,arithmetic,"NO 
",524,4,0.21807432174682617
79,arithmetic,"NO 
",516,4,0.21711134910583496
80,arithmetic,"NO 
",524,4,0.21761274337768555
81,arithmetic,"NO 
",807,4,0.2329251766204834
82,arithmetic,"YES

The `buy` function has a potential integer overflow vulnerability. 

Here's why:

* **Uncontrolled Input:** The `buy` function requires the user to pay the equivalent of `numTokens * PRICE_PER_TOKEN` in ether. 
* **Potential Overflow:**  If the user sends a value larger than the maximum allowed by the `numTokens` variable, an overflow could occur. 
* **Impact:** This could lead to the contract losing funds or being exploited. 


",912,107,4.16178822517395
83,arithmetic,"NO 
",630,4,0.22431397438049316
84,arithmetic,"NO 
",537,4,0.21921324729919434
85,arithmetic,"YES

The contract uses the `sub` function from the `SafeMath` library, which performs subtraction.  However, the `sub` function does not handle overflows. If the `count` variable is large enough, the subtraction could result in an overflow, leading to unexpected behavior and potential loss of funds. 
",612,65,2.5475611686706543
86,arithmetic,"YES

The code uses the `SafeMath` library, which implements SafeMath functions.  However, the `SafeMath` library does not handle arithmetic overflows and underflows well.  This can lead to vulnerabilities. 
",927,44,1.7682971954345703
87,arithmetic,"NO 
",764,4,0.23186755180358887
88,arithmetic,"NO 
",524,4,0.21823716163635254
89,arithmetic,"NO 
",544,4,0.21990299224853516
90,arithmetic,"NO 
",606,4,0.2233569622039795
91,bad randomness,"NO 
",916,4,0.23972320556640625
92,bad randomness,"YES
 
The code uses `block.number` to generate random numbers for the raffle. This is a major security vulnerability.  The `block.number` is predictable and can be manipulated by miners. This means that the random numbers generated by the contract are not truly random, and can be exploited by attackers. 
",2771,68,2.840027093887329
93,bad randomness,"YES
The code uses a function `rand` that relies on the block hash and a constant factor. This makes it susceptible to attacks where an attacker can manipulate the block hash to influence the random number. 
",3110,44,1.9430415630340576
94,bad randomness,"NO 
",1074,4,0.2566711902618408
95,bad randomness,"YES
 
The contract uses `keccak256` to generate a random number, but it's vulnerable to predictable attacks. The `block.blockhash` and `block.number` values are predictable, and the attacker can manipulate them to guess the `answer`. 
",767,61,2.416015863418579
96,bad randomness,"NO 
",859,4,0.23387885093688965
97,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Uncontrolled Execution:** The `call.value(_am)` function allows the contract to execute arbitrary code on the sender's behalf. This means an attacker could potentially call the `Collect` function multiple times, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1339,134,5.2228310108184814
98,reentrancy,"YES

The code uses `msg.sender.call.value(_weiToWithdraw)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",879,47,1.8895411491394043
99,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1413,47,1.9208564758300781
100,reentrancy,"YES

The code uses `msg.sender.call.value(_amount)()` which allows an external contract to call the contract's `withdraw` function before the initial execution is complete. This is a classic reentrancy vulnerability. 
",786,51,2.023425340652466
101,reentrancy,"YES

The `withdraw` function allows an attacker to call `msg.sender.call.value(amount)`, which is a reentrancy vulnerability. 
",729,35,1.4202401638031006
102,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1335,47,1.9009606838226318
103,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1569,47,1.9391326904296875
104,reentrancy,"YES
 
The contract uses the `withdrawReward` function, which allows an attacker to call `getFirstWithdrawalBonus` again before the `withdrawReward` function completes. This creates a reentrancy vulnerability. 
",842,46,1.8504445552825928
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a direct call to the sender's contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't have any checks to prevent the external contract from calling itself again before the initial execution is complete. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1561,119,4.694284677505493
106,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **Unrestricted External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code doesn't have any safeguards to prevent this type of attack. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1511,126,4.959637641906738
107,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Uncontrolled Execution:** The `Collect` function doesn't properly handle the execution of the external contract call. 
* **Reentrancy Attack:** An attacker could call `Collect` multiple times, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1339,134,5.216312885284424
108,reentrancy,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Unrestricted External Calls:** The `WithdrawToHolder` function allows external calls to the contract's `Withdraw` function.
* **Potential for Reentrancy:**  An attacker could call `WithdrawToHolder` multiple times, each time attempting to drain funds from the contract. 
* **No Safeguards:** The contract lacks any safeguards to prevent this type of attack. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1453,127,4.957983493804932
109,reentrancy,"YES

The contract uses the `supportsToken` function in the `Bank` contract to determine if a token is supported. This function is vulnerable to reentrancy attacks because it allows the `ModifierEntrancy` contract to call `airDrop` multiple times before the initial execution is complete. 
",1054,62,2.4673728942871094
110,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `CashOut` function calls `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. 
* **Reentrancy Vulnerability:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1299,120,4.695498704910278
111,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a reentrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1503,115,4.550267457962036
112,reentrancy,"YES

The `withdrawAll` function allows an attacker to call the `call.value(oCredit)` function before the initial execution is complete. This creates a reentrancy vulnerability. 
",767,41,1.6450955867767334
113,reentrancy,"NO 
",758,4,0.229811429977417
114,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The line `if(msg.sender.call.value(_am)())` allows an attacker to call the contract again before the initial execution is complete. 
",1257,49,1.9927785396575928
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1253,47,1.9148099422454834
116,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1331,47,1.918470859527588
117,reentrancy,"YES

The contract uses `msg.sender.call.value(amountToWithdraw)("""")` which allows for reentrancy attacks. 
",811,31,1.2640886306762695
118,reentrancy,"YES
 
The code uses `msg.sender.call.value(userBalance[msg.sender])()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",754,52,2.0654613971710205
119,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `CashOut` function.  The `if(msg.sender.call.value(_am)())` line allows an attacker to call the `CashOut` function repeatedly, draining the contract's funds. 
",1361,61,2.4487195014953613
120,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1227,47,1.9081180095672607
121,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1407,47,1.9333665370941162
122,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1241,47,1.9131443500518799
123,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the `Collect` function repeatedly, draining the contract of funds. This is a classic reentrancy vulnerability. 
",1335,58,2.3279366493225098
124,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1227,47,1.9052493572235107
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1411,47,1.921088695526123
126,reentrancy,"YES

The contract uses `msg.sender.call.value(amountToWithdraw)("""")` which allows for reentrancy attacks. 
",698,31,1.2560219764709473
127,time manipulation,"NO 
",600,4,0.2206401824951172
128,time manipulation,"YES
 
The contract relies heavily on `block.timestamp` for its functionality, making it susceptible to manipulation by miners. This can lead to unexpected outcomes and security breaches. 
",871,39,1.586251974105835
129,time manipulation,"YES
 
The contract relies heavily on `block.timestamp` for its functionality. This makes it vulnerable to manipulation by miners, as they can adjust the timestamp to their advantage. 
",1083,40,1.6352546215057373
130,time manipulation,"NO 
",719,4,0.22730493545532227
131,time manipulation,"YES
 
The contract relies on `block.timestamp` for the random number generation. This is vulnerable to manipulation by miners, as they can change the reported timestamp. 
",869,38,1.5392284393310547
132,short addresses,"NO 
",907,4,0.23920154571533203
133,denial of service,"YES
 
The contract has a vulnerability that allows denial of service attacks.  The `emptyCreditors` function can be exploited to reset the contract's state and potentially cause it to become unresponsive. 
",872,45,1.8018908500671387
134,denial of service,"YES
 
The contract's `insertNnumbers` function is vulnerable to Denial of Service (DoS) attacks.  Here's why:

* **Infinite Loop:** The `for` loop in `insertNnumbers` has no termination condition. It will continue to execute indefinitely, consuming resources and potentially causing the contract to become unresponsive. 
* **Resource Exhaustion:** The `insertNnumbers` function uses `array.length += 1` to dynamically grow the array. This can lead to a situation where the array size exceeds the available memory, causing the contract to crash. 


",1003,125,4.898597478866577
135,denial of service,"YES
 
The code has a potential denial of service vulnerability.  The lines `creditorAddresses = new address[](0);` and `creditorAmounts = new uint[](0);`  are setting the arrays to be empty. This can be exploited to cause the contract to crash. 
",2232,63,2.6097452640533447
136,denial of service,"YES
 
The contract uses `send` which is a function that is not part of the standard ERC20 token. This can be exploited to drain funds from the contract. 
",892,40,1.6177310943603516
137,denial of service,"YES
 
The contract has a potential denial of service vulnerability.  The `ifillArray` function pushes the sender's address into the `listAddresses` array repeatedly, potentially leading to a denial of service attack. 
",731,49,1.9493091106414795
138,denial of service,"NO 
",703,4,0.22697710990905762
