case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"NO 
",1353,4,0.26648521423339844
12,access control,"NO 
",1049,4,0.25197649002075195
13,access control,"NO 
",3291,4,0.4163210391998291
14,access control,"NO 
",1224,4,0.25961899757385254
15,access control,"NO 
",1063,4,0.25177764892578125
16,access control,"NO 
",1163,4,0.2571737766265869
17,access control,"NO 
",1011,4,0.25066423416137695
18,access control,"NO 
",1254,4,0.2641568183898926
19,access control,"NO 
",1049,4,0.25133442878723145
20,access control,"YES
 
The contract uses a custom timestamp calculation function that is not standardized. This can be exploited by attackers to manipulate the contract's state. 
",1245,34,1.426042079925537
21,access control,"NO 
",1006,4,0.2505683898925781
22,access control,"NO 
",1274,4,0.2662227153778076
23,access control,"NO 
",949,4,0.2374422550201416
24,access control,"NO 
",1057,4,0.2506701946258545
25,access control,"NO 
",1028,4,0.25072264671325684
26,access control,"YES
 
The contract uses `fibonacciLibrary.delegatecall` to call external functions. This can be exploited by an attacker to call functions on the `fibonacciLibrary` contract. 
",1533,41,1.7296428680419922
27,unchecked low level calls,"NO 
",1851,4,0.3169825077056885
28,unchecked low level calls,"YES
 
The code uses the `toTimestamp` function to calculate the timestamp of a given date. This function is vulnerable because it does not handle the case where the timestamp is not a valid number. 
",2046,45,1.9115242958068848
29,unchecked low level calls,"NO 
",1549,4,0.28968286514282227
30,unchecked low level calls,"YES
 
The vulnerability lies in line 110:             msg.sender.send(valuePaid);
 
The vulnerability lies in line 118:             msg.sender.send(excessPaid);
 
The vulnerability lies in line 132:             currentMonarch.etherAddress.send(compensation);
 
The vulnerability lies in line 174:         wizardAddress.send(amount);
 
These lines call the `send()` function, which can fail.  This can lead to a loss of funds for the contract. 
",2941,124,5.032393455505371
31,unchecked low level calls,"NO 
",1128,4,0.2557215690612793
32,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the code will continue to run. This can lead to unexpected outcomes and vulnerabilities. 
",3073,57,2.4542479515075684
33,unchecked low level calls,"YES
 
The contract uses the `call()` function, which is a low-level function that does not propagate errors. This means that if the `call()` function fails, the contract will continue to execute the next line of code, potentially leading to unexpected behavior and vulnerabilities. 
",985,60,2.419508218765259
34,unchecked low level calls,"NO 
",1317,4,0.26550841331481934
35,unchecked low level calls,"NO 
",2021,4,0.33791041374206543
36,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds. 
",1920,60,2.4984943866729736
37,unchecked low level calls,"NO 
",1303,4,0.2672569751739502
38,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the contract will continue to execute. This can lead to unexpected behavior and vulnerabilities. 
",1948,57,2.3808834552764893
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can lead to unexpected behavior.  The `call.value` function can be exploited to drain funds from the contract. 
",2868,52,2.2430620193481445
40,unchecked low level calls,"YES
 
The code uses `_dst.call.value(_value)(_data);` to call a function on another contract. This is a low-level call that doesn't propagate errors.  This can lead to unexpected behavior and vulnerabilities. 
",2381,56,2.367873191833496
41,unchecked low level calls,"YES
 
The `execute` function calls a function on the target address (`_dst`) with the specified value (`_value`) and data (`_data`) using the `call.value` function. This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",1721,77,3.1269843578338623
42,unchecked low level calls,"NO 
",1991,4,0.3255131244659424
43,unchecked low level calls,"NO 
",1107,4,0.2534151077270508
44,unchecked low level calls,"NO 
",1549,4,0.2888758182525635
45,unchecked low level calls,"YES
 
The `execute` function is vulnerable because it calls `_dst.call.value(_value)(_data)` without any checks. This means that the contract doesn't know what the `_dst` address is or what the `_value` and `_data` are. This can lead to a reentrancy attack, where an attacker can call the `execute` function multiple times to drain the contract of funds. 
",2349,94,3.8109347820281982
46,unchecked low level calls,"NO 
",1022,4,0.2505612373352051
47,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds. 
",1864,60,2.48075532913208
48,unchecked low level calls,"NO 
",1132,4,0.25737524032592773
49,unchecked low level calls,"NO 
",2027,4,0.33631181716918945
50,unchecked low level calls,"NO 
",2027,4,0.33864307403564453
51,unchecked low level calls,"NO 
",1201,4,0.2592284679412842
52,unchecked low level calls,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day. This function is vulnerable to a reentrancy attack. 
",1464,41,1.716336965560913
53,unchecked low level calls,"NO 
",1111,4,0.25598669052124023
54,unchecked low level calls,"NO 
",1130,4,0.25554442405700684
55,unchecked low level calls,"NO 
",1987,4,0.324756383895874
56,unchecked low level calls,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day. This timestamp is then used to call the `fuck.call` function. The `fuck.call` function is a low-level function that does not propagate errors. This means that if the `fuck.call` function fails, the contract will continue to execute the rest of the code without any error handling. This can lead to unexpected behavior and potential vulnerabilities. 
",1128,103,4.1007239818573
57,unchecked low level calls,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day. This function is vulnerable to a reentrancy attack. 
",1395,41,1.7124593257904053
58,unchecked low level calls,"NO 
",1132,4,0.2558910846710205
59,unchecked low level calls,"NO 
",1991,4,0.3251161575317383
60,unchecked low level calls,"YES
 
The `callAddress` function calls the target address directly, without any checks or safeguards. This makes it susceptible to reentrancy attacks and other vulnerabilities. 
",931,38,1.554004430770874
61,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions are low-level and do not propagate errors. This means that if a function call fails, the contract will not revert. This can lead to unexpected outcomes and vulnerabilities. 
",2758,64,2.6982030868530273
62,unchecked low level calls,"YES
 
The `toTimestamp` function is vulnerable because it uses the `call` function to execute arbitrary code. This is a major security risk as it allows an attacker to potentially execute malicious code on the contract. 
",1238,48,1.9618005752563477
63,unchecked low level calls,"NO 
",1239,4,0.2606363296508789
64,unchecked low level calls,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day. This function is vulnerable to a reentrancy attack. 
",1393,41,1.7027053833007812
65,unchecked low level calls,"NO 
",1173,4,0.25917649269104004
66,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the contract will continue to run. This can lead to unexpected behavior and vulnerabilities. 
",1948,57,2.36907958984375
67,unchecked low level calls,"NO 
",1935,4,0.32306766510009766
68,unchecked low level calls,"NO 
",1072,4,0.2516491413116455
69,unchecked low level calls,"NO 
",1241,4,0.26019716262817383
70,unchecked low level calls,"NO 
",1136,4,0.257427453994751
71,unchecked low level calls,"YES
 
The `toTimestamp` function is vulnerable because it uses the `_target.call.value(_value)()` function. This function does not propagate errors, meaning that if the call to the target address fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",1184,67,2.6992199420928955
72,unchecked low level calls,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day. This function is vulnerable to a reentrancy attack. 
",1393,41,1.7064838409423828
73,front running,"NO 
",1183,4,0.25756025314331055
74,front running,"NO 
",1125,4,0.25601696968078613
75,front running,"NO 
",2521,4,0.3497481346130371
76,front running,"NO 
",1438,4,0.27120065689086914
77,arithmetic,"YES
 
The `toTimestamp` function uses a naive approach to calculate the timestamp, which could lead to integer overflows.  The code doesn't handle the potential for overflow when calculating the timestamp. 
",939,45,1.830077886581421
78,arithmetic,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day.  The `toTimestamp` function uses a complex calculation that could potentially lead to integer overflows. 
",904,49,1.9796147346496582
79,arithmetic,"YES
 
The contract's `toTimestamp` function calculates a timestamp based on year, month, and day.  The calculation for the timestamp is not robust and could lead to overflows. 
",896,43,1.7574608325958252
80,arithmetic,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day.  The `toTimestamp` function uses a complex calculation that could lead to arithmetic overflows and underflows. 
",904,51,2.0747201442718506
81,arithmetic,"NO 
",1187,4,0.25850677490234375
82,arithmetic,"YES
 
The code uses the `toTimestamp` function to calculate the timestamp of a given date. This function uses a complex calculation that could be vulnerable to integer overflows and underflows. 
",1292,42,1.753504991531372
83,arithmetic,"YES
 
The code uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day.  The `toTimestamp` function uses a complex calculation that involves the leap year and the GMT to local time conversion.  This calculation can lead to integer overflows and underflows, especially if the input values are large. 
",1010,74,2.9619712829589844
84,arithmetic,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day.  The `toTimestamp` function uses a series of calculations that could potentially lead to integer overflows. 
",917,50,2.017393112182617
85,arithmetic,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day.  The `toTimestamp` function uses a complex calculation that could potentially lead to arithmetic overflows and underflows. 
",992,52,2.1202890872955322
86,arithmetic,"YES
 
 The code uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day.  The `toTimestamp` function does not handle arithmetic overflows and underflows.  The `overflowaddtostate`, `overflowmultostate`, `underflowtostate`, `overflowlocalonly`, `overflowmulocalonly`, and `underflowlocalonly` functions are vulnerable to integer overflows and underflows. 
",1307,93,3.7144694328308105
87,arithmetic,"NO 
",1144,4,0.2569606304168701
88,arithmetic,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day.  The `toTimestamp` function uses a complex calculation that could potentially lead to integer overflows. 
",904,49,1.9740302562713623
89,arithmetic,"YES

The `add` function in the `Overflow` contract is vulnerable to integer overflows.  The line `sellerBalance += value;`  could potentially overflow the `uint` data type, leading to unexpected behavior and potential loss of funds. 
",924,53,2.1400086879730225
90,arithmetic,"YES
 
The code has a potential for integer overflow and underflow vulnerabilities.  Specifically, the `toTimestamp` function uses a combination of calculations that could lead to overflows if the input values are not carefully managed. 
",986,48,1.9403455257415771
91,bad randomness,"NO 
",1296,4,0.2662670612335205
92,bad randomness,"YES
 
The code uses the `block.number` variable to generate a pseudo-random number for the raffle. This is a major security vulnerability.  The `block.number` is predictable and can be manipulated by miners. This means that the random number generator is not truly random, and attackers can exploit this to manipulate the outcome of the raffle. 
",3151,76,3.1871402263641357
93,bad randomness,"YES
The code uses the `rand` function to generate random numbers. However, the implementation of this function is vulnerable to attacks. The randomness is based on the block number and the block hash, which can be predictable. This means that attackers can manipulate the block number or the block hash to influence the random number generation. 
",3490,68,2.8921589851379395
94,bad randomness,"NO 
",1454,4,0.2720777988433838
95,bad randomness,"YES
 
The contract uses a timestamp-dependent function to generate the answer. This means that the answer is not truly random, and can be manipulated by miners. 
",1147,37,1.5339276790618896
96,bad randomness,"NO 
",1239,4,0.2602076530456543
97,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1719,45,1.880079984664917
98,reentrancy,"NO 
",1259,4,0.2651073932647705
99,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the contract again before the initial execution is complete. This can lead to a reentrancy attack. 
",1793,56,2.3296608924865723
100,reentrancy,"YES
 
The `toTimestamp` function is vulnerable to reentrancy attacks.  The function allows external contracts to call the `toTimestamp` function before the initial execution is complete. This can allow an attacker to repeatedly call the function and drain the contract of funds. 
",1166,59,2.387193202972412
101,reentrancy,"NO 
",1109,4,0.25498485565185547
102,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1715,45,1.885467290878296
103,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The line `if(msg.sender.call.value(_am)())` allows an attacker to call the contract again before the initial execution is complete. 
",1949,49,2.054553270339966
104,reentrancy,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day. This function is vulnerable to reentrancy attacks because it allows external contracts to call the `getFirstWithdrawalBonus` function before the initial execution is complete. 
",1222,60,2.4419033527374268
105,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1941,55,2.290478467941284
106,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1891,45,1.895949363708496
107,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1719,45,1.8942360877990723
108,reentrancy,"YES
 
The code uses a function `WithdrawToHolder` that calls a function `WithdrawToken` with the `_to` and `_token` parameters. This function call is made before the `WithdrawToken` function has finished executing. This can lead to a reentrancy attack. 
",1833,64,2.6326467990875244
109,reentrancy,"YES
 
The `airDrop` function in the `ModifierEntrancy` contract is vulnerable to reentrancy attacks.  The `airDrop` function allows an attacker to call the contract multiple times before the initial execution is complete. 
",1434,52,2.1364994049072266
110,reentrancy,"YES
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",1679,31,1.3400568962097168
111,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1883,45,1.9014360904693604
112,reentrancy,"YES
 
The `toTimestamp` function calculates a timestamp based on the year, month, and day. This function is vulnerable to reentrancy attacks because it allows external contracts to call the `toTimestamp` function before the initial execution is complete. 
",1147,55,2.2416207790374756
113,reentrancy,"NO 
",1138,4,0.25701904296875
114,reentrancy,"YES
The `CashOut` function allows an attacker to call the `call.value(_am)` function before the `balances[msg.sender]-=_am` operation is complete. This can lead to a reentrancy attack. 
",1637,51,2.1137592792510986
115,reentrancy,"YES
The `CashOut` function allows an attacker to call the `call.value(_am)` function before the `balances[msg.sender]-=_am` operation is complete. This creates a reentrancy vulnerability. 
",1633,49,2.0346224308013916
116,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1711,45,1.9045321941375732
117,reentrancy,"YES
 
The contract uses the `toTimestamp` function to calculate a timestamp based on the year, month, and day. This function is vulnerable to reentrancy attacks because it allows external contracts to call the `transfer` function before the initial execution is complete. 
",1191,58,2.3512489795684814
118,reentrancy,"YES
 
The code uses a timestamp-dependent function to determine the balance of an address. This can be exploited by a malicious actor to manipulate the timestamp and drain the contract of funds. 
",1134,42,1.7265281677246094
119,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1741,45,1.8981683254241943
120,reentrancy,"YES
The `CashOut` function allows an attacker to call `msg.sender.call.value(_am)()` before the `_am` is deducted from the balance. This creates a reentrancy vulnerability. 
",1607,48,2.007025957107544
121,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1787,47,1.9704854488372803
122,reentrancy,"YES
The `CashOut` function allows an attacker to call `msg.sender.call.value(_am)()` before the `_am` is deducted from the balance. This creates a reentrancy vulnerability. 
",1621,48,2.0080392360687256
123,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the contract again before the initial execution is complete, leading to a reentrancy attack. 
",1715,52,2.1559441089630127
124,reentrancy,"YES
The `CashOut` function allows an attacker to call `msg.sender.call.value(_am)()` before the `balances[msg.sender]-=_am` operation is complete. This creates a reentrancy vulnerability. 
",1607,52,2.1632184982299805
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1791,47,1.9694390296936035
126,reentrancy,"NO 
",1078,4,0.2527134418487549
127,time manipulation,"YES
 
The contract relies heavily on the `block.timestamp` for its functionality, which is susceptible to manipulation by miners. This makes the contract vulnerable to time manipulation attacks. 
",980,40,1.6460137367248535
128,time manipulation,"YES
 
The contract uses the `block.timestamp` to generate a random number. This is a common vulnerability because the timestamp can be manipulated by miners. 
",1251,36,1.5105104446411133
129,time manipulation,"YES
 
The contract relies on `block.timestamp` for its functionality, which is susceptible to manipulation by miners. This can lead to the contract being exploited to drain funds or to perform actions at a different time than intended. 
",1463,50,2.063178300857544
130,time manipulation,"YES
 
The contract uses a custom timestamp calculation that relies on the block timestamp. This means that the contract's logic is directly tied to the block timestamp, which can be manipulated by miners. This makes the contract vulnerable to time manipulation attacks. 
",1099,54,2.2045040130615234
131,time manipulation,"YES
 
The contract uses the `block.timestamp` to generate a random number. This is a common vulnerability because the timestamp can be manipulated by miners. 
",1249,36,1.5038862228393555
132,short addresses,"NO 
",1287,4,0.26577138900756836
133,denial of service,"YES
 
The contract uses a timestamp-dependent function to determine the winner. This can be exploited by a malicious actor to manipulate the timestamp and win the contract. 
",1252,37,1.551755666732788
134,denial of service,"NO 
",1383,4,0.270829439163208
135,denial of service,"YES
 
The code has a potential denial of service vulnerability.  The line `creditorAddresses = new address[](0);` and `creditorAmounts = new uint[](0);`  are vulnerable to denial of service attacks. 
",2612,52,2.223989963531494
136,denial of service,"YES
 
The contract uses a timestamp-dependent function to determine the refund amount. This means that if the timestamp is manipulated, the refund amount can be manipulated as well. This is a classic example of a timestamp-dependent vulnerability. 
",1272,51,2.090116262435913
137,denial of service,"YES
 
The contract's `ifillArray` function is vulnerable to a Denial of Service (DoS) attack. It pushes the sender's address into the `listAddresses` array repeatedly, potentially exhausting the contract's memory and causing it to crash. 
",1111,58,2.3446240425109863
138,denial of service,"NO 
",1083,4,0.25235819816589355
