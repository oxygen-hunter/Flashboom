case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"YES
 
The contract's `newOwner` function allows anyone to set the contract's owner, which is a major security vulnerability.  This means an attacker could potentially take control of the contract. 
",1485,46,1.9234356880187988
12,access control,"YES
 
The contract uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",1181,25,1.070735216140747
13,access control,"YES
The contract uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",3423,23,1.1647861003875732
14,access control,"YES
 
The contract uses the `_finishBet` function to handle bets and calculate profits. This function has a potential reentrancy vulnerability. 

Here's why:

* **Reentrancy:** The `_finishBet` function allows for external calls to be made within the function. This creates a potential for an attacker to call the function multiple times before the contract has a chance to complete the transaction. 
* **Potential for Exploitation:**  An attacker could exploit this vulnerability by repeatedly calling `_finishBet` with different inputs, draining the contract's funds. 


",1356,124,4.909778118133545
15,access control,"YES
 
The contract uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",1195,25,1.0714504718780518
16,access control,"YES
 
The contract uses `random` function which is vulnerable to manipulation. 
",1295,20,0.8903512954711914
17,access control,"YES
 
The contract uses `delegatecall` which can be exploited for reentrancy attacks. 
",1143,25,1.0672786235809326
18,access control,"YES
 
The contract uses the `_finishBet` function to handle bets and calculate profits. This function has a potential reentrancy vulnerability. 

Here's why:

* **Reentrancy:** The `_finishBet` function allows for external calls to be made within the function. This creates a potential for an attacker to call the function multiple times before the contract has a chance to complete the execution of the previous call. 
* **Potential for Exploiting:**  An attacker could call `_finishBet` repeatedly, potentially draining the contract's funds. 


",1386,123,4.879913091659546
19,access control,"YES
 
The contract uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",1181,25,1.07564377784729
20,access control,"YES
 
The contract uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",1377,25,1.0901713371276855
21,access control,"YES
 
The contract uses `tx.origin == owner` to ensure only the owner can call the `sendTo` function. This is a common vulnerability, as it can be bypassed by an attacker who can manipulate the `tx.origin` value. 
",1138,55,2.2259271144866943
22,access control,"YES
 
The contract uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",1406,25,1.0963702201843262
23,access control,"YES
 
The contract uses the `sudicideAnyone` function, which allows the contract owner to self-destruct. This is a classic example of a ""suicide"" function, which can be exploited by malicious actors to drain the contract's funds. 
",1081,55,2.281217098236084
24,access control,"YES
 
The contract uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",1189,25,1.0695321559906006
25,access control,"YES
 
The contract uses `tx.origin == owner` for access control. This is a common vulnerability, as it can be bypassed by attackers. 
",1160,35,1.4584550857543945
26,access control,"YES
 
The contract uses `fibonacci` function, which is vulnerable to reentrancy attacks. 
",1665,24,1.0716114044189453
27,unchecked low level calls,"YES
 
The code uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",1983,25,1.1429500579833984
28,unchecked low level calls,"YES
 
The contract uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the contract will continue to execute. This can lead to unexpected behavior and vulnerabilities. 
",2178,57,2.3845322132110596
29,unchecked low level calls,"YES
 
The code uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",1681,25,1.1222279071807861
30,unchecked low level calls,"YES
 
The code uses `send` which can fail.  This can lead to unexpected outcomes and vulnerabilities. 
",3073,27,1.304750919342041
31,unchecked low level calls,"YES
 
The contract uses the `_finishBet` function which calls `random` and `maxRandom` functions. These functions are vulnerable to reentrancy attacks. 
",1260,39,1.6273822784423828
32,unchecked low level calls,"YES
 
 The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the code will continue to run. This can lead to unexpected outcomes and vulnerabilities. 
",3205,57,2.451447010040283
33,unchecked low level calls,"YES
 
The contract uses `callchecked` and `callnotchecked` functions. These functions do not check the return value of the `call` function. This can lead to vulnerabilities, as the contract may execute unintended actions. 
",1117,51,2.0865442752838135
34,unchecked low level calls,"YES
 
The `_finishBet` function is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected `_finishBet`:** The function doesn't explicitly check for reentrancy.
* **Potential for Reentrancy:**  An attacker could call `_finishBet` multiple times within a short timeframe, potentially draining the contract's funds. 
* **Lack of Safeguards:** The function doesn't include any safeguards to prevent reentrancy. 


",1449,108,4.297976493835449
35,unchecked low level calls,"YES
 
The code uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",2153,25,1.158088207244873
36,unchecked low level calls,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Withdraw:** The `WithdrawToHolder` function doesn't check for reentrancy. 
* **Potential for Reentrancy:**  An attacker could call `WithdrawToHolder` repeatedly, potentially draining funds from the contract. 
* **Lack of Safeguard:** The code lacks any mechanism to prevent a malicious actor from repeatedly calling `WithdrawToHolder` to drain funds. 


",2052,111,4.46500563621521
37,unchecked low level calls,"YES
 
The `_finishBet` function is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected `_finishBet`:** The function doesn't explicitly check for reentrancy.
* **Potential for Reentrancy:**  An attacker could call `_finishBet` multiple times within a short timeframe, potentially draining the contract's funds. 
* **No Reentrancy Guard:** The function doesn't include any checks to prevent reentrancy. 


",1435,109,4.358252286911011
38,unchecked low level calls,"YES
 
The `WithdrawTokenToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `WithdrawToHolder` function calls `_addr.call.value(_wei);` which is a low-level call. This means that the contract can be called again before the previous call has finished. 
* **Potential for Exploitation:**  An attacker could call `WithdrawToHolder` repeatedly, draining funds from the contract. 


Let me know if you'd like to explore other aspects of smart contract security! 
",2080,125,5.0318615436553955
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can be exploited.  The `call.value` function can be used to send Ether to a contract, and the `gas` function can be used to set the gas limit for a function call.  These functions can be used to send Ether to a contract, and the `gas` function can be used to set the gas limit for a function call.  These functions can be used to send Ether to a contract, and the `gas` function can be used to set the gas limit for a function call.  These functions can be used to send Ether to a contract, and the `gas` function can be used to set the gas limit for a function call.  These functions can be used to send Ether to a contract, and the `gas` function can be used to set the gas limit for a function call.  These functions can be used to send Ether to a contract, and the `gas` function can be used to set the gas limit for a function call.  These functions can be used to send Ether to a contract, and the `gas` function can be used to set the gas limit for a function call.  These functions can be used to send Ether to a contract, and the `gas` function can be used to set the gas limit for a function call.  These functions can be used to send Ether to",3000,301,11.869892120361328
40,unchecked low level calls,"YES
 
The `execute` function is vulnerable to reentrancy attacks.  Here's why:

* **Low-Level Calls:** The `execute` function uses `_dst.call.value(_value)(_data)` which is a low-level call.
* **No Propagation:**  Low-level calls don't propagate errors, meaning if the function call fails, the contract execution doesn't stop.
* **Potential for Reentrancy:**  An attacker could call `execute` multiple times within a short period, potentially draining funds. 


",2513,121,4.894194841384888
41,unchecked low level calls,"YES
 
The `execute` function allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors. This means an attacker could potentially execute malicious code. 
",1853,63,2.6050260066986084
42,unchecked low level calls,"YES
 
The code uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",2123,25,1.1498596668243408
43,unchecked low level calls,"YES
 
 The contract uses `_finishBet` function which is vulnerable to reentrancy attacks. 
 
  Here's why:
  
  * **Reentrancy:** The `_finishBet` function allows for external contract calls before resolving effects. 
  * **Potential for Exploitation:** An attacker could call `_finishBet` multiple times within a short timeframe, potentially draining the contract's funds. 
  * **Lack of Safeguards:** The contract lacks proper safeguards to prevent reentrancy. 
 
  **Recommendation:** Implement a reentrancy guard mechanism to prevent this vulnerability. 
",1239,135,5.318750381469727
44,unchecked low level calls,"YES
 
The code uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",1681,25,1.1155169010162354
45,unchecked low level calls,"YES
 
The vulnerability lies in line 30:         _dst.call.value(_value)(_data);

This line calls the `call` function with `value` and `_data`.  The `call` function can be vulnerable to reentrancy attacks. 
",2481,62,2.5926294326782227
46,unchecked low level calls,"YES
 
The contract uses the `_finishBet` function to handle betting and payouts. This function has a potential reentrancy vulnerability.  The function does not check for reentrancy, and it allows an attacker to call the function repeatedly, potentially draining the contract of funds. 
",1154,62,2.505984306335449
47,unchecked low level calls,"YES
 
The `WithdrawToken` function in the `TokenBank` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `WithdrawToken` function calls the `token.call` function, which is a low-level call that doesn't propagate errors. This means an attacker could call the `WithdrawToken` function multiple times in rapid succession, potentially draining the contract's funds. 
* **Lack of Protection:** The `WithdrawToken` function doesn't have any checks to prevent multiple calls. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1996,141,5.628116607666016
48,unchecked low level calls,"YES
 
The contract uses `caddress.call()` which is a low-level function that does not propagate errors. This means that if the `caddress.call()` function fails, the contract will continue to execute without any error handling. This can lead to unexpected behavior and potential vulnerabilities. 
",1264,64,2.596663236618042
49,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions are low-level and do not propagate errors. This means that if an error occurs, the contract will continue to execute without stopping. This can lead to unexpected behavior and vulnerabilities. 
",2159,66,2.7322964668273926
50,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions are low-level and do not propagate errors. This means that if an error occurs, the contract will continue to execute without stopping. This can lead to unexpected behavior and vulnerabilities. 
",2159,66,2.7369275093078613
51,unchecked low level calls,"YES
 
The contract uses the `_finishBet` function which is vulnerable to reentrancy attacks.  The function does not check for reentrancy, and it allows an attacker to call the function repeatedly, draining the contract of funds. 
",1333,54,2.2058827877044678
52,unchecked low level calls,"YES
 
The contract uses `caddress.call()` which is a low-level function that does not propagate errors. This means that if the `caddress.call()` function fails, the contract will continue to execute the rest of the code without stopping. This can lead to unexpected behavior and potential vulnerabilities. 
",1596,67,2.7636373043060303
53,unchecked low level calls,"YES
 
The contract uses the `call.value()` function, which is a low-level function that does not propagate errors. This can lead to unexpected behavior and vulnerabilities. 
",1243,40,1.658111333847046
54,unchecked low level calls,"YES
 
The contract uses the `_finishBet` function which calls `caddress.call` with a `bytes4` identifier. This is a low-level call that does not propagate errors.  The `_finishBet` function can be vulnerable to reentrancy attacks. 
",1262,63,2.560762643814087
55,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the contract will continue to run. This can lead to unexpected behavior and vulnerabilities. 
",2119,57,2.404277801513672
56,unchecked low level calls,"YES
 
The contract uses the `fuck.call()` function, which is a low-level call that does not propagate errors. This can lead to unexpected behavior and vulnerabilities. 
",1260,40,1.6727211475372314
57,unchecked low level calls,"YES
 
The `_finishBet` function is vulnerable to reentrancy attacks.  Here's why:

* **Low-Level Calls:** The `_finishBet` function uses `target.call.value(msg.value)(data)` to execute a function on the target contract. This is a low-level call that doesn't propagate errors.
* **Potential for Reentrancy:**  An attacker could call `_finishBet` multiple times within a short timeframe, potentially draining the contract's funds. 
* **Lack of Error Handling:** The function doesn't explicitly check for reentrancy or handle potential errors from the target contract. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1527,162,6.429162263870239
58,unchecked low level calls,"YES
 
The contract uses the `_finishBet` function which calls `random` and `maxRandom` functions. These functions are vulnerable to reentrancy attacks. 
",1264,39,1.6229252815246582
59,unchecked low level calls,"YES
 
The code uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",2123,25,1.160168170928955
60,unchecked low level calls,"YES
 
The `callAddress` function allows an attacker to call any contract with the `call` function. This can lead to reentrancy attacks, where an attacker can call the function repeatedly and drain the contract of funds. 
",1063,51,2.068845272064209
61,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, so if a function call fails, the code will continue to run. This can lead to unexpected outcomes and vulnerabilities. 
",2890,58,2.4875071048736572
62,unchecked low level calls,"YES
 
The `_finishBet` function is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected `_finishBet`:** The function doesn't have any checks to prevent reentrancy.
* **Potential for Multiple Calls:**  An attacker could call `_finishBet` multiple times within a short timeframe, potentially draining the contract's funds. 
* **Reentrancy Vulnerability:**  The function's logic doesn't account for the possibility of a reentrancy attack. 


",1370,115,4.574794769287109
63,unchecked low level calls,"YES
 
The contract uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",1371,25,1.083930253982544
64,unchecked low level calls,"YES
 
The `_finishBet` function is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected `_finishBet`:** The function doesn't have any explicit checks to prevent reentrancy.
* **Potential for Multiple Calls:**  An attacker could call `_finishBet` multiple times within a short timeframe, potentially draining the contract's funds. 
* **No Reentrancy Guard:** The function doesn't include any safeguards to prevent a malicious actor from repeatedly calling it. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1525,134,5.335036039352417
65,unchecked low level calls,"YES
 
The contract uses `call` and `callcode` functions, which are low-level and don't propagate errors. This means that if the `call` function fails, the contract won't revert.  The `_finishBet` function calls `call` and `callcode` to execute arbitrary code, which is a major security vulnerability. 
",1305,79,3.181118965148926
66,unchecked low level calls,"YES
 
The `WithdrawTokenToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `WithdrawToHolder` function calls `_addr.call.value(_wei);` which is a low-level call. This means that the contract can be called again before the previous call has finished. 
* **Potential for Exploitation:**  An attacker could call `WithdrawToHolder` repeatedly, draining funds from the contract. 


Let me know if you'd like to explore other aspects of smart contract security! 
",2080,125,5.023473262786865
67,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions are low-level and do not propagate errors. This means that if an error occurs, the contract will continue to run without stopping. This can lead to unexpected behavior and vulnerabilities. 
",2067,66,2.7543065547943115
68,unchecked low level calls,"YES
 
The contract uses the `call.value()` function, which can be exploited for reentrancy attacks. 
",1204,28,1.1847975254058838
69,unchecked low level calls,"YES
 
The contract uses `_finishBet` function which is vulnerable to reentrancy attacks. 
",1373,25,1.0814683437347412
70,unchecked low level calls,"YES
 
The contract uses `call` and `callcode` functions, which are low-level and don't propagate errors. This means that if the `call` function fails, the contract won't revert.  The `_finishBet` function calls `call` and `callcode` to execute arbitrary code, which is a major security risk. 
",1268,79,3.175861120223999
71,unchecked low level calls,"YES
 
The code uses `_finishBet` function which is vulnerable to reentrancy attacks.  The function does not check for reentrancy and allows an attacker to call the function repeatedly, draining the contract of funds. 
",1316,51,2.0856924057006836
72,unchecked low level calls,"YES
 
The `_finishBet` function is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected `_finishBet`:** The function doesn't have any checks to prevent reentrancy.
* **Potential for Multiple Calls:**  An attacker could call `_finishBet` multiple times within a short timeframe, potentially draining the contract's funds. 
* **No Reentrancy Guard:** The function doesn't include any checks to prevent a malicious actor from calling it repeatedly. 


",1525,114,4.57379150390625
73,front running,"YES
 
The contract uses a function `_finishBet` that calculates a profit based on a random number. This function is vulnerable to front-running attacks. 
",1315,37,1.5539636611938477
74,front running,"YES
 
The contract uses a `random` function that relies on the block hash and an address for entropy. This can be manipulated by a malicious actor to generate a predictable result. 
",1257,41,1.7035763263702393
75,front running,"YES
 
The contract uses a `random` function that relies on the block number and an address as input. This can be exploited by a malicious actor to manipulate the outcome of the random number generation. 
",2653,45,1.968184232711792
76,front running,"YES
 
The contract uses a `random` function that relies on the block hash and an address as input. This can be exploited by a malicious actor to manipulate the outcome of the game. 
",1570,43,1.8089675903320312
77,arithmetic,"YES
 
The code uses `map[k] -= v;` which can lead to integer overflows and underflows.  This is a common vulnerability in smart contracts. 
",1071,39,1.6217231750488281
78,arithmetic,"YES
 
The contract uses a function `_finishBet` that is vulnerable to reentrancy attacks.  The function `_finishBet` is called repeatedly, and the `run` function is called within the `_finishBet` function. This creates a loop that can be exploited by an attacker. 
",1036,67,2.704429864883423
79,arithmetic,"YES
 
The contract uses a `random` function that relies on the block hash and an address as input. This can be manipulated by an attacker to generate a specific outcome. 
",1028,40,1.659332513809204
80,arithmetic,"YES
 
The contract uses a `random` function that relies on the block hash and an address as input. This can be manipulated by an attacker to generate a specific outcome. 
",1036,40,1.6437537670135498
81,arithmetic,"YES
 
 The `_finishBet` function is vulnerable to reentrancy attacks.  Here's why:

* **Potential for Reentrancy:** The function `_finishBet` allows for external contract calls.  This creates a potential for an attacker to call the function multiple times within a short time frame, potentially draining the contract's funds.
* **Lack of Safeguards:** The function doesn't include any safeguards to prevent reentrancy. 
* **Reentrancy Vulnerability:**  The function's logic doesn't prevent an attacker from repeatedly calling it, leading to a reentrancy attack. 


",1319,134,5.340308666229248
82,arithmetic,"YES
 
The code uses a `random` function that relies on the block hash and an address for entropy. This can be manipulated by an attacker to produce a predictable result. 
",1424,40,1.6798768043518066
83,arithmetic,"YES
 
The code has a potential for integer overflow.  Specifically, the line `count -= input;`  could lead to an overflow if the input is large enough. 
",1142,40,1.6547322273254395
84,arithmetic,"YES
 
The contract uses a `random` function that relies on the block hash and an address for entropy. This can be manipulated by attackers to generate a specific outcome. 
",1049,39,1.6160252094268799
85,arithmetic,"YES
 
The contract uses a `random` function that relies on the block hash and an entropy value. This can be manipulated by attackers to generate a specific outcome. 
",1124,38,1.5855934619903564
86,arithmetic,"YES
 
The code uses `count += input;` `count *= input;` `count -= input;` `uint res = count + input;` `uint res = count * input;` `uint res = count - input;`  which are vulnerable to arithmetic overflows and underflows. 
",1439,66,2.67356014251709
87,arithmetic,"YES
 
The code uses a `random` function that relies on a block hash and an entropy value. This can be manipulated by attackers to produce a desired outcome. 
",1276,38,1.5843939781188965
88,arithmetic,"YES
 
The contract uses a `random` function that relies on the block hash and an address for entropy. This can be manipulated by an attacker to generate a specific outcome. 
",1036,40,1.6483561992645264
89,arithmetic,"YES
 
 The code uses a `random` function that relies on the block hash and an entropy value. This can be manipulated by attackers to generate a specific outcome. 
",1056,38,1.5663213729858398
90,arithmetic,"YES
 
The contract uses a `random` function that relies on the block hash and an address as input. This can be manipulated by an attacker to generate a specific outcome. 
",1118,40,1.6591796875
91,bad randomness,"YES
 
The contract uses the `blockhash` function to determine the outcome of the game. This is a potential vulnerability because the `blockhash` function is deterministic and can be manipulated by miners. 
",1428,45,1.867995262145996
92,bad randomness,"YES
The code uses a function `random` that relies on the block number and an address for entropy. This is a known vulnerability as it can be predictable and exploited. 
",3283,38,1.7262475490570068
93,bad randomness,"YES
The code uses a function called `rand` that relies on the block number and a hash to generate a random number. This is a known vulnerability as it can be predictable and manipulated. 
",3622,42,1.9246857166290283
94,bad randomness,"YES
 
 The code uses a random number generator that is based on the block number and the entropy of the player. This can be manipulated by attackers to predict the outcome of the bet. 
",1586,42,1.7655723094940186
95,bad randomness,"YES
 
The contract uses `keccak256` to generate a random number, but it's not truly random. The `block.blockhash` and `now` values are predictable and can be manipulated by miners. This makes the generated number predictable and susceptible to attacks. 
",1279,63,2.5593838691711426
96,bad randomness,"YES
 
The contract uses a function `random` that relies on a predictable sequence of values generated by `blockhash`. This makes the function vulnerable to attacks that exploit the predictable nature of the hash function. 
",1371,46,1.9011282920837402
97,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1851,45,1.9100067615509033
98,reentrancy,"YES
 
The contract uses a function `_finishBet` that allows for reentrancy.  The function `_finishBet` is vulnerable to reentrancy attacks because it allows for external contract calls before the initial execution is complete. 
",1391,53,2.1861608028411865
99,reentrancy,"YES
The code uses a function `_finishBet` that allows for reentrancy. 
",1925,22,1.0053865909576416
100,reentrancy,"YES
 
The contract uses a function `_finishBet` that allows for reentrancy.  The function `_finishBet` is vulnerable to reentrancy attacks because it allows for external contract calls before the initial execution is complete. 
",1298,53,2.172342300415039
101,reentrancy,"YES
 
The `_finishBet` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The function calls `ZTHTKN.transfer` which is an external contract call. This means the contract can be called again before the initial execution is complete.
* **Potential for Reentrancy:**  The `_finishBet` function could be called multiple times by an attacker, leading to a reentrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1241,122,4.84558367729187
102,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1847,45,1.9040749073028564
103,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",2081,45,1.9102208614349365
104,reentrancy,"YES
 
The contract uses a function `_finishBet` that allows for reentrancy.  The function `_finishBet` is vulnerable to reentrancy attacks because it allows for external contract calls to be made before the initial execution is complete. 
",1354,56,2.2982170581817627
105,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",2073,45,1.926253080368042
106,reentrancy,"YES
The code uses a function `_finishBet` that allows for reentrancy. 
",2023,22,1.0193407535552979
107,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1851,45,1.8953258991241455
108,reentrancy,"YES
 
The `_finishBet` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The function calls an external contract (`ZTHTKN`) before resolving the effects of the current execution.
* **Potential for Reentrancy:**  An attacker could call `_finishBet` multiple times within a short timeframe, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any checks to prevent repeated calls to `_finishBet` or to ensure that the external contract is not being manipulated. 


",1965,126,5.054264068603516
109,reentrancy,"YES
 
The contract uses a `supportsToken` function that calls `airDrop` function. This creates a reentrancy vulnerability. 
",1566,32,1.372948169708252
110,reentrancy,"YES
The code uses a function `_finishBet` that allows for reentrancy. 
",1811,22,1.0040602684020996
111,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",2015,45,1.911898136138916
112,reentrancy,"YES
 
The contract uses a function `_finishBet` that allows for reentrancy.  The function `_finishBet` is vulnerable to reentrancy attacks because it allows for external contract calls before the initial execution is complete. 
",1279,53,2.1726996898651123
113,reentrancy,"YES
 
The contract uses a function `_finishBet` that allows for reentrancy.  The function `_finishBet` is vulnerable to reentrancy attacks because it allows for external contract calls before the initial execution is complete. 
",1270,53,2.165390968322754
114,reentrancy,"YES
The code uses a function `_finishBet` that allows for reentrancy.  The function does not check for reentrancy, and the `_finishBet` function is called repeatedly. 
",1769,45,1.8895769119262695
115,reentrancy,"YES
The code uses a function `_finishBet` that allows for reentrancy.  The function calls `ZTHTKN.transfer` which could be exploited by an attacker. 
",1765,42,1.786649227142334
116,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the contract again before the initial execution is complete, leading to a reentrancy attack. 
",1843,52,2.169196367263794
117,reentrancy,"YES
 
The contract uses a function `_finishBet` that allows for reentrancy.  The function `_finishBet` is vulnerable to reentrancy attacks because it allows for external contract calls to be made before the initial execution is complete. 
",1323,56,2.293795108795166
118,reentrancy,"YES
 
The contract uses a function `_finishBet` that allows for reentrancy.  The function `_finishBet` is vulnerable to reentrancy attacks because it allows for external contract calls before the initial execution is complete. 
",1266,53,2.172062873840332
119,reentrancy,"YES
The code uses a function `_finishBet` that allows for reentrancy. 
",1873,22,1.0012729167938232
120,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1739,45,1.8941361904144287
121,reentrancy,"YES
 
The contract uses a function `_finishBet` that allows for reentrancy.  The function does not check for the state of the contract before it calls another function. 
",1919,42,1.8021011352539062
122,reentrancy,"YES
The code uses a function `_finishBet` that allows for reentrancy.  The function does not check for reentrancy, and the `_finishBet` function is called repeatedly. 
",1753,45,1.8919925689697266
123,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the contract again before the initial execution is complete, leading to a reentrancy attack. 
",1847,52,2.17958927154541
124,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1739,45,1.8825392723083496
125,reentrancy,"YES
The code uses a function `_finishBet` that allows for reentrancy.  The function does not check for reentrancy, and the `_finishBet` function is called repeatedly. 
",1923,45,1.9004011154174805
126,reentrancy,"YES
 
The contract uses a function `_finishBet` that allows for reentrancy.  The function calls `ZTHTKN.transfer` which can be exploited by an attacker. 
",1210,44,1.81760573387146
127,time manipulation,"YES
 
The contract relies heavily on the `block.timestamp` for its functionality, making it vulnerable to manipulation by miners.  The `isSaleFinished` function, in particular, is susceptible to this vulnerability. 
",1112,48,1.951127052307129
128,time manipulation,"YES
The contract uses `block.timestamp` for randomness, which is not a secure way to generate true randomness. 
",1383,27,1.1641969680786133
129,time manipulation,"YES
 
The contract relies heavily on the `block.timestamp` for its functionality. This makes it vulnerable to manipulation by miners, as they can adjust the timestamp to their advantage. 
",1595,41,1.7278592586517334
130,time manipulation,"YES
 
The contract uses the `now` variable to determine the current block timestamp. This can be manipulated by miners, potentially leading to a reentrancy attack. 
",1231,38,1.5714194774627686
131,time manipulation,"YES
 
The contract uses `block.timestamp` in the `random` function, which can be manipulated by miners. This makes the contract vulnerable to time manipulation attacks. 
",1381,39,1.6391770839691162
132,short addresses,"YES
 
The contract uses a function `_finishBet` that calculates a random number based on the block number and the player's input. This function is vulnerable to reentrancy attacks. 
",1419,44,1.8255727291107178
133,denial of service,"YES
 
The contract uses a `random` function that relies on the block hash and an address for entropy. This is a common vulnerability, as it can be manipulated to produce predictable results. 
",1384,43,1.785564661026001
134,denial of service,"YES
 
The contract uses a `for` loop that iterates over a fixed number of times. This loop could be exploited to cause a denial of service attack. 
",1515,38,1.614164113998413
135,denial of service,"YES
 
The contract uses a function `_finishBet` that is vulnerable to reentrancy attacks.  The function does not check for reentrancy, and the `_finishBet` function is called repeatedly. 
",2744,49,2.1276984214782715
136,denial of service,"YES
 
The contract uses a `random` function that generates a number based on the block hash and an address. This function is vulnerable to manipulation and can be used to exploit the contract. 
",1404,43,1.7864484786987305
137,denial of service,"YES
The contract uses a function `_finishBet` that calls a random number generator. This function is vulnerable to reentrancy attacks. 
",1243,32,1.3516781330108643
138,denial of service,"YES
 
The contract uses a function `_finishBet` that is vulnerable to reentrancy attacks.  The function has a `require` statement that checks if the `rollUnder` is less than the `result`. If it is, the contract will transfer the `profit` to the player and set the `maxProfit` to the `profit`. 
",1215,77,3.084486722946167
