case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"NO 
",896,4,0.23916339874267578
12,access control,"NO 
",592,4,0.2201986312866211
13,access control,"YES
 
 The contract uses `msg.sender` to determine the owner of the contract. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",2834,43,1.8842921257019043
14,access control,"NO 
",767,4,0.23154973983764648
15,access control,"NO 
",606,4,0.22411394119262695
16,access control,"NO 
",706,4,0.22743868827819824
17,access control,"NO 
",554,4,0.21982049942016602
18,access control,"NO 
",797,4,0.23275375366210938
19,access control,"NO 
",592,4,0.22121214866638184
20,access control,"NO 
",788,4,0.23286890983581543
21,access control,"NO 
",549,4,0.22181177139282227
22,access control,"NO 
",817,4,0.234360933303833
23,access control,"NO 
",492,4,0.218217134475708
24,access control,"NO 
",600,4,0.22288012504577637
25,access control,"NO 
",571,4,0.2218465805053711
26,access control,"YES

The contract uses `fibonacciLibrary.delegatecall` to execute functions. This is a potential vulnerability because it allows an attacker to call functions on the `fibonacciLibrary` contract. 
",1076,41,1.6762213706970215
27,unchecked low level calls,"NO 
",1394,4,0.2843508720397949
28,unchecked low level calls,"YES
 
 The contract uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if the `call` function fails, the contract will continue to execute. This can lead to unexpected behavior and vulnerabilities. 
 
 The vulnerability lies in line 54:         owner2.send(sum2);
 
 The vulnerability lies in line 65:           owner.send(balance); 
 
 These lines call external functions without any error handling. If the external function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
 
 The contract does not have any error handling for the `call`, `callcode`, `delegatecall`, and `send` functions. 
 
 The contract does not have any error handling for the `call`, `callcode`, `delegatecall`, and `send` functions. 
 
 The contract does not have any error handling for the `call`, `callcode`, `delegatecall`, and `send` functions. 
 
 The contract does not have any error handling for the `call`, `callcode`, `delegatecall`, and `send` functions. 
 
 The contract does not have any error handling for the `call`, `callcode`, `delegatecall`, and `send` functions. 
 
 The contract",1589,301,11.588271379470825
29,unchecked low level calls,"YES
 
The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  A reentrancy attack occurs when a malicious contract calls a function within itself, potentially leading to unintended consequences.
* **Vulnerability:** The `allowance` function doesn't explicitly check for reentrancy. If an attacker can call the `Command` function multiple times, they could potentially drain the contract's funds. 
* **Example:** An attacker could call `Command` with a malicious payload that calls `allowance` repeatedly, draining the contract's funds. 


",1092,131,5.123741149902344
30,unchecked low level calls,"YES
 
 The code has several vulnerabilities, including:

* **Unchecked Return Values:** The `claimThrone` function doesn't check the return value of `msg.sender.send(valuePaid)`. This can lead to unexpected behavior and potential exploits.
* **Low Level Function Calls:** The `send` function can fail, and the code doesn't handle this. 
* **Unprotected Access Control:** The `transferOwnership` function is not restricted to specific addresses, making it vulnerable to attacks. 
* **Lack of Error Handling:** The code doesn't handle errors gracefully, leaving it open to exploits. 
* **Reentrancy Vulnerability:** The `claimThrone` function could be vulnerable to reentrancy attacks. 
* **Arithmetic Overflows and Underflows:** The code doesn't handle arithmetic overflows and underflows well. 
* **Timestamp Dependence:** The code relies on the block timestamp for critical functionality, which can be manipulated. 
* **Unclear Contract Logic:** The code lacks clear and concise comments, making it difficult to understand the intended functionality. 



",2484,233,9.162731647491455
31,unchecked low level calls,"YES

The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  An attacker could call the `transfer` function multiple times within a short period, potentially draining the contract's funds.
* **Unchecked Return Values:** The `allowance` function doesn't check the return value of the `call` function. If the `call` function fails, the contract doesn't handle the failure, leaving it vulnerable to reentrancy. 


Let me know if you'd like to explore other aspects of smart contract security! 
",671,126,4.930559158325195
32,unchecked low level calls,"YES
 
 The `cash` function is vulnerable because it does not check the return value of `winner.send(subpot)`. This can lead to a reentrancy attack, where an attacker can repeatedly call the `cash` function to drain the contract's funds. 
",2616,61,2.5660552978515625
33,unchecked low level calls,"NO 
",528,4,0.21963906288146973
34,unchecked low level calls,"NO 
",860,4,0.23505043983459473
35,unchecked low level calls,"NO 
",1564,4,0.3055415153503418
36,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds for the contract owner. 
",1463,67,2.6824798583984375
37,unchecked low level calls,"NO 
",846,4,0.23488640785217285
38,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds for the contract owner. 
",1491,67,2.686657190322876
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can lead to unexpected behavior.  The `call.value` function can be exploited to drain funds from the contract. 
",2411,52,2.2020928859710693
40,unchecked low level calls,"YES
 
 The `execute` function is vulnerable because it calls a function on the target address without any checks for success or failure. This can lead to reentrancy attacks, where an attacker can repeatedly call the `execute` function to drain the contract's funds. 
",1924,59,2.424381732940674
41,unchecked low level calls,"YES
 
The `execute` function allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors. This means that if the `_dst` contract is malicious, it can execute arbitrary code and potentially drain funds. 
",1264,76,3.044801950454712
42,unchecked low level calls,"NO 
",1534,4,0.3023350238800049
43,unchecked low level calls,"YES
 
 The `allowance` function allows for the transfer of tokens from one address to another.  This is a common vulnerability in smart contracts, as it can be exploited to drain funds from the contract. 
",650,46,1.8378679752349854
44,unchecked low level calls,"NO 
",1092,4,0.25914573669433594
45,unchecked low level calls,"YES
 
The `_dst.call.value(_value)(_data);` line is vulnerable because it uses the `call` function, which does not propagate errors. This means that if the `call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",1892,66,2.6820263862609863
46,unchecked low level calls,"NO 
",565,4,0.22038006782531738
47,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds for the contract owner. 
",1407,64,2.5684762001037598
48,unchecked low level calls,"YES

The `transfer` function calls `caddress.call` which is a low-level function.  This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",675,57,2.262286424636841
49,unchecked low level calls,"NO 
",1570,4,0.3053603172302246
50,unchecked low level calls,"NO 
",1570,4,0.30507469177246094
51,unchecked low level calls,"YES
 
The `sendMoney` function calls `_target.call.value(_value)(_data)` which is a low-level function.  This function does not propagate errors, meaning it will not revert the execution if it fails.  This can lead to unexpected behavior and potential vulnerabilities. 
",744,65,2.565918207168579
52,unchecked low level calls,"YES
 
The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  A reentrancy attack occurs when a malicious contract calls a function within itself, potentially leading to unintended consequences.
* **Vulnerability:** The `allowance` function doesn't explicitly check for reentrancy. If an attacker can call the `transfer` function multiple times within a short time frame, they could potentially drain the contract's funds. 


Let me know if you'd like to explore more about reentrancy attacks. 
",1007,124,4.847137689590454
53,unchecked low level calls,"NO 
",654,4,0.22489619255065918
54,unchecked low level calls,"YES

The `transfer` function calls `caddress.call(id,from,_tos[i],v)` which is a low-level call. This means that the function will not propagate errors and will continue to run even if the call fails. This can lead to unexpected behavior and potential vulnerabilities. 
",673,65,2.5675806999206543
55,unchecked low level calls,"NO 
",1530,4,0.3036646842956543
56,unchecked low level calls,"YES
 
The `makeOldFucks` function calls `fuck.call(bytes4(sha3(""giveBlockReward()"")));` which is a low-level call.  This function does not propagate errors, meaning it will continue to execute even if it fails. This can lead to unexpected behavior and potential vulnerabilities. 
",671,70,2.7713208198547363
57,unchecked low level calls,"YES

The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  An attacker could call `allowance` multiple times to drain funds from the contract. 
* **Unchecked Return Values:** The `allowance` function doesn't check for the validity of the returned value. 
* **Potential for Manipulation:** The `allowance` function could be manipulated to allow an attacker to spend funds they don't have. 


",938,102,4.025865316390991
58,unchecked low level calls,"YES

The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  An attacker could call the `transfer` function multiple times within a short period, potentially draining the contract's funds.
* **Unchecked Return Values:** The `allowance` function doesn't check the return value of the `call` function. If the `call` function fails, the contract doesn't handle the failure, leaving it vulnerable to reentrancy. 


Let me know if you'd like to explore other aspects of smart contract security! 
",675,126,4.919517517089844
59,unchecked low level calls,"YES
 
The `allowance` function is vulnerable because it does not check the return value of the `call` function. If the `call` function fails, the `allowance` function will not be able to detect it. This can lead to a situation where the contract is unable to track the amount of tokens that an owner has allowed to a spender. 
",1534,76,3.0844550132751465
60,unchecked low level calls,"YES

The `callAddress` function calls the target address directly, without any checks or error handling. This is a potential reentrancy vulnerability, as an attacker could call the function repeatedly to drain the contract's funds. 
",474,49,1.9450271129608154
61,unchecked low level calls,"YES
 
The contract uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the contract will continue to execute. This can lead to unexpected outcomes and vulnerabilities. 
",2301,57,2.384970188140869
62,unchecked low level calls,"YES
 
The `getTokens` function calls `addr.call.value(0 wei)();` which is a low-level function that does not propagate errors. This can lead to unexpected behavior and potential vulnerabilities. 
",781,48,1.9180912971496582
63,unchecked low level calls,"NO 
",782,4,0.2324368953704834
64,unchecked low level calls,"YES
 
The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  An attacker could call `allowance` multiple times to drain funds from the contract. 
* **Unchecked Return Values:** The `allowance` function doesn't check for the validity of the returned value. 
* **Potential for Manipulation:** The `allowance` function could be manipulated to allow an attacker to spend funds they don't have. 


Let me know if you'd like to explore other aspects of smart contract security! 
",936,123,4.807918310165405
65,unchecked low level calls,"YES

The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  An attacker could call the `transfer` function multiple times within a short period, potentially draining the contract's funds.
* **Unchecked Return Values:** The `allowance` function doesn't check the return value of the `call` function. If the `call` function fails, the contract doesn't handle the failure, leaving it vulnerable to reentrancy. 


Let me know if you'd like to explore other aspects of smart contract security! 
",716,126,4.907751798629761
66,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds for the contract owner. 
",1491,67,2.689683198928833
67,unchecked low level calls,"NO 
",1478,4,0.2889406681060791
68,unchecked low level calls,"NO 
",615,4,0.22398161888122559
69,unchecked low level calls,"NO 
",784,4,0.231886625289917
70,unchecked low level calls,"YES

The contract uses `caddress.call(id,from,_tos[i],v[i])` which is a low-level call function. This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",679,67,2.6605892181396484
71,unchecked low level calls,"YES
 
The `sendMoney` function calls `_target.call.value(_value)`, which is a low-level function that doesn't propagate errors. This means that if the `_target` address doesn't have enough funds, the contract will continue to execute, potentially leading to a loss of funds. 
",727,71,2.806025743484497
72,unchecked low level calls,"YES
 
The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  An attacker could call `allowance` multiple times to drain funds.
* **Unchecked Return Values:** The `allowance` function doesn't check for the validity of the returned value. 
* **Potential for Manipulation:**  The `allowance` function could be manipulated to allow an attacker to spend funds they don't have. 


",936,101,3.9695956707000732
73,front running,"NO 
",726,4,0.22869658470153809
74,front running,"NO 
",668,4,0.22728872299194336
75,front running,"NO 
",2064,4,0.32932186126708984
76,front running,"NO 
",981,4,0.24161219596862793
77,arithmetic,"YES

The `init` function uses a mapping to store values.  The `init` function is vulnerable to integer overflows and underflows because it subtracts a value from a key in the mapping.  This can lead to unexpected behavior and potential for exploits. 
",482,56,2.2239370346069336
78,arithmetic,"YES

The `run` function multiplies the `count` variable by the input, which could lead to integer overflows. 
",447,28,1.1279985904693604
79,arithmetic,"NO 
",439,4,0.20475292205810547
80,arithmetic,"YES

The `run` function subtracts `input` from `count`.  This could lead to an integer overflow if `input` is large enough. 
",447,35,1.396679401397705
81,arithmetic,"NO 
",730,4,0.2278745174407959
82,arithmetic,"NO 
",835,4,0.23476600646972656
83,arithmetic,"YES

The `run` function subtracts `input` from `count`.  This could lead to integer overflows if `input` is large enough. 
",553,34,1.3705615997314453
84,arithmetic,"YES

The code uses a subtraction operation (`count - input`) which could lead to an integer overflow if the `input` value is large enough. 
",460,33,1.3215477466583252
85,arithmetic,"YES

The `run` function subtracts `input` from `count`.  This could lead to integer overflows if `input` is large enough. 
",535,34,1.3761858940124512
86,arithmetic,"YES

The code uses unsigned integers and does not handle overflows and underflows well.  The `overflowaddtostate`, `overflowmultostate`, `underflowtostate`, `overflowlocalonly`, `overflowmulocalonly`, and `underflowlocalonly` functions are vulnerable to arithmetic overflows and underflows. 
",850,67,2.650017499923706
87,arithmetic,"NO 
",687,4,0.22751164436340332
88,arithmetic,"YES

The `run` function in the contract uses `count += input;` which is susceptible to integer overflows.  This is because the `count` variable is an unsigned integer, and the `input` variable could be a large number. If the `input` is large enough, it could overflow the `count` variable, leading to unexpected and potentially malicious behavior. 
",447,79,3.094142198562622
89,arithmetic,"YES
 
 The `add` function in the `Overflow` contract is vulnerable to integer overflows.  The line `sellerBalance += value;`  can cause an overflow if the `value` is too large. 
",467,48,1.8896734714508057
90,arithmetic,"YES

The code has a potential for integer overflows and underflows.  The `transfer` function uses `balanceOf` which is an unsigned integer. If the `_value` is large enough, it could overflow the `balanceOf` variable. 
",529,52,2.0608623027801514
91,bad randomness,"NO 
",839,4,0.23472881317138672
92,bad randomness,"YES
 
 The code uses `block.number` to generate random numbers for the raffle. This is a major security vulnerability because it's predictable and can be manipulated by miners. 
",2694,41,1.8033533096313477
93,bad randomness,"YES
The code uses a function `rand` that relies on the block hash to generate a pseudo-random number. This is a known security vulnerability as it is predictable and can be manipulated by attackers. 
",3033,44,1.9292700290679932
94,bad randomness,"NO 
",997,4,0.2547798156738281
95,bad randomness,"NO 
",690,4,0.22712254524230957
96,bad randomness,"NO 
",782,4,0.23218107223510742
97,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1262,121,4.750218391418457
98,reentrancy,"NO 
",802,4,0.23458266258239746
99,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1336,47,1.9091925621032715
100,reentrancy,"YES

The `withdraw` function allows for external calls to be made to the contract before the initial execution is complete. This is a classic reentrancy vulnerability. 
",709,36,1.4512693881988525
101,reentrancy,"NO 
",652,4,0.22648143768310547
102,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the `Collect` function repeatedly, draining the contract of funds. This is a classic reentrancy vulnerability. 
",1258,58,2.344381332397461
103,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1492,47,1.927839756011963
104,reentrancy,"YES

The contract uses a mapping called `allowed` to track the allowance of tokens for specific addresses. This mapping is used to determine the amount of tokens that an address can spend on behalf of another address.  However, the contract does not implement any checks to prevent reentrancy attacks. This means that an attacker could potentially call the `getFirstWithdrawalBonus` function repeatedly, leading to a reentrancy attack. 
",765,87,3.4386045932769775
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function multiple times in rapid succession, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1484,132,5.214473724365234
106,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The line `if(msg.sender.call.value(_am)())` allows an attacker to call the contract again before the initial call is complete. 
",1434,49,1.9973790645599365
107,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the `Collect` function repeatedly, draining the contract of funds. This is a classic reentrancy attack. 
",1262,58,2.3462748527526855
108,reentrancy,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `WithdrawToHolder` function calls an external address (`_addr`) with the value (`_wei`) sent to it. This means the contract doesn't know what the external address will do with the funds.
* **Potential for Reentrancy:**  An attacker could call `WithdrawToHolder` multiple times, each time with a different amount, potentially draining the contract's funds. 
* **Lack of Safeguards:** The contract doesn't have any safeguards to prevent this type of attack. 


",1376,141,5.522207498550415
109,reentrancy,"YES

The `airDrop` function in the `ModifierEntrancy` contract is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `airDrop` function calls `ModifierEntrancy(msg.sender).airDrop()` which means it can be called repeatedly.
* **No Locking:** The `airDrop` function does not have any locking mechanisms to prevent multiple calls. 
* **Reentrancy:**  An attacker could call `airDrop` repeatedly, potentially draining the contract's funds. 


",977,117,4.604745626449585
110,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1222,47,1.92691969871521
111,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The line `if(msg.sender.call.value(_am)())` allows an attacker to call the contract again before the initial function completes. 
",1426,48,1.9706931114196777
112,reentrancy,"YES

The contract uses the `call.value` function, which allows external contracts to call functions within the contract. This can be exploited by an attacker to call the contract's functions repeatedly before the initial execution is complete, leading to a reentrancy attack. 
",690,57,2.2622971534729004
113,reentrancy,"NO 
",681,4,0.22631072998046875
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1180,47,1.9022116661071777
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1176,47,1.9204444885253906
116,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The line `if(msg.sender.call.value(_am)())` allows an attacker to call the contract again before the initial execution is complete. 
",1254,49,2.009031057357788
117,reentrancy,"YES
 
The contract uses a `transfer` function that allows for the transfer of tokens. This function is vulnerable to reentrancy attacks because it allows for the transfer of tokens to be called from an external contract. 
",734,48,1.9291903972625732
118,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The `withdrawBalance` function allows an attacker to call `addToBalance` repeatedly, draining the contract of funds. 
",677,40,1.6089122295379639
119,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `CashOut` function.  Here's why:

* **External Contract Calls:** The `CashOut` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution Flow:** The code doesn't clearly define how the `call.value(_am)` function interacts with the contract's state. 
* **Potential for Reentrancy:**  An attacker could call `CashOut` repeatedly, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1284,146,5.700160503387451
120,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1150,47,1.913769006729126
121,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1330,119,4.702496528625488
122,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1164,47,1.90714693069458
123,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the `Collect` function repeatedly, draining the contract of funds. This is a classic reentrancy vulnerability. 
",1258,58,2.3640189170837402
124,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1150,47,1.9094810485839844
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1334,47,1.9230742454528809
126,reentrancy,"YES

The contract uses a mapping called `allowed` to track the allowance of an owner for a spender. This mapping is used to determine the amount of tokens that a spender can access. However, the contract does not implement any checks to prevent a reentrancy attack. This means that an attacker could call the `withdrawBalance` function multiple times, potentially draining the contract of funds. 
",621,81,3.1909830570220947
127,time manipulation,"NO 
",523,4,0.21805644035339355
128,time manipulation,"YES
 
The contract uses `block.timestamp` for random number generation, which is susceptible to manipulation by miners. This can lead to unfair outcomes and security vulnerabilities. 
",794,38,1.5375621318817139
129,time manipulation,"YES
 
The contract relies on `block.timestamp` for the `lastInvestmentTimestamp` which is a potential point of manipulation by miners. 
",1006,33,1.373117208480835
130,time manipulation,"NO 
",642,4,0.2253432273864746
131,time manipulation,"YES
 
The contract uses `block.timestamp` to generate a random number, which is a common vulnerability.  The contract is vulnerable to manipulation by miners. 
",792,37,1.511247158050537
132,short addresses,"NO 
",830,4,0.23498225212097168
133,denial of service,"YES
 
The contract's `addCreditors` function allows the contract owner to add 350 new addresses to the `creditorAddresses` array. This can be exploited to create a denial of service attack by adding a large number of addresses, potentially overwhelming the contract's memory and causing it to crash. 
",795,70,2.7640953063964844
134,denial of service,"NO 
",926,4,0.2409205436706543
135,denial of service,"YES
 
The code has a potential denial of service vulnerability.  The line `creditorAddresses = new address[](0);` and `creditorAmounts = new uint[](0);`  are vulnerable to denial of service attacks. 
",2155,52,2.1935477256774902
136,denial of service,"YES

The contract's `allowance` function allows for the potential of a denial of service attack.  The `allowed` mapping allows for the attacker to manipulate the `allowance` function to their advantage. 
",815,45,1.8107805252075195
137,denial of service,"YES
 
The contract's `ifillArray` function pushes the sender's address into the `listAddresses` array repeatedly, potentially leading to a denial of service attack. This is because the function can be called repeatedly, and the `listAddresses` array can be filled with a large number of addresses, causing the contract to become unresponsive. 
",654,75,2.9477856159210205
138,denial of service,"YES
 
The code uses `currentFrontrunner.send(currentBid)` which is vulnerable to Denial of Service attacks.  This line allows the contract to be taken offline by a malicious actor. 
",626,45,1.7941043376922607
