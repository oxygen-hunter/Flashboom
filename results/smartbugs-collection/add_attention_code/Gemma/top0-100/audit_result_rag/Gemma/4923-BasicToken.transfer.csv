case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"NO 
",1039,4,0.2610900402069092
12,access control,"NO 
",735,4,0.2351694107055664
13,access control,"YES
The contract uses `msg.sender` to determine the owner. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",2977,38,1.738732099533081
14,access control,"NO 
",910,4,0.24519658088684082
15,access control,"YES
 
The contract uses `msg.sender` to determine the owner. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",749,40,1.6375672817230225
16,access control,"NO 
",849,4,0.23857760429382324
17,access control,"YES
 
The code uses `delegatecall` which can be a source of vulnerabilities.  It's important to note that `delegatecall` can be used to execute arbitrary code, which can be exploited by attackers. 
",697,51,2.0606510639190674
18,access control,"NO 
",940,4,0.24417710304260254
19,access control,"NO 
",735,4,0.23474526405334473
20,access control,"NO 
",931,4,0.24564409255981445
21,access control,"NO 
",692,4,0.23280835151672363
22,access control,"NO 
",960,4,0.24695324897766113
23,access control,"NO 
",635,4,0.2296466827392578
24,access control,"YES
 
The contract uses the `msg.sender` to validate callers, which is a common vulnerability.  
",743,26,1.0908212661743164
25,access control,"NO 
",714,4,0.23218178749084473
26,access control,"YES
 
The contract uses `fibonacciLibrary.delegatecall` to execute external functions. This is a potential vulnerability as it allows an attacker to potentially execute arbitrary code on the contract. 
",1219,42,1.749906063079834
27,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1537,45,1.9077274799346924
28,unchecked low level calls,"YES
 
The `tokens_buy` function calls `transferFrom` with a `bytes4` value. This is a low-level call that does not propagate errors.  The `transferFrom` function can fail, and the contract will continue to execute. This can lead to unexpected outcomes and vulnerabilities. 
",1732,67,2.756373643875122
29,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",1235,46,1.906259536743164
30,unchecked low level calls,"YES
 
The code has several vulnerabilities:

* **Unchecked Return Values:** The `claimThrone` function returns a boolean value, but it doesn't check if the return value is true or false. This can lead to unexpected behavior.
* **Low Level Function Calls:** The `claimThrone` function uses `msg.sender.send(valuePaid)` and `msg.sender.send(excessPaid)`. These functions are low-level and can be vulnerable to reentrancy attacks.
* **Unprotected Access Control:** The `transferOwnership` function allows anyone to change the contract's owner. This is a security risk. 
* **Unclear State Management:** The contract doesn't have clear state management, which can lead to unexpected behavior. 
* **Lack of Error Handling:** The contract doesn't handle errors gracefully. 
* **Reentrancy Vulnerability:** The `claimThrone` function is vulnerable to reentrancy attacks. 
* **Arithmetic Overflow/Underflow:** The contract doesn't handle arithmetic overflows and underflows well. 
* **Timestamp Dependence:** The contract uses the block timestamp for critical functionality, which can be manipulated by miners. 
* **Lack of Randomness:** The contract doesn't use true randomness, which can lead to vulnerabilities. 



",2627,277,11.01768159866333
31,unchecked low level calls,"NO 
",814,4,0.23810577392578125
32,unchecked low level calls,"YES
 
The `cash` function is vulnerable because it does not check the return value of `winner.send(subpot)`. This can lead to a reentrancy attack, where an attacker can repeatedly call the `cash` function to drain the contract's funds. 
",2759,61,2.6057631969451904
33,unchecked low level calls,"NO 
",671,4,0.2319474220275879
34,unchecked low level calls,"NO 
",1003,4,0.2585768699645996
35,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling the target address with the provided data and value. This is a classic example of a reentrancy vulnerability. 
",1707,40,1.7126998901367188
36,unchecked low level calls,"YES
The `WithdrawToken` function calls the `token.call` function. This function is vulnerable because it does not handle errors. If the `token.call` function fails, the contract will not revert and the funds will be lost. 
",1606,53,2.2221968173980713
37,unchecked low level calls,"YES
 
The `contract_address.call` function is vulnerable to reentrancy attacks.  The `call` function does not propagate errors, so an attacker could call the contract multiple times to drain the contract of funds. 
",989,51,2.085745096206665
38,unchecked low level calls,"YES
The `WithdrawToken` function calls the `token.call` function. This function is vulnerable because it does not handle errors. If the transfer fails, the contract will continue to run and the `WithdrawToken` function will not be able to handle the error. 
",1634,58,2.4004933834075928
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` to execute functions. This can lead to reentrancy attacks. 
",2554,32,1.4573404788970947
40,unchecked low level calls,"YES
 
The `execute` function is vulnerable because it calls a function on the target contract without any checks for success or failure. This can lead to reentrancy attacks, where an attacker can repeatedly call the `execute` function to drain the contract of funds. 
",2067,58,2.440549373626709
41,unchecked low level calls,"YES
 
The `execute` function is vulnerable to reentrancy attacks.  The `_dst.call.value(_value)(_data)` line allows an attacker to call the function multiple times, draining the contract's funds. 
",1407,53,2.188302993774414
42,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1677,45,1.9061400890350342
43,unchecked low level calls,"NO 
",793,4,0.2365436553955078
44,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",1235,46,1.9126009941101074
45,unchecked low level calls,"YES
 
The `execute` function is vulnerable to reentrancy attacks.  Here's why:

* **Low-Level Calls:** The `_dst.call.value(_value)(_data)` line calls a function on the target contract (`_dst`) with the specified value and data.
* **No Revert:** Solidity's `call` function doesn't propagate errors. If the target contract's execution fails, the `execute` function will continue to run.
* **Reentrancy Vulnerability:** An attacker can call `execute` multiple times within a short period, potentially draining funds from the contract. 


",2035,135,5.430233716964722
46,unchecked low level calls,"NO 
",708,4,0.23188376426696777
47,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function. This function is vulnerable because it does not handle errors. If the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",1550,58,2.3963606357574463
48,unchecked low level calls,"YES

The `caddress.call` function is vulnerable to reentrancy attacks.  It allows an attacker to call the contract multiple times before the original transaction is completed. 
",818,39,1.609985113143921
49,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1713,45,1.9125738143920898
50,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1713,45,1.9256231784820557
51,unchecked low level calls,"YES
 
The `sendMoney` function uses `_target.call.value(_value)(_data)` which is a low-level call.  This function does not propagate errors, meaning if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",887,66,2.6562001705169678
52,unchecked low level calls,"YES
 
The contract uses `caddress.call()` which is a low-level function that does not propagate errors. This means that if the `caddress.call()` function fails, the contract will continue to execute the rest of the code without any error handling. This can lead to unexpected behavior and potential vulnerabilities. 
",1150,69,2.809100389480591
53,unchecked low level calls,"NO 
",797,4,0.23633050918579102
54,unchecked low level calls,"NO 
",816,4,0.23837900161743164
55,unchecked low level calls,"YES
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1673,43,1.8411390781402588
56,unchecked low level calls,"YES
 
The contract uses `fuck.call(bytes4(sha3(""giveBlockReward()"")));` which is a low-level call. This can lead to unexpected behavior and potential vulnerabilities. 
",814,45,1.8524253368377686
57,unchecked low level calls,"NO 
",1081,4,0.26035428047180176
58,unchecked low level calls,"NO 
",818,4,0.23792648315429688
59,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1677,45,1.9108493328094482
60,unchecked low level calls,"YES
 
The `callAddress` function in the `Caller` contract calls the `a.call()` function. This function is a low-level call that does not propagate errors.  This means that if the `a.call()` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",617,71,2.851544141769409
61,unchecked low level calls,"YES
 
The `callFirstTarget` and `callSecondTarget` functions call external contracts with `msg.value` as the argument. This can lead to reentrancy attacks, as the attacker can call the function multiple times to drain the contract. 
",2444,56,2.3869802951812744
62,unchecked low level calls,"YES
 
The `addr.call.value(0 wei)();` line is vulnerable to reentrancy attacks.  It allows an attacker to repeatedly call the function and drain the contract of funds. 
",924,45,1.8482089042663574
63,unchecked low level calls,"NO 
",925,4,0.24516820907592773
64,unchecked low level calls,"NO 
",1079,4,0.2600831985473633
65,unchecked low level calls,"NO 
",859,4,0.23922324180603027
66,unchecked low level calls,"YES
The `WithdrawToken` function calls the `token.call` function. This function is vulnerable because it does not handle errors. If the transfer fails, the contract will continue to run and the `WithdrawToken` function will not be able to handle the error. 
",1634,58,2.402909994125366
67,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1621,45,1.9158039093017578
68,unchecked low level calls,"NO 
",758,4,0.23503780364990234
69,unchecked low level calls,"NO 
",927,4,0.24422216415405273
70,unchecked low level calls,"NO 
",822,4,0.2380828857421875
71,unchecked low level calls,"YES
 
The `sendMoney` function calls `_target.call.value(_value)();` which is a low-level function that does not propagate errors. This means that if the `_target` address does not have enough funds, the contract will not revert and the funds will be sent to the `_target` address. This can lead to a loss of funds for the contract owner. 
",870,86,3.451441764831543
72,unchecked low level calls,"NO 
",1079,4,0.26096129417419434
73,front running,"NO 
",869,4,0.2426447868347168
74,front running,"NO 
",811,4,0.2374894618988037
75,front running,"NO 
",2207,4,0.34334301948547363
76,front running,"NO 
",1124,4,0.2646963596343994
77,arithmetic,"YES
 
The `IntegerOverflowMappingSym1` contract uses the `sub` function from the `SafeMath` library. This function subtracts two numbers, but it does not handle potential overflows. If the value of `k` is large enough, and `v` is a large enough number, the subtraction could result in an overflow, leading to unexpected behavior and potential loss of funds. 
",625,83,3.3070216178894043
78,arithmetic,"YES
 
The contract uses the `SafeMath` library, which provides SafeMath functions for addition, subtraction, and other arithmetic operations.  However, the `sub` function in the `SafeMath` library is vulnerable to integer overflows. If the input `b` is large enough, the subtraction operation could overflow the `uint256` type, leading to unexpected behavior and potential loss of funds. 
",590,84,3.3465077877044678
79,arithmetic,"NO 
",582,4,0.22492599487304688
80,arithmetic,"YES
 
The contract uses the `sub` function from the `SafeMath` library, which performs subtraction.  However, the `SafeMath` library does not handle arithmetic overflows and underflows well. If the `count` variable is large enough, the subtraction could result in an overflow, leading to a potential loss of funds. 
",590,70,2.810131072998047
81,arithmetic,"NO 
",873,4,0.24377655982971191
82,arithmetic,"NO 
",978,4,0.2470870018005371
83,arithmetic,"YES
 
The `run` function in the `IntegerOverflowMultiTxMultiFuncFeasible` contract subtracts the input value from the `count` variable. This can lead to integer overflows if the input value is large enough. 
",696,51,2.070300817489624
84,arithmetic,"YES
 
The contract uses the `sub` function from the `SafeMath` library. This function performs a subtraction operation, which can lead to integer overflows if the input values are not carefully managed. 
",603,44,1.776146650314331
85,arithmetic,"YES
 
The contract uses the `sub` function from the `SafeMath` library, which performs subtraction.  However, the `sub` function is not designed to handle overflows. If the `count` variable is large enough, the subtraction could result in an overflow, leading to unexpected behavior and potential loss of funds. 
",678,69,2.7569191455841064
86,arithmetic,"YES

The code uses unsigned integers and does not handle arithmetic overflows and underflows well.  The vulnerability lies in the `overflowaddtostate`, `overflowmultostate`, `underflowtostate`, `overflowlocalonly`, `overflowmulocalonly`, and `underflowlocalonly` functions. 
",993,64,2.59594988822937
87,arithmetic,"NO 
",830,4,0.23910164833068848
88,arithmetic,"YES

The `IntegerOverflowAdd` contract is vulnerable to arithmetic overflows. The line `count += input;`  can cause overflows if the `input` value is too large. 
",590,40,1.6210005283355713
89,arithmetic,"YES
 
The `add` function in the `Overflow` contract is vulnerable to integer overflows.  The line `sellerBalance += value;`  can cause an overflow if the `value` is too large. 
",610,48,1.9383766651153564
90,arithmetic,"YES

The `transfer` function in the `BasicToken` contract uses the `add` function from the `SafeMath` library. This function adds two numbers together, and if the result is greater than or equal to the first number, it returns the result. However, if the result is less than the first number, it returns the first number. This can lead to an overflow if the second number is large enough. 
",672,88,3.487783908843994
91,bad randomness,"NO 
",982,4,0.24623632431030273
92,bad randomness,"YES
 
The code uses `block.number` to generate random numbers for the `chooseWinner` function. This is a major security vulnerability.  The `block.number` is predictable and can be manipulated by miners. 
",2837,50,2.1841514110565186
93,bad randomness,"YES
The code uses a function called `rand` that relies on the block hash to generate a random number. This is a known security vulnerability as it is predictable and can be manipulated by attackers. 
",3176,43,1.937852144241333
94,bad randomness,"NO 
",1140,4,0.2661268711090088
95,bad randomness,"YES
 
The contract uses `keccak256` to generate a random number, but it's vulnerable to predictable attacks. The `block.blockhash` and `block.number` values are predictable, and the `keccak256` function can be manipulated to produce the same result. 
",833,68,2.7286880016326904
96,bad randomness,"YES
 
The code uses a predictable random number generator.  The randomness is based on the block timestamp, which is not truly random. This makes the code vulnerable to attacks. 
",925,40,1.6566991806030273
97,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1405,45,1.877112865447998
98,reentrancy,"YES
 
The `withdrawFunds` function is vulnerable to reentrancy attacks.  The `require` statement `require(msg.sender.call.value(_weiToWithdraw)());` allows an attacker to call the `withdrawFunds` function repeatedly before the initial execution is complete. 
",945,63,2.537187337875366
99,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1479,47,1.964625597000122
100,reentrancy,"YES
 
The `withdraw` function is vulnerable to reentrancy attacks.  The `if` statement allows an attacker to call the `withdraw` function repeatedly, draining the contract's funds. 
",852,45,1.8382935523986816
101,reentrancy,"YES
 
The `withdraw` function allows an attacker to call `msg.sender.call.value(amount)` before the `credit[msg.sender]-=amount` operation is complete. This allows an attacker to drain the contract of funds. 
",795,55,2.211341381072998
102,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 
",1401,18,0.8268435001373291
103,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1635,47,1.971444845199585
104,reentrancy,"YES
 
The contract uses the `withdrawReward` function, which allows an attacker to call `getFirstWithdrawalBonus` again before the initial execution is complete. This is a classic reentrancy attack. 
",908,45,1.8415403366088867
105,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 
",1627,18,0.8446474075317383
106,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1577,45,1.892204761505127
107,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Uncontrolled Execution:** The `call.value(_am)` function allows the contract to execute arbitrary code on the `msg.sender` address. 
* **Reentrancy Vulnerability:**  This allows an attacker to repeatedly call the `Collect` function, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1405,141,5.604067087173462
108,reentrancy,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Unrestricted External Calls:** The `WithdrawToHolder` function allows external calls to the contract's `Withdraw` function.
* **Potential for Reentrancy:**  An attacker could call `WithdrawToHolder` multiple times, each time attempting to drain funds from the contract. 
* **No Safeguards:** The contract lacks any safeguards to prevent this type of attack. 


",1519,108,4.3340067863464355
109,reentrancy,"YES
 
The contract uses the `airDrop` function which is vulnerable to reentrancy attacks.  The `airDrop` function allows an attacker to call the `airDrop` function repeatedly, draining the contract of funds. 
",1120,51,2.0908002853393555
110,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `CashOut` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Uncontrolled Execution:** The `call.value(_am)` function allows the contract to execute arbitrary code on the `msg.sender` address. This means an attacker could potentially call the `CashOut` function multiple times within a short period, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1365,141,5.647989273071289
111,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 
",1569,18,0.8448638916015625
112,reentrancy,"YES
 
The `withdrawAll` function allows an attacker to call the contract's `withdrawAll` function repeatedly, draining the contract of funds. This is a classic reentrancy attack. 
",833,44,1.794865608215332
113,reentrancy,"NO 
",824,4,0.238661527633667
114,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `CashOut` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution:** The code doesn't specify how the `call.value(_am)` function is executed. This leaves room for an attacker to potentially execute malicious code within the contract. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1323,123,4.9133501052856445
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1319,47,1.946718454360962
116,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 
",1397,18,0.8253560066223145
117,reentrancy,"YES
 
The contract uses the `call.value` function, which allows external contracts to call functions within the contract. This can be exploited by a malicious actor to call the `transfer` function multiple times, draining the contract of funds. 
",877,53,2.15000319480896
118,reentrancy,"YES
 
The code uses `msg.sender.call.value(userBalance[msg.sender])()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",820,52,2.1142570972442627
119,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `CashOut` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Uncontrolled Execution:** The `call.value(_am)` function allows the contract to execute arbitrary code on the `msg.sender` address. 
* **Reentrancy Vulnerability:**  An attacker could call `CashOut` multiple times, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1427,143,5.719518184661865
120,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `CashOut` function.  The `if(msg.sender.call.value(_am)())` line allows an attacker to call the `CashOut` function repeatedly, draining the contract's funds. 
",1293,61,2.4907360076904297
121,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Uncontrolled Execution:** The `call.value(_am)` function allows the contract to execute arbitrary code on the `msg.sender` address. This means an attacker could potentially call the `Collect` function multiple times within a short period, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1473,138,5.4961793422698975
122,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `CashOut` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution:** The code doesn't specify how the `call.value(_am)` function is executed. This leaves room for an attacker to potentially execute malicious code within the contract. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1307,123,4.905657529830933
123,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 
",1401,18,0.8234598636627197
124,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `CashOut` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution:** The code doesn't specify how the `call.value(_am)` function is executed. This leaves room for an attacker to potentially execute malicious code within the contract. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1293,123,4.923248529434204
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1477,47,1.9549915790557861
126,reentrancy,"YES
 
The contract uses the `call.value` function, which allows for external contract calls. This can be exploited by a malicious actor to call the `withdrawBalance` function again before the initial execution is complete. This creates a reentrancy vulnerability. 
",764,57,2.295677661895752
127,time manipulation,"NO 
",666,4,0.2303459644317627
128,time manipulation,"YES
 
The contract relies heavily on `block.timestamp` for its functionality, making it susceptible to manipulation by miners. This is a classic vulnerability, as miners can adjust the reported timestamp to their advantage. 
",937,46,1.8800511360168457
129,time manipulation,"YES
 
The contract relies on `block.timestamp` for the `lastInvestmentTimestamp` which is a potential point of attack. Miners can manipulate the timestamp, leading to the contract being exploited. 
",1149,44,1.8248534202575684
130,time manipulation,"NO 
",785,4,0.23594236373901367
131,time manipulation,"YES
 
The contract relies on `block.timestamp` for the random number generation. This is vulnerable to manipulation by miners. 
",935,30,1.2651681900024414
132,short addresses,"NO 
",973,4,0.24683094024658203
133,denial of service,"YES
 
The contract has a vulnerability that allows for denial of service attacks.  Specifically, the `emptyCreditors` function can be exploited to reset the contract's state and potentially cause it to become unresponsive. 
",938,48,1.9679903984069824
134,denial of service,"YES
 
The contract's `insertNnumbers` function is vulnerable to Denial of Service attacks.  The code uses a loop that can potentially run indefinitely, leading to a denial of service. 
",1069,44,1.82035493850708
135,denial of service,"YES
 
The code has a potential denial of service vulnerability.  The lines `creditorAddresses = new address[](0);` and `creditorAmounts = new uint[](0);`  are setting the arrays to be empty. This can be exploited to cause the contract to crash. 
",2298,63,2.66020131111145
136,denial of service,"YES
 
The contract uses `send` which is a function that is not part of the standard ERC20 token standard. This can lead to denial of service attacks. 
",958,39,1.606217861175537
137,denial of service,"YES
 
The contract has a potential denial of service vulnerability. The `ifillArray` function pushes the sender's address into the `listAddresses` array repeatedly, potentially exhausting the contract's memory and causing it to crash. 
",797,52,2.098090887069702
138,denial of service,"NO 
",769,4,0.2361600399017334
