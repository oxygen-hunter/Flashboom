case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"NO 
",896,4,0.23607540130615234
12,access control,"NO 
",592,4,0.2188265323638916
13,access control,"YES
 
 The contract uses `msg.sender` to determine the owner of the contract. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",2834,43,1.9129211902618408
14,access control,"NO 
",767,4,0.22886419296264648
15,access control,"NO 
",606,4,0.22267699241638184
16,access control,"NO 
",706,4,0.22741460800170898
17,access control,"NO 
",554,4,0.21746087074279785
18,access control,"NO 
",797,4,0.22923040390014648
19,access control,"NO 
",592,4,0.21857857704162598
20,access control,"NO 
",788,4,0.23078227043151855
21,access control,"NO 
",549,4,0.21816444396972656
22,access control,"NO 
",817,4,0.2310504913330078
23,access control,"NO 
",492,4,0.21569252014160156
24,access control,"NO 
",600,4,0.2195112705230713
25,access control,"NO 
",571,4,0.21921634674072266
26,access control,"YES

The contract uses `fibonacciLibrary.delegatecall` to execute functions. This is a potential vulnerability because it allows an attacker to call functions on the `fibonacciLibrary` contract. 
",1076,41,1.6952588558197021
27,unchecked low level calls,"NO 
",1394,4,0.2803201675415039
28,unchecked low level calls,"YES
 
 The contract uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if the `call` function fails, the contract will continue to execute. This can lead to unexpected behavior and vulnerabilities. 
 
 The vulnerability lies in line 54:         owner2.send(sum2);
 
 The vulnerability lies in line 65:           owner.send(balance); 
 
 These lines call external functions without any error handling. If the external function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
 
 The contract does not have any error handling for the `call`, `callcode`, `delegatecall`, and `send` functions. 
 
 The contract does not have any error handling for the `call`, `callcode`, `delegatecall`, and `send` functions. 
 
 The contract does not have any error handling for the `call`, `callcode`, `delegatecall`, and `send` functions. 
 
 The contract does not have any error handling for the `call`, `callcode`, `delegatecall`, and `send` functions. 
 
 The contract does not have any error handling for the `call`, `callcode`, `delegatecall`, and `send` functions. 
 
 The contract",1589,301,11.734076976776123
29,unchecked low level calls,"YES

The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  A reentrancy attack occurs when a malicious contract calls a function within a contract that is still executing. 
* **Vulnerability:** The `allowance` function doesn't handle reentrancy. If an attacker can call the `allowance` function multiple times, they can potentially drain the contract's funds. 


Let me know if you'd like to explore more about reentrancy attacks. 
",1092,115,4.587564468383789
30,unchecked low level calls,"YES
 
 The code has several vulnerabilities:

* **Unchecked Return Values:** The `claimThrone` function doesn't check the return value of `msg.sender.send(valuePaid)`. This can lead to unexpected behavior and potential exploits.
* **Low Level Function Calls:** The `send` function is a low-level function that doesn't propagate errors. This can lead to unexpected behavior and potential exploits.
* **Unrestricted Access:** The `transferOwnership` function allows anyone to change the contract's owner. This can be exploited to gain control of the contract. 
* **Unclear Ownership:** The contract doesn't clearly define who owns the contract. This can lead to confusion and potential exploits. 
* **Lack of Error Handling:** The contract doesn't handle errors gracefully. This can lead to unexpected behavior and potential exploits. 
* **Potential Reentrancy:** The `claimThrone` function could be vulnerable to reentrancy attacks. 
* **Lack of Security Measures:** The contract lacks security measures such as a nonce or a timelock. 


",2484,231,9.219285011291504
31,unchecked low level calls,"YES

The `transfer` function calls `caddress.call` which is a low-level function.  This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",671,57,2.2767271995544434
32,unchecked low level calls,"YES
 
 The `cash` function is vulnerable because of the `winner.send(subpot)` line. This line calls the `send` function of the `winner` address, which is not a standard Solidity function. This can lead to unexpected behavior and potential vulnerabilities. 
",2616,60,2.532498836517334
33,unchecked low level calls,"NO 
",528,4,0.21764326095581055
34,unchecked low level calls,"NO 
",860,4,0.23465609550476074
35,unchecked low level calls,"NO 
",1564,4,0.30055904388427734
36,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds for the contract owner. 
",1463,67,2.719459056854248
37,unchecked low level calls,"NO 
",846,4,0.23282647132873535
38,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds for the contract owner. 
",1491,67,2.7397918701171875
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can lead to unexpected behavior.  The `call.value` function can be exploited to drain funds from the contract. 
",2411,52,2.2084028720855713
40,unchecked low level calls,"YES
 
 The `execute` function calls the target contract with `_value` and `_data` without any checks. This can lead to reentrancy attacks, where an attacker can call the function repeatedly to drain the contract's funds. 
",1924,55,2.301584482192993
41,unchecked low level calls,"YES
 
The `execute` function allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors. This means that if the `_dst` contract is malicious, it can execute arbitrary code and potentially drain funds. 
",1264,76,3.0572307109832764
42,unchecked low level calls,"NO 
",1534,4,0.2976565361022949
43,unchecked low level calls,"YES
 
 The `allowance` function allows for the transfer of tokens from one address to another.  This is a potential vulnerability because it allows for the transfer of funds without the owner's explicit consent. 
",650,46,1.8678791522979736
44,unchecked low level calls,"NO 
",1092,4,0.25591063499450684
45,unchecked low level calls,"YES
 
The `execute` function calls the target contract with `_dst.call.value(_value)(_data)`. This is a low-level call that does not propagate errors.  The `_dst` contract can execute arbitrary code, and the `value` parameter can be manipulated. This can lead to a reentrancy attack or other vulnerabilities. 
",1892,79,3.2109296321868896
46,unchecked low level calls,"NO 
",565,4,0.2185986042022705
47,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds for the contract owner. 
",1407,64,2.592169761657715
48,unchecked low level calls,"YES

The `transfer` function calls `caddress.call` which is a low-level function.  This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",675,57,2.2975776195526123
49,unchecked low level calls,"YES
 
The `redeem` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `redeem` function allows for the possibility of an attacker calling it repeatedly, potentially draining the contract's funds. 
* **Lack of Safeguards:** The `redeem` function doesn't include any checks to prevent a malicious actor from repeatedly calling it. 
* **Potential for Exploitation:**  An attacker could exploit this vulnerability to drain the contract's funds. 


",1570,114,4.554354667663574
50,unchecked low level calls,"YES
 
The `redeem` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `redeem` function allows for the possibility of a malicious contract calling itself repeatedly, draining funds. 
* **Lack of Safeguards:** The code doesn't include any checks to prevent a malicious contract from calling `redeem` multiple times. 
* **Potential for Exploitation:**  A malicious contract could exploit this vulnerability to repeatedly call `redeem` and drain funds from the contract. 


",1570,117,4.675496816635132
51,unchecked low level calls,"NO 
",744,4,0.22961759567260742
52,unchecked low level calls,"NO 
",1007,4,0.2501499652862549
53,unchecked low level calls,"NO 
",654,4,0.22513628005981445
54,unchecked low level calls,"YES

The `transfer` function calls `caddress.call(id,from,_tos[i],v)` which is a low-level call. This means that the function will not propagate errors and will continue to run even if the call fails. This can lead to unexpected behavior and potential vulnerabilities. 
",673,65,2.587087869644165
55,unchecked low level calls,"NO 
",1530,4,0.2980692386627197
56,unchecked low level calls,"YES

The `makeOldFucks` function calls `fuck.call(bytes4(sha3(""giveBlockReward()"")));` which is a low-level call. This function does not propagate errors, meaning it will continue to execute even if it fails. This can lead to unexpected behavior and potential vulnerabilities. 
",671,67,2.676313877105713
57,unchecked low level calls,"YES
 
The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  An attacker could call `withdraw` multiple times in a short period, potentially draining the contract's funds.
* **Unchecked Return Values:** The `allowance` function doesn't check for the validity of the returned value. 
* **Potential for Manipulation:** The `allowance` function could be manipulated to allow an attacker to spend funds they don't have. 


",938,109,4.327198505401611
58,unchecked low level calls,"YES

The `transfer` function calls `caddress.call(id,from,_tos[i],v)` which is a low-level call. This can lead to unexpected behavior and potential vulnerabilities. 
",675,45,1.8290326595306396
59,unchecked low level calls,"YES
 
The `GetFreebie` function is vulnerable to reentrancy attacks.  Here's why:

* **Unclear Logic:** The function doesn't explicitly check for reentrancy.
* **Potential for Reentrancy:**  The `msg.value > 1 ether` check could be exploited by an attacker to call the function repeatedly. 
* **Reentrancy Vulnerability:**  The attacker could call the `GetFreebie` function multiple times, draining the contract's funds. 


",1534,111,4.4457244873046875
60,unchecked low level calls,"YES

The `callAddress` function calls the target address directly using the `a.call()` method. This is a low-level function that doesn't propagate errors and can lead to unexpected behavior.  The `allowance` function, while not directly vulnerable, could be exploited if the `callAddress` function is used to call a malicious contract. 
",474,75,2.968465805053711
61,unchecked low level calls,"YES
 
The contract uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the contract will continue to execute. This can lead to unexpected outcomes and vulnerabilities. 
",2301,57,2.383115530014038
62,unchecked low level calls,"YES

The `getTokens` function calls `addr.call.value(0 wei)();` which is a low-level function that doesn't propagate errors. This can lead to unexpected behavior and potential vulnerabilities. 
",781,47,1.9131076335906982
63,unchecked low level calls,"NO 
",782,4,0.2301640510559082
64,unchecked low level calls,"YES

The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  An attacker could call `withdraw` multiple times, potentially draining funds from the contract.
* **Unchecked Return Values:** The `allowance` function doesn't check for the validity of the returned value. 
* **Potential for Manipulation:** The `allowance` function could be manipulated to allow an attacker to spend funds they don't have. 


",936,102,4.044137477874756
65,unchecked low level calls,"YES

The `transfer` function calls `caddress.call` which is a low-level function that does not propagate errors. This means that if the `caddress.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",716,59,2.3711140155792236
66,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds for the contract owner. 
",1491,67,2.7431726455688477
67,unchecked low level calls,"NO 
",1478,4,0.2849245071411133
68,unchecked low level calls,"NO 
",615,4,0.22133374214172363
69,unchecked low level calls,"NO 
",784,4,0.22939085960388184
70,unchecked low level calls,"YES

The `transfer` function calls `caddress.call` which is a low-level function.  This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",679,57,2.2937400341033936
71,unchecked low level calls,"YES
 
The `sendMoney` function uses `_target.call.value(_value)();`. This is a low-level call that doesn't propagate errors.  It's possible for the `_target` to fail, and the contract will continue to execute, potentially leading to unexpected outcomes. 
",727,67,2.690535545349121
72,unchecked low level calls,"YES

The `allowance` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  An attacker could call `allowance` multiple times to drain funds.
* **Unchecked Return Values:** The `allowance` function doesn't check for the validity of the returned value. 
* **Potential for Manipulation:** The `allowance` function could be manipulated to allow an attacker to spend funds they don't have. 


",936,98,3.8884170055389404
73,front running,"NO 
",726,4,0.2262716293334961
74,front running,"NO 
",668,4,0.22362923622131348
75,front running,"NO 
",2064,4,0.3250000476837158
76,front running,"YES
 
The contract uses a mapping to track the allowance of tokens for specific addresses. This mapping is public, meaning anyone can access it.  This could be exploited by an attacker to gain unauthorized access to funds. 
",981,48,1.9446594715118408
77,arithmetic,"YES

The `init` function uses a `uint256` to represent a value, and then subtracts it from the `map` using `map[k] -= v`. This can lead to integer overflows and underflows, especially if the `v` value is large. 
",482,62,2.465968132019043
78,arithmetic,"YES

The `run` function multiplies the `count` variable by the input, which could lead to integer overflows. 
",447,28,1.136368989944458
79,arithmetic,"NO 
",439,4,0.20382308959960938
80,arithmetic,"YES

The `run` function subtracts `input` from `count`.  This could lead to an integer overflow if `input` is large enough. 
",447,35,1.4156620502471924
81,arithmetic,"NO 
",730,4,0.22606205940246582
82,arithmetic,"NO 
",835,4,0.23234009742736816
83,arithmetic,"YES

The `run` function subtracts `input` from `count`.  This could lead to integer overflows if `input` is large enough. 
",553,34,1.3797943592071533
84,arithmetic,"YES

The `run` function performs a subtraction operation (`count - input`) which could lead to an integer overflow if the input value is large enough. 
",460,34,1.3660144805908203
85,arithmetic,"YES

The `run` function subtracts `input` from `count`.  This could lead to integer overflows if `input` is large enough. 
",535,34,1.384580373764038
86,arithmetic,"YES

The code uses unsigned integers and has functions that perform arithmetic operations.  These operations can lead to overflows and underflows, which can be exploited by attackers. 
",850,36,1.4745771884918213
87,arithmetic,"NO 
",687,4,0.22489571571350098
88,arithmetic,"YES

The `run` function in the contract uses `count += input;` which is susceptible to integer overflows.  This is because the `count` variable is an unsigned integer, and the `input` variable could be a large number. If the `input` is large enough, it could overflow the `count` variable, leading to unexpected and potentially malicious behavior. 
",447,79,3.100735664367676
89,arithmetic,"YES

The `add` function in the `Overflow` contract is vulnerable to integer overflows.  The line `sellerBalance += value;`  can cause an overflow if the `value` is too large. 
",467,46,1.8515961170196533
90,arithmetic,"YES

The `transfer` function in the contract has a potential for integer overflow.  The line `balanceOf[_to] += _value;`  could cause an overflow if the value of `_value` is too large. 
",529,50,1.995983362197876
91,bad randomness,"NO 
",839,4,0.23322105407714844
92,bad randomness,"YES
 
 The code uses `block.number` to generate random numbers for the raffle. This is a major security vulnerability because it's deterministic and predictable.  Malicious actors can easily manipulate the `block.number` to influence the outcome of the raffle. 
",2694,58,2.4721152782440186
93,bad randomness,"YES
The code uses a function `rand` that relies on block hash and a constant `FACTOR` to generate a seemingly random number. However, this is not truly random, as it's predictable and can be manipulated by miners. 
",3033,51,2.2181570529937744
94,bad randomness,"NO 
",997,4,0.25045156478881836
95,bad randomness,"NO 
",690,4,0.22479939460754395
96,bad randomness,"NO 
",782,4,0.23123645782470703
97,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1262,121,4.836468458175659
98,reentrancy,"NO 
",802,4,0.23120594024658203
99,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1336,47,1.9221360683441162
100,reentrancy,"YES

The `withdraw` function allows for external calls to be made to the contract before the initial execution is complete. This is a classic reentrancy vulnerability. 
",709,36,1.4664535522460938
101,reentrancy,"NO 
",652,4,0.22280550003051758
102,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the `Collect` function repeatedly, draining the contract of funds. This is a classic reentrancy vulnerability. 
",1258,58,2.366731643676758
103,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The line `if(msg.sender.call.value(_am)())` allows an attacker to call the contract again before the initial execution is complete. 
",1492,49,2.0280070304870605
104,reentrancy,"YES

The contract uses a mapping called `allowed` which allows for the setting of an allowance for a specific spender. This mapping is used to determine the amount of tokens that an owner allows a spender to access.  This mapping is vulnerable to reentrancy attacks. 
",765,57,2.299532651901245
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function multiple times in rapid succession, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1484,132,5.213880300521851
106,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The line `if(msg.sender.call.value(_am)())` allows an attacker to call the contract again before the initial call is complete. 
",1434,49,2.00823974609375
107,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1262,121,4.815248489379883
108,reentrancy,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `WithdrawToHolder` function allows external calls to the `_addr` contract.
* **Potential for Reentrancy:**  An attacker could call `WithdrawToHolder` multiple times within a short period, potentially draining funds from the contract. 
* **Lack of Safeguards:** The function doesn't include any checks to prevent repeated calls or ensure the funds are properly handled. 


",1376,116,4.63073468208313
109,reentrancy,"YES

The contract uses the `supportsToken` function to check if the caller has the `Nu Token` contract. This function is vulnerable to reentrancy attacks. 
",977,37,1.5220794677734375
110,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The `CashOut` function allows an attacker to call the `CashOut` function repeatedly before the initial execution is complete. This can lead to a reentrancy attack. 
",1222,52,2.1301071643829346
111,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a reentrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1426,115,4.566892147064209
112,reentrancy,"YES
 
The `withdrawAll` function allows an attacker to call the `call.value(oCredit)` function before the initial execution is complete. This allows an attacker to drain the contract of funds. 
",690,46,1.861769199371338
113,reentrancy,"NO 
",681,4,0.22571086883544922
114,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The `CashOut` function allows for external calls to be made to the contract before the initial execution is complete. This can be exploited by an attacker to drain the contract of funds. 
",1180,54,2.1908655166625977
115,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The `CashOut` function allows for external calls to be made to the contract before the initial execution is complete. This can be exploited by an attacker to drain the contract of funds. 
",1176,54,2.2025415897369385
116,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1254,121,4.849426984786987
117,reentrancy,"YES

The contract uses a function `transfer` that allows the caller to transfer funds to another address. This function is vulnerable to reentrancy attacks because it allows the caller to call the `transfer` function again before the initial transfer is complete. 
",734,53,2.147904396057129
118,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The `withdrawBalance` function allows an attacker to call `addToBalance` repeatedly, draining the contract of funds. 
",677,40,1.6224467754364014
119,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `CashOut` function.  Here's why:

* **External Contract Calls:** The `CashOut` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution Flow:** The code doesn't clearly define how the `call.value(_am)` function interacts with the contract's state. 
* **Potential for Reentrancy:**  An attacker could call `CashOut` repeatedly, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1284,146,5.791759967803955
120,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1150,47,1.9137818813323975
121,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1330,119,4.711247444152832
122,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1164,47,1.9238011837005615
123,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1258,121,4.790271997451782
124,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1150,47,1.9266281127929688
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1334,47,1.9376845359802246
126,reentrancy,"YES

The contract uses the `call.value` function, which allows the contract to be called again before the initial execution is complete. This creates a reentrancy vulnerability. 
",621,39,1.583390474319458
127,time manipulation,"NO 
",523,4,0.2155742645263672
128,time manipulation,"YES
 
The contract uses `block.timestamp` for random number generation, which is susceptible to manipulation by miners. This can lead to unfair outcomes and security vulnerabilities. 
",794,38,1.5510132312774658
129,time manipulation,"YES
 
The contract relies on `block.timestamp` for the `lastInvestmentTimestamp` which is a potential point of manipulation by miners. 
",1006,33,1.3687152862548828
130,time manipulation,"NO 
",642,4,0.22226333618164062
131,time manipulation,"YES
 
The contract uses `block.timestamp` to generate a random number, which is a common vulnerability.  The `block.timestamp` value can be manipulated by miners, potentially leading to an unfair outcome. 
",792,48,1.9320027828216553
132,short addresses,"YES
 
The contract uses a mapping called `allowed` to track the allowance of an owner for a spender. This mapping is used to control the amount of tokens that a spender can access.  However, the contract does not implement any checks to ensure that the `allowed` mapping is properly updated when the allowance is changed. This can lead to a reentrancy attack, where an attacker can exploit the contract's logic to drain the contract of funds. 
",830,97,3.826505184173584
133,denial of service,"YES
 
The contract's `addCreditors` function adds a large number of addresses to the `creditorAddresses` array. This can be exploited to create a denial of service attack by flooding the contract with unnecessary calls. 
",795,51,2.0715603828430176
134,denial of service,"NO 
",926,4,0.23821449279785156
135,denial of service,"YES
 
The code has a potential denial of service vulnerability.  The line `creditorAddresses = new address[](0);` and `creditorAmounts = new uint[](0);`  are vulnerable to denial of service attacks. 
",2155,52,2.194446563720703
136,denial of service,"YES

The contract's `refundAll` function is vulnerable to denial of service attacks.  The `require` statement in line 24 is the primary vulnerability.  It relies on the `send` function of the `refundAddresses` contract to transfer funds. If the `send` function fails, the entire transaction will be blocked, leading to a denial of service. 
",815,80,3.1838011741638184
137,denial of service,"YES

The contract's `ifillArray` function pushes the sender's address into the `listAddresses` array repeatedly, potentially leading to a denial of service attack. This is because the function can be called repeatedly, and the `listAddresses` array can be filled with a large number of addresses, causing the contract to become unresponsive. 
",654,73,2.8951070308685303
138,denial of service,"YES
 
The code uses `currentFrontrunner.send(currentBid)` which is vulnerable to Denial of Service attacks.  This line allows the contract to be taken offline by a malicious actor. 
",626,45,1.808274269104004
