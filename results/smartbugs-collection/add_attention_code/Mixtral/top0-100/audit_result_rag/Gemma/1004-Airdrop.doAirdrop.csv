case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"YES
 
The `newOwner` function allows anyone to change the owner of the contract. This is a classic access control vulnerability. 
",885,31,1.2963838577270508
12,access control,"NO 
",581,4,0.22493600845336914
13,access control,"YES
The contract uses `msg.sender` to determine the owner. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",2823,38,1.7210745811462402
14,access control,"NO 
",756,4,0.2401578426361084
15,access control,"YES
 
The `Airdrop` contract uses the `transferFrom` function of the ERC20 token. This function is vulnerable to reentrancy attacks. 
",595,38,1.5563154220581055
16,access control,"YES
 
The `Airdrop` contract uses `transferFrom` from the ERC20 token contract. This is a potential vulnerability because the `transferFrom` function is not inherently secure.  It can be exploited by an attacker to drain funds from the contract. 
",695,59,2.3858630657196045
17,access control,"YES
 
The `doAirdrop` function in the `Airdrop` contract uses `transferFrom` from the ERC20 token contract. This is a potential vulnerability because the `transferFrom` function is not a standard ERC20 function.  It is possible for an attacker to manipulate the `transferFrom` function to drain funds from the contract. 
",543,79,3.153233289718628
18,access control,"NO 
",786,4,0.23405861854553223
19,access control,"NO 
",581,4,0.2283775806427002
20,access control,"YES
 
The `Airdrop` contract uses `transferFrom` from the ERC20 contract, which is a potential vulnerability.  The `transferFrom` function is not inherently secure, and it can be exploited by attackers to drain funds from the contract. 
",777,58,2.3396315574645996
21,access control,"NO 
",538,4,0.22238445281982422
22,access control,"YES
 
The `doAirdrop` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `doAirdrop` function calls `ERC20(_tokenAddr).transferFrom` multiple times within a loop. This creates a window for an attacker to call the function again before the previous transfer is complete. 
* **Potential for Loss:**  An attacker could exploit this reentrancy to repeatedly call the function, draining funds from the contract. 


",806,119,4.720336198806763
23,access control,"YES
 
The `Airdrop` contract uses the `transferFrom` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",481,39,1.5782098770141602
24,access control,"YES
 
The `Airdrop` contract uses the `transferFrom` function of the ERC20 token. This function is vulnerable to reentrancy attacks. 
",589,38,1.5530667304992676
25,access control,"NO 
",560,4,0.2213895320892334
26,access control,"YES
 
The contract uses `fibonacciLibrary.delegatecall` to execute external functions. This is a common vulnerability, as it can be exploited to gain unauthorized access to the contract's internal state and logic. 
",1065,48,1.974668025970459
27,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `doAirdrop` function calls `ERC20(_tokenAddr).transferFrom` for each destination address.  This means that an attacker could potentially call the function multiple times in rapid succession, each time attempting to transfer funds from the contract. 
* **Unprotected Transfers:** The `transferFrom` function in the ERC20 contract is not designed to handle reentrancy. 
* **Potential for Loss:**  If an attacker can repeatedly call `doAirdrop`, they could drain the contract of funds. 


",1383,155,6.148989915847778
28,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract calls the `transferFrom` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",1578,48,2.008157730102539
29,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token. This function is vulnerable to reentrancy attacks. 
",1081,47,1.9415452480316162
30,unchecked low level calls,"YES
 
The code has several vulnerabilities:

* **Unchecked Return Values:** The `claimThrone` function returns a boolean value, but it doesn't check the return value. This can lead to unexpected behavior.
* **Low Level Function Calls:** The `msg.sender.send` function is vulnerable to reentrancy attacks. 
* **Unprotected Access Control:** The `transferOwnership` function is vulnerable to reentrancy attacks. 
* **Unprotected `send` Function:** The `send` function is vulnerable to reentrancy attacks. 
* **Unprotected `doAirdrop` Function:** The `doAirdrop` function is vulnerable to reentrancy attacks. 



",2473,151,6.067729234695435
31,unchecked low level calls,"YES

The `doAirdrop` function calls `transferFrom` on the ERC20 token contract. This function is vulnerable to reentrancy attacks because it doesn't check for the return value of `transferFrom`. If an attacker can call `doAirdrop` multiple times, they can drain the contract of funds. 
",660,72,2.8850011825561523
32,unchecked low level calls,"YES
 
The `cash` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `cash` function calls `winner.send(subpot)` which is a function call.  This function call can be re-entered by an attacker.
* **Potential for Exploiting:**  An attacker could repeatedly call `cash` with different subpots, potentially draining funds from the contract. 


",2605,96,3.963367223739624
33,unchecked low level calls,"NO 
",517,4,0.2271111011505127
34,unchecked low level calls,"YES

The `doAirdrop` function calls `transferFrom` on the ERC20 token contract.  The `transferFrom` function is not a standard Solidity function, and it is not clear how it is supposed to work.  This could lead to vulnerabilities. 
",849,59,2.3770883083343506
35,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract calls the `transferFrom` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `doAirdrop` function doesn't explicitly check for reentrancy. 
* **Potential for Reentrancy:**  An attacker could call `doAirdrop` multiple times in rapid succession, potentially leading to a reentrancy attack. 
* **Unprotected Transfer:** The `transferFrom` function is vulnerable to reentrancy attacks. 


",1553,138,5.507348537445068
36,unchecked low level calls,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Withdraw:** The `WithdrawToHolder` function doesn't check for reentrancy.  
* **Potential for Reentrancy:** An attacker could call `WithdrawToHolder` multiple times in rapid succession, potentially draining funds from the contract. 
* **Lack of Safeguards:** The function doesn't include any safeguards to prevent this type of attack. 


",1452,107,4.2964026927948
37,unchecked low level calls,"YES

The `doAirdrop` function in the `Airdrop` contract calls the `transferFrom` function of the ERC20 token. This function is vulnerable to reentrancy attacks. 
",835,45,1.832533836364746
38,unchecked low level calls,"YES
The `WithdrawToHolder` function is vulnerable to reentrancy attacks. 
",1480,20,0.9435334205627441
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can lead to unexpected behavior.  The `call.value` function can be exploited to drain funds from the contract. 
",2400,52,2.226804494857788
40,unchecked low level calls,"YES
 
The `execute` function in the `Marriage` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors.  This means an attacker could potentially execute malicious code, leading to a variety of attacks. 
",1913,77,3.1508359909057617
41,unchecked low level calls,"YES
 
The `execute` function in the `Owned` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is particularly concerning. It allows the contract to call any function on the target address, potentially leading to malicious code execution. 
",1253,70,2.8418545722961426
42,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `doAirdrop` function calls `ERC20(_tokenAddr).transferFrom` for each destination address.  This means that an attacker could potentially call the function multiple times in rapid succession, each time attempting to transfer funds from the contract. 
* **Unprotected Transfers:** The `transferFrom` function in the ERC20 contract is not designed to handle reentrancy. 
* **Potential for Loss:** If an attacker can execute multiple calls to `doAirdrop` in a short time, they could drain the contract of funds. 


",1523,161,6.389082193374634
43,unchecked low level calls,"YES
 
The `Airdrop` contract uses `transferFrom` from ERC20, which is a function that can be exploited.  The `Airdrop` contract does not check the input values, so an attacker could send a large amount of tokens to the contract. 
",639,62,2.492917060852051
44,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token. This function is vulnerable to reentrancy attacks. 
",1081,47,1.9316930770874023
45,unchecked low level calls,"YES
 
The `execute` function in the `TokenSender` contract calls the target contract (`_dst`) with the provided value and data.  However, the `_dst.call.value(_value)(_data)` call is a low-level function that does not propagate errors. This means that if the call fails, the contract will continue to execute the next line of code, potentially leading to unexpected behavior and vulnerabilities. 
",1881,92,3.742833137512207
46,unchecked low level calls,"NO 
",554,4,0.2238476276397705
47,unchecked low level calls,"YES
 
The `WithdrawToken` function in the `TokenBank` contract calls the `token.call` function. This function is vulnerable because it does not handle errors. If the `token.call` function fails, the contract will not revert and the funds will be lost. 
",1396,62,2.533430337905884
48,unchecked low level calls,"YES

The `doAirdrop` function in the `Airdrop` contract calls the `transferFrom` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks because it allows an attacker to call the `transferFrom` function multiple times, potentially draining the contract of funds. 
",664,68,2.7260959148406982
49,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `doAirdrop` function calls `ERC20(_tokenAddr).transferFrom` for each destination address.  This means that an attacker could potentially call the function multiple times in rapid succession, each time attempting to transfer funds. 
* **Unprotected Transfers:** The `transferFrom` function in the ERC20 contract is not designed to handle reentrancy. 
* **Potential for Loss:** If an attacker can execute multiple calls to `doAirdrop` in a short time, they could drain the contract's funds. 


",1559,159,6.308877229690552
50,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `doAirdrop` function calls `ERC20(_tokenAddr).transferFrom` for each destination address.  This means that an attacker could potentially call the function multiple times in rapid succession, each time attempting to transfer funds from the contract. 
* **Unprotected Transfers:** The `transferFrom` function in the ERC20 contract is not designed to handle reentrancy. 
* **Potential for Loss:** If an attacker can repeatedly call `doAirdrop`, they could drain the contract of funds. 


",1559,154,6.1212475299835205
51,unchecked low level calls,"YES
 
The `sendMoney` function uses `_target.call.value(_value)(_data)` which is a low-level call.  This function does not propagate errors, meaning it will continue to execute even if it fails. This can lead to unexpected behavior and potential vulnerabilities. 
",733,64,2.5662825107574463
52,unchecked low level calls,"YES

The `doAirdrop` function in the `Airdrop` contract calls the `transferFrom` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks because it does not check for the return value of the `transferFrom` function. If an attacker can call the `doAirdrop` function multiple times, they can drain the contract of funds. 
",996,86,3.44604754447937
53,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract calls the `transferFrom` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",643,48,1.9487090110778809
54,unchecked low level calls,"YES

The `doAirdrop` function calls `transferFrom` on the ERC20 token contract. This function is vulnerable to reentrancy attacks because it doesn't check for the return value of `transferFrom`. If an attacker can call `doAirdrop` multiple times, they can drain the contract of funds. 
",662,72,2.8782753944396973
55,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `doAirdrop` function calls `ERC20(_tokenAddr).transferFrom` for each destination address.  This means that an attacker could potentially call the function multiple times in rapid succession, each time attempting to transfer funds from the contract. 
* **Unprotected Transfers:** The `transferFrom` function in the ERC20 contract is not designed to handle reentrancy attacks. 
* **Potential for Loss:** If an attacker can repeatedly call `doAirdrop`, they could drain the contract of funds. 


",1519,155,6.171613454818726
56,unchecked low level calls,"YES

The `doAirdrop` function in the `Airdrop` contract calls the `transferFrom` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `doAirdrop` function doesn't explicitly check for reentrancy. 
* **Potential for Reentrancy:**  An attacker could call `doAirdrop` multiple times, potentially leading to a reentrancy attack. 
* **Uncontrolled Execution:** The `transferFrom` function is susceptible to reentrancy because it doesn't have any checks to prevent it. 
",660,143,5.624172210693359
57,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token. This function is vulnerable to reentrancy attacks. 
",927,47,1.9144480228424072
58,unchecked low level calls,"YES

The `doAirdrop` function calls `transferFrom` on the ERC20 token contract.  This is a potential vulnerability because the `transferFrom` function is not explicitly audited.  The `transferFrom` function is a low-level function that does not propagate errors.  This means that if the `transferFrom` function fails, the contract will continue to execute, potentially leading to unexpected behavior. 
",664,89,3.5231175422668457
59,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `doAirdrop` function calls `ERC20.transferFrom` which is a function that can be called multiple times.  
* **Potential for Exploiting:**  An attacker could call `doAirdrop` multiple times, each time before the previous one has finished, potentially draining funds. 


",1523,109,4.383644104003906
60,unchecked low level calls,"YES
 
The `doAirdrop` function calls `transferFrom` on the ERC20 contract.  This function is vulnerable to reentrancy attacks.  The `transferFrom` function is not reentrancy proof. 
",463,52,2.0818777084350586
61,unchecked low level calls,"YES
 
The `callFirstTarget` and `callSecondTarget` functions call external contracts (`firstTarget` and `secondTarget`) with the `value` parameter.  This can lead to reentrancy attacks, where an attacker can repeatedly call the function to drain funds. 
",2290,61,2.5692741870880127
62,unchecked low level calls,"YES

The `addr.call.value(0 wei)();` line is vulnerable to reentrancy attacks.  It allows an attacker to repeatedly call the function and drain the contract of funds. 
",770,43,1.759033203125
63,unchecked low level calls,"YES

The `doAirdrop` function in the `Airdrop` contract calls the `transferFrom` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `doAirdrop` function doesn't explicitly check for reentrancy. 
* **Potential for Reentrancy:**  An attacker could call `doAirdrop` multiple times, potentially draining the contract's funds. 
* **Lack of Safeguards:** The `transferFrom` function is susceptible to reentrancy attacks. 


",771,133,5.23132586479187
64,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token. This function is vulnerable to reentrancy attacks. 
",925,47,1.92594313621521
65,unchecked low level calls,"YES

The `doAirdrop` function calls `transferFrom` on the ERC20 token contract. This function is vulnerable to reentrancy attacks because it doesn't check the return value of `transferFrom`. If an attacker can call `doAirdrop` multiple times, they can drain the contract of funds. 
",705,71,2.852106809616089
66,unchecked low level calls,"YES
The `WithdrawToHolder` function is vulnerable to reentrancy attacks. 
",1480,20,0.9115469455718994
67,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `doAirdrop` function calls `ERC20(_tokenAddr).transferFrom` for each destination address.  This means that an attacker could potentially call the function multiple times in rapid succession, each time attempting to transfer funds from the contract. 
* **Unprotected Transfers:** The `transferFrom` function in the ERC20 contract is not designed to handle reentrancy. 
* **Potential for Loss:**  If an attacker can repeatedly call `doAirdrop`, they could drain the contract of funds. 


",1467,155,6.162091493606567
68,unchecked low level calls,"YES
 
The `doAirdrop` function in the `Airdrop` contract calls the `transferFrom` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",604,48,1.9298710823059082
69,unchecked low level calls,"YES

The `doAirdrop` function in the `Airdrop` contract uses `transferFrom` from the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",773,44,1.7973206043243408
70,unchecked low level calls,"YES

The `doAirdrop` function calls `transferFrom` on the ERC20 token contract. This function is vulnerable to reentrancy attacks because it doesn't check for the return value of `transferFrom`. If an attacker can call `doAirdrop` multiple times, they can drain the contract of funds. 
",668,72,2.887273073196411
71,unchecked low level calls,"YES
 
The `sendMoney` function uses `_target.call.value(_value)`. This is a low-level call that doesn't propagate errors.  It's possible for the call to fail, and the contract will continue to execute. This can lead to unexpected outcomes and potential vulnerabilities. 
",716,68,2.712620973587036
72,unchecked low level calls,"YES
 
The `doAirdrop` function uses `transferFrom` which is vulnerable to reentrancy attacks.  
",925,29,1.2228937149047852
73,front running,"YES
 
The `Airdrop` contract allows for the transfer of tokens from the `msg.sender` to multiple addresses (`dests`) with a specified value. This can be exploited by a malicious actor to front-run transactions and steal the tokens before they are actually transferred. 
",715,62,2.4811062812805176
74,front running,"NO 
",657,4,0.22701072692871094
75,front running,"YES
 
The contract's `transferFrom` function allows for the transfer of tokens from one address to another, but it does not include any checks to ensure that the sender has sufficient balance. This means that a malicious user could potentially drain the sender's account of all of its tokens. 
",2053,64,2.675203323364258
76,front running,"NO 
",970,4,0.25182676315307617
77,arithmetic,"YES

The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token contract.  This function can be vulnerable to integer overflows and underflows, especially if the `values` array is not properly validated. 
",471,61,2.4202423095703125
78,arithmetic,"YES

The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token contract.  This function can be vulnerable to integer overflows and underflows if the `values` array is not properly checked. 
",436,59,2.351165533065796
79,arithmetic,"YES

The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token contract.  This function can be vulnerable to integer overflows and underflows if the `values` array is not properly checked. 
",428,59,2.34639048576355
80,arithmetic,"YES

The `doAirdrop` function in the `Airdrop` contract transfers tokens from the `msg.sender` to multiple addresses (`dests`) using the ERC20 token contract.  This function could be vulnerable to integer overflows and underflows if the `values` array is not carefully managed. 
",436,68,2.6902167797088623
81,arithmetic,"NO 
",719,4,0.23685026168823242
82,arithmetic,"NO 
",824,4,0.23599815368652344
83,arithmetic,"YES

The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token contract.  This function can be vulnerable to integer overflows if the `values` array is not properly checked. 
",542,56,2.257282018661499
84,arithmetic,"YES

The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token contract.  This function can be vulnerable to integer overflows and underflows if the `values` array is not properly checked. 
",449,59,2.337916135787964
85,arithmetic,"YES

The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token contract.  This function can be vulnerable to integer overflows if the `values` array is not properly checked. 
",524,56,2.2350997924804688
86,arithmetic,"YES

The contract uses `transferFrom` from ERC20, which is vulnerable to integer overflows and underflows. 
",839,27,1.1306898593902588
87,arithmetic,"YES

The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",676,46,1.8653357028961182
88,arithmetic,"YES

The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token contract.  This function can be vulnerable to integer overflows and underflows if the `values` array is not carefully checked. 
",436,59,2.3452045917510986
89,arithmetic,"YES
 
The `Airdrop` contract uses the `transferFrom` function of the ERC20 token. This function is vulnerable to reentrancy attacks. 
",456,38,1.5308904647827148
90,arithmetic,"YES

The `doAirdrop` function in the `Airdrop` contract uses the `transferFrom` function of the ERC20 token contract.  This function can be vulnerable to integer overflows and underflows if the values passed to the `transferFrom` function are not properly checked. 
",518,64,2.5513854026794434
91,bad randomness,"NO 
",828,4,0.2375936508178711
92,bad randomness,"YES
 
The code uses `block.number` to generate random numbers for the `chooseWinner` function. This is a major security vulnerability.  The `block.number` is predictable and can be manipulated by miners. This means that the random numbers generated by the contract are not truly random, and can be exploited by attackers. 
",2683,72,3.0286669731140137
93,bad randomness,"YES
The code uses a function `rand` that relies on the block hash and a constant factor. This makes it susceptible to attacks where the attacker can manipulate the block hash to influence the random number. 
",3022,44,1.9588253498077393
94,bad randomness,"NO 
",986,4,0.25216031074523926
95,bad randomness,"YES
 
The contract uses the `keccak256` function to generate a random number, but it's vulnerable to reentrancy attacks. 
",679,36,1.4787547588348389
96,bad randomness,"YES
 
The contract uses the `random` function from the `RandomNumberGenerator` contract. This function relies on the `block.timestamp` and other block-related data, which can be manipulated by miners. This makes the randomness predictable and susceptible to attacks. 
",771,58,2.344837188720703
97,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution Flow:** The code doesn't clearly define how the `Collect` function interacts with the external contract. 
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times, potentially draining the contract's funds. 


",1251,115,4.590496063232422
98,reentrancy,"YES
 
The `withdrawFunds` function is vulnerable to reentrancy attacks.  The `require` statement `require(msg.sender.call.value(_weiToWithdraw)());` allows an attacker to call the `withdrawFunds` function repeatedly before the initial execution is complete. 
",791,63,2.5306248664855957
99,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution Flow:** The code doesn't clearly define how the `Collect` function interacts with the external contract. 
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1325,140,5.569096803665161
100,reentrancy,"YES
 
The `withdraw` function is vulnerable to reentrancy attacks.  The `if` statement allows an attacker to call the `withdraw` function multiple times before the initial execution is complete. 
",698,45,1.8208422660827637
101,reentrancy,"YES
 
The `withdraw` function allows an attacker to call `msg.sender.call.value(amount)()` before the initial execution is complete. This creates a reentrancy vulnerability, as the attacker can call the `withdraw` function again and again, draining the contract's funds. 
",641,65,2.616239309310913
102,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. 
* **Potential for Reentrancy:** This creates a window for an attacker to repeatedly call the `Collect` function, draining the contract's funds. 


",1247,99,3.970564603805542
103,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code doesn't include any safeguards to prevent multiple calls to `Collect` from the same address. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1481,130,5.17331600189209
104,reentrancy,"YES
 
The contract uses the ERC20 token transfer function, which is susceptible to reentrancy attacks.  The `doAirdrop` function allows for multiple transfers to different addresses, which can be exploited by an attacker to call `getFirstWithdrawalBonus` again and again. 
",754,62,2.5132675170898438
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function multiple times within a short period, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1473,133,5.308858394622803
106,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any checks to prevent multiple calls to `Collect` from the same address. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1423,127,5.05972695350647
107,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution Flow:** The code doesn't clearly define how the `Collect` function interacts with the external contract. 
* **Potential for Reentrancy:**  The `Collect` function could be called repeatedly by an attacker, leading to a reentrancy attack. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1251,138,5.573713779449463
108,reentrancy,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `WithdrawToHolder` function allows external calls to the `_addr` contract.
* **Potential for Reentrancy:**  An attacker could call `WithdrawToHolder` multiple times, each time before the previous one completes, potentially draining funds. 
* **Lack of Safeguards:** The code lacks any checks to prevent this type of attack. 


",1365,109,4.356376886367798
109,reentrancy,"YES

The `airDrop` function in the `ModifierEntrancy` contract is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `airDrop` function calls `Bank(msg.sender).supportsToken()` which is an external contract call.
* **Potential for Reentrancy:**  The `supportsToken` function in the `Bank` contract could be called multiple times within the `airDrop` function, leading to a reentrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",966,127,5.0484442710876465
110,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `if` statement allows the `CashOut` function to call an external contract (`msg.sender.call.value(_am)`) before the initial execution is complete. 
* **Potential for Reentrancy:** This external contract call could be a reentrancy attack vector. An attacker could call the `CashOut` function multiple times, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1211,133,5.292845010757446
111,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any checks to prevent multiple calls to `Collect` from the same address. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1415,127,5.080976963043213
112,reentrancy,"YES
 
The `Airdrop` contract allows for the transfer of tokens from the `msg.sender` to multiple addresses (`dests`) using the ERC20 token. This is a classic reentrancy attack vector.  The `doAirdrop` function allows for multiple transfers to be made in a single call, which can be exploited by an attacker to drain the contract of funds. 
",679,86,3.406656265258789
113,reentrancy,"YES
 
The `withdrawBalance` function calls `msg.sender.call.value(amountToWithdraw)()` which allows an attacker to call the contract again before the withdrawal is complete. This is a classic reentrancy attack. 
",670,52,2.1018009185791016
114,reentrancy,"YES
 
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",1169,33,1.392749547958374
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1165,47,1.9375946521759033
116,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution:** The code doesn't specify how the `_am` value is handled, making it susceptible to reentrancy. 


Let me know if you'd like a more detailed explanation! 
",1243,105,4.1960084438323975
117,reentrancy,"YES
 
The contract uses the `ERC20` interface, which is a standard for ERC20 tokens.  The `doAirdrop` function calls the `transferFrom` function of the ERC20 token, which is a function that can be exploited by a reentrancy attack. 
",723,66,2.6463863849639893
118,reentrancy,"YES
 
The `withdrawBalance` function is vulnerable to reentrancy attacks.  The `if` statement allows an attacker to call the `withdrawBalance` function multiple times before the initial execution is complete. 
",666,47,1.8963887691497803
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows for reentrancy attacks.  This line allows an attacker to call the contract again before the initial execution is complete. 
",1273,48,1.988102674484253
120,reentrancy,"YES
 
The `CashOut` function allows for external calls to the contract before the initial execution is complete. This creates a reentrancy vulnerability. 
",1139,35,1.4714264869689941
121,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution:** The code doesn't specify how the `_am` value is handled. 
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1319,132,5.249754428863525
122,reentrancy,"YES
 
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",1153,33,1.3954484462738037
123,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Call:** The `if` statement allows the `Collect` function to call an external contract (`msg.sender.call.value(_am)`) before the `acc.balance` is updated.
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times, each time attempting to drain the contract's funds. 
* **Uncontrolled Execution:** The `if` statement doesn't guarantee that the external contract call will be completed before the `acc.balance` is updated. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1247,155,6.144865989685059
124,reentrancy,"YES
 
The `CashOut` function allows for external calls to the contract before the initial execution is complete. This creates a reentrancy vulnerability. 
",1139,35,1.4735889434814453
125,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution Flow:** The code doesn't clearly define how the `Collect` function interacts with the external contract. 
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1323,140,5.554708957672119
126,reentrancy,"YES
 
The `Airdrop` contract allows for multiple transfers from the `msg.sender` to multiple addresses. This creates a reentrancy vulnerability because the `doAirdrop` function can be called repeatedly, potentially draining the contract's funds. 
",610,58,2.3230485916137695
127,time manipulation,"NO 
",512,4,0.22527194023132324
128,time manipulation,"YES
 
The contract relies heavily on `block.timestamp` for its functionality, making it susceptible to manipulation by miners. This can lead to the contract being exploited to drain funds or to perform actions at an incorrect time. 
",783,49,1.9831464290618896
129,time manipulation,"YES
 
The `lastInvestmentTimestamp` variable is directly set to `block.timestamp`, making it susceptible to manipulation by miners. This could allow an attacker to manipulate the timestamp and potentially gain control of the contract. 
",995,48,1.9750475883483887
130,time manipulation,"YES
 
The contract relies on the `now` variable to determine the current block timestamp. This can be manipulated by miners, potentially allowing an attacker to control the contract's behavior. 
",631,42,1.7004282474517822
131,time manipulation,"YES
 
The contract relies on `block.timestamp` for the `random` variable. This is vulnerable to manipulation by miners, as they can change the reported timestamp. 
",781,39,1.6003015041351318
132,short addresses,"YES
 
The `Airdrop` contract uses the `transferFrom` function of the ERC20 token. This function is vulnerable to reentrancy attacks. 
",819,38,1.5580573081970215
133,denial of service,"YES
 
The contract's `addCreditors` function allows an attacker to add an unlimited number of addresses to the `creditorAddresses` array. This can lead to a denial of service attack, as the contract will be unable to process any transactions. 
",784,57,2.3098413944244385
134,denial of service,"YES
 
The contract's `clearDOS` function has a potential denial of service vulnerability.  It clears the array, but it does so by setting the array length to 0 and then setting the number of elements to 0. This can lead to a denial of service attack if the attacker can control the `clearDOS` function. 
",915,74,2.970937490463257
135,denial of service,"YES
 
The code has a denial of service vulnerability.  The lines `creditorAddresses = new address[](0);` and `creditorAmounts = new uint[](0);`  are vulnerable to denial of service attacks. 
",2144,51,2.1771581172943115
136,denial of service,"YES

The `Airdrop` contract is vulnerable to a Denial of Service attack.  The `doAirdrop` function uses `transferFrom` from the ERC20 contract. If the `ERC20` contract is vulnerable to a Denial of Service attack, the `doAirdrop` function will be vulnerable to a Denial of Service attack. 
",804,77,3.0854685306549072
137,denial of service,"YES
 
The `Airdrop` contract uses the `transferFrom` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",643,39,1.5955955982208252
138,denial of service,"YES

The `Airdrop` contract uses the `transferFrom` function of the ERC20 token. This function is vulnerable to reentrancy attacks. 
",615,36,1.4753234386444092
