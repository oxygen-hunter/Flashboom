case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract allows an attacker to potentially drain funds from the contract. This is because the function does not have any checks to ensure that the provided `dests` and `values` are valid. 
",925,61,2.4431841373443604
12,access control,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",621,37,1.511613130569458
13,access control,"YES
The contract uses `msg.sender` to determine the owner. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",2863,38,1.7336504459381104
14,access control,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract allows an attacker to potentially drain funds from the contract. This is because the function doesn't have any checks to ensure that the `dests` array is valid or that the `values` array is within the contract's limits. 
",796,72,2.8711140155792236
15,access control,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",635,37,1.515411376953125
16,access control,"NO 
",735,4,0.23357415199279785
17,access control,"NO 
",583,4,0.2232968807220459
18,access control,"NO 
",826,4,0.23134970664978027
19,access control,"NO 
",621,4,0.23423218727111816
20,access control,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has finished. 
* **Potential for Loss:**  This could lead to a situation where the attacker repeatedly calls the `transfer` function, draining the contract's funds. 


",817,131,5.170764684677124
21,access control,"NO 
",578,4,0.2279524803161621
22,access control,"NO 
",846,4,0.24000215530395508
23,access control,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",521,37,1.505587100982666
24,access control,"YES
 
The `QuantumpayAirdropper` contract uses the `multisend` function to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",629,41,1.6679518222808838
25,access control,"NO 
",600,4,0.22653603553771973
26,access control,"YES
 
The contract uses `fibonacciLibrary.delegatecall` to execute external functions. This is a common vulnerability, as it can be exploited to call arbitrary functions on the contract. 
",1105,42,1.741210699081421
27,unchecked low level calls,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has completed. 
* **Unprotected Transfers:** The `transfer` function in the `ERC20` contract is not designed to handle reentrancy. 
* **Potential for Loss:**  If an attacker can repeatedly call `multisend` before the previous one has finished, they could drain the contract's funds. 


",1423,163,6.44769024848938
28,unchecked low level calls,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  
* **Potential for Reentrancy:**  If an attacker can call the `multisend` function multiple times in rapid succession, they could potentially execute the `transfer` function multiple times, draining the contract's funds. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy. 


",1618,143,5.6920325756073
29,unchecked low level calls,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract calls the `transfer` function of the ERC20 token contract.  The `transfer` function is a low-level function that does not propagate errors. This means that if the `transfer` function fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",1121,84,3.3450963497161865
30,unchecked low level calls,"YES
 
The code has several vulnerabilities:

* **Unchecked Return Values:** The `claimThrone` function doesn't check the return value of `msg.sender.send(valuePaid)`. This can lead to unexpected behavior and potential loss of funds.
* **Low Level Function Calls:** The `claimThrone` function uses `msg.sender.send(valuePaid)` and `msg.sender.send(excessPaid)`. These functions are low-level and can be vulnerable to reentrancy attacks.
* **Unprotected Access Control:** The `transferOwnership` function is not restricted to the owner. This could allow an attacker to change the contract's ownership. 
* **Reentrancy Attacks:** The `claimThrone` function could be vulnerable to reentrancy attacks. 
* **Arithmetic Overflows and Underflows:** The code does not handle arithmetic overflows and underflows well. 
* **Randomness:** The code does not use a secure way to generate randomness. 



",2513,213,8.494571924209595
31,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each destination address. This is a potential vulnerability because it does not check the return value of the `transfer` function. If the `transfer` function fails, the contract will continue to execute, potentially leading to a loss of funds. 
",700,72,2.8713390827178955
32,unchecked low level calls,"YES
 
The `cash` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `cash` function calls `winner.send(subpot)` which is a function call.  This function call can be re-entered by the attacker.
* **Potential for Unintended Execution:**  The attacker can potentially execute the `cash` function multiple times, leading to unintended execution and potentially draining funds. 


",2645,99,4.08500337600708
33,unchecked low level calls,"NO 
",557,4,0.22770929336547852
34,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any checks for the validity of the `to` and `value` parameters. This can lead to a reentrancy attack. 
",889,62,2.481689929962158
35,unchecked low level calls,"NO 
",1593,4,0.3176612854003906
36,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling. If the `transfer` function fails, the contract will not handle the failure. 
",1492,56,2.3067965507507324
37,unchecked low level calls,"YES

The `multisend` function calls ERC20 tokens without any checks. This can lead to a reentrancy attack, where an attacker can call the function multiple times to drain the contract's funds. 
",875,47,1.9135851860046387
38,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling. If the `transfer` function fails, the contract will not revert. 
",1520,54,2.237107753753662
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can be exploited.  The `call.value` function can be used to send a value to a contract, and the `gas` function can be used to set the gas limit for the transaction. These functions can be used to send a large amount of gas to a contract, which can be used to exploit the contract. 
",2440,94,3.8237218856811523
40,unchecked low level calls,"YES
 
The `execute` function in the `Marriage` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors.  This means an attacker could potentially execute malicious code, leading to a variety of attacks. 
",1953,77,3.1601669788360596
41,unchecked low level calls,"YES
 
The `execute` function in the `WedIndex` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors. This means an attacker could potentially execute malicious code, leading to a variety of attacks. 
",1293,77,3.0898263454437256
42,unchecked low level calls,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has completed. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy.  This means that an attacker could potentially drain the contract's funds. 


",1563,142,5.684610605239868
43,unchecked low level calls,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has finished. 
* **Unprotected Transfers:** The `transfer` function in the `ERC20` contract is not designed to handle reentrancy. 
* **Potential for Loss:**  An attacker could exploit this vulnerability to drain funds from the contract. 


",679,150,5.853315114974976
44,unchecked low level calls,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has completed. 
* **Unprotected Transfers:** The `transfer` function in the `ERC20` contract is not designed to handle reentrancy. 
* **Potential for Loss:**  If an attacker can re-enter the `multisend` function multiple times, they could drain the contract's funds. 


",1121,162,6.3962483406066895
45,unchecked low level calls,"YES
 
The `execute` function in the `TokenSender` contract calls the target address with the provided value and data.  However, the `_dst.call.value(_value)(_data)` call does not propagate errors. This means that if the call fails, the contract will continue to execute the next line of code, potentially leading to unexpected behavior and vulnerabilities. 
",1921,81,3.3032171726226807
46,unchecked low level calls,"NO 
",594,4,0.22834038734436035
47,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling. If the `transfer` function fails, the contract will not revert. 
",1436,54,2.215965747833252
48,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This is a potential vulnerability because it does not check the return value of the `transfer` function. If the `transfer` function fails, the contract will continue to execute, potentially leading to a loss of funds. 
",704,78,3.116805076599121
49,unchecked low level calls,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has completed. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy.  This means that an attacker could potentially drain the contract's funds. 


",1599,142,5.683138608932495
50,unchecked low level calls,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  
* **Potential for Reentrancy:**  If an attacker can call the `multisend` function multiple times in rapid succession, they could potentially drain the contract's funds. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy. 


",1599,134,5.354189872741699
51,unchecked low level calls,"YES
 
The `sendMoney` function in the `SimpleWallet` contract uses the `call` function with `value` and `_data`. This is a low-level function that does not propagate errors. If the `_target.call.value(_value)(_data)` call fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",773,81,3.2110989093780518
52,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any checks for the validity of the `to` and `value` parameters. This can lead to a reentrancy attack. 
",1036,62,2.5078392028808594
53,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",683,37,1.5064198970794678
54,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This is a potential vulnerability because it does not check the return value of the `transfer` function. If the `transfer` function fails, the contract will continue to execute, potentially leading to a loss of funds. 
",702,78,3.10797381401062
55,unchecked low level calls,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  
* **Potential for Reentrancy:**  If an attacker can call the `multisend` function multiple times in rapid succession, they could potentially drain the contract's funds. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy. 


",1559,134,5.365304946899414
56,unchecked low level calls,"YES

The contract uses `fuck.call(bytes4(sha3(""giveBlockReward()"")));` which is a low-level call. This can lead to unexpected behavior and potential vulnerabilities. 
",700,43,1.739654302597046
57,unchecked low level calls,"YES
 
The `multisend` function calls the ERC20 token's transfer function, which is a low-level function.  The `transfer` function does not propagate errors, so if the transfer fails, the contract will continue to run. This can lead to unexpected outcomes and vulnerabilities. 
",967,65,2.6168811321258545
58,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This is a potential vulnerability because it does not check the return value of the `transfer` function. If the `transfer` function fails, the contract will continue to execute, potentially leading to a loss of funds. 
",704,78,3.101637840270996
59,unchecked low level calls,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has completed. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy.  This means that an attacker could potentially drain the contract's funds. 


",1563,142,5.639225006103516
60,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  This function is vulnerable to reentrancy attacks. 
",503,38,1.5421879291534424
61,unchecked low level calls,"YES
 
The contract uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning they will not revert the current execution. This can lead to unexpected behavior and vulnerabilities. 
",2330,53,2.2464354038238525
62,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can be a vulnerability if the `transfer` function is not properly implemented, as it could allow an attacker to drain the contract of funds. 
",810,64,2.5606586933135986
63,unchecked low level calls,"YES

The `multisend` function in the `QuantumpayAirdropper` contract calls the `transfer` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `multisend` function calls the `transfer` function of the ERC20 token contract multiple times. If an attacker can call the `multisend` function multiple times, they can potentially drain the contract of funds. 
* **Unprotected Transfers:** The `transfer` function does not have any checks to prevent reentrancy. 
* **Potential for Exploits:** An attacker could call the `multisend` function repeatedly, potentially draining the contract of funds. 


",811,157,6.16584324836731
64,unchecked low level calls,"YES
 
The `multisend` function calls the ERC20 token's transfer function, which is a low-level function.  The `transfer` function does not propagate errors, so if the transfer fails, the contract will continue to run. This can lead to unexpected outcomes and vulnerabilities. 
",965,65,2.606935739517212
65,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract.  This is a potential vulnerability because the `transfer` function is not explicitly checked for potential reentrancy or other vulnerabilities. 
",745,50,2.0125513076782227
66,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling. If the `transfer` function fails, the contract will not revert. 
",1520,54,2.2615163326263428
67,unchecked low level calls,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has finished executing. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy attacks. 
* **Potential for Loss:**  If an attacker can re-enter the `multisend` function multiple times, they could drain the contract's funds. 


",1507,163,6.478329420089722
68,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  This function is vulnerable to reentrancy attacks. 
",644,38,1.5463500022888184
69,unchecked low level calls,"YES

The `multisend` function in the `QuantumpayAirdropper` contract uses the `ERC20` contract's transfer function. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address. This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has finished executing. 
* **Unprotected Transfer:** The `ERC20` contract's `transfer` function does not have any built-in reentrancy protection. 
* **Potential for Loss:** If an attacker can re-enter the `multisend` function multiple times, they could potentially drain the contract of funds. 


",813,177,6.959007263183594
70,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This is a potential vulnerability because it does not check the return value of the `transfer` function. If the `transfer` function fails, the contract will continue to execute, potentially leading to a loss of funds. 
",708,78,3.107377052307129
71,unchecked low level calls,"YES
 
The `sendMoney` function uses `_target.call.value(_value)`. This is a low-level function call that doesn't propagate errors.  It's possible for the `_target.call.value(_value)` to fail, and the contract will continue to execute. This can lead to unexpected outcomes and security vulnerabilities. 
",756,78,3.1070544719696045
72,unchecked low level calls,"YES
 
The `multisend` function calls the ERC20 token's transfer function, which is a low-level function.  The `transfer` function does not propagate errors, so if the transfer fails, the contract will continue to run. This can lead to unexpected outcomes and vulnerabilities. 
",965,65,2.602262496948242
73,front running,"NO 
",755,4,0.23895955085754395
74,front running,"NO 
",697,4,0.3050854206085205
75,front running,"NO 
",2093,4,0.34040045738220215
76,front running,"NO 
",1010,4,0.2585122585296631
77,arithmetic,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract uses the `ERC20` contract's transfer function.  This function is vulnerable to integer overflows and underflows because it transfers a large amount of tokens.  If the `values` array is not carefully managed, it could lead to an overflow or underflow, which could result in a loss of funds. 
",511,88,3.4785568714141846
78,arithmetic,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract uses the `transfer` function of the ERC20 token contract.  This function can be vulnerable to integer overflows and underflows, especially if the `values` array is not properly validated. 
",476,63,2.4932243824005127
79,arithmetic,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the values of the `values` array before sending them to the `ERC20` contract. If the values are too large, they could overflow the `uint256` data type, leading to unexpected behavior and potential loss of funds. 
",468,110,4.313715219497681
80,arithmetic,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the input values for potential overflows. If the `values` array contains values larger than the maximum value that can be transferred by the `ERC20` contract, it could lead to an overflow. 
",476,100,3.94584059715271
81,arithmetic,"NO 
",759,4,0.23595190048217773
82,arithmetic,"NO 
",864,4,0.24103784561157227
83,arithmetic,"YES

The `multisend` function in the `QuantumpayAirdropper` contract uses the `transfer` function of the ERC20 token contract.  This function can be vulnerable to integer overflows if the values passed to the `transfer` function exceed the maximum value that the ERC20 token can handle. 
",582,68,2.7119858264923096
84,arithmetic,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the input values for potential overflows. If the `values` array contains a large number, it could overflow the `uint256` data type, leading to unexpected behavior and potential loss of funds. 
",489,101,3.9642319679260254
85,arithmetic,"YES

The `multisend` function in the `QuantumpayAirdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function does not have any checks for overflows or underflows. If the `values` array is large enough, it could lead to an overflow in the `ERC20` contract's transfer function. 
",564,84,3.3412926197052
86,arithmetic,"YES

The contract uses unsigned integers for its state variables and functions.  This makes it vulnerable to integer overflows and underflows.  The `multisend` function transfers tokens to multiple addresses, and the `ERC20` contract is not specifically designed to handle overflows. 
",879,58,2.4100749492645264
87,arithmetic,"NO 
",716,4,0.23486042022705078
88,arithmetic,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the input values for potential overflows. If the `values` array contains a large number, it could overflow the `uint256` data type, leading to unexpected behavior and potential loss of funds. 
",476,101,3.961650848388672
89,arithmetic,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract transfers tokens to multiple addresses.  This function is vulnerable to reentrancy attacks. 
",496,41,1.645758867263794
90,arithmetic,"NO 
",558,4,0.21788978576660156
91,bad randomness,"NO 
",868,4,0.24709296226501465
92,bad randomness,"YES
 
The code uses `block.number` to generate random numbers for the `chooseWinner` function. This is a major security vulnerability.  The `block.number` is predictable and can be manipulated by miners. This means that the random numbers generated by the contract are not truly random, and can be exploited by attackers. 
",2723,72,3.081555128097534
93,bad randomness,"YES
The code uses a function `rand` that relies on the block hash and a constant factor. This makes it susceptible to attacks where the attacker can manipulate the block hash to influence the random number. 
",3062,44,1.9578111171722412
94,bad randomness,"YES
 
The contract uses a function `multisend` that transfers tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",1026,33,1.3834927082061768
95,bad randomness,"YES
 
The contract uses `keccak256` to generate a random number, but it's vulnerable to predictable attacks. The `block.blockhash` and `block.number` values are predictable, making the generated number susceptible to manipulation. 
",719,57,2.286473035812378
96,bad randomness,"YES
 
The contract uses the `block.timestamp` for the `salt` variable, which is a predictable source of randomness. This makes the generated random numbers susceptible to manipulation by attackers. 
",811,43,1.7555668354034424
97,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution Flow:** The code doesn't clearly define how the `Collect` function interacts with the external contract. 
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times, potentially draining funds from the contract. 


",1291,114,4.551176071166992
98,reentrancy,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract allows an attacker to potentially drain funds from the contract. This is because the function does not have any checks to prevent an attacker from sending large amounts of tokens to multiple addresses. 
",831,59,2.3729472160339355
99,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1365,47,1.9469501972198486
100,reentrancy,"YES
 
The `multisend` function allows an attacker to potentially drain funds from the contract.  The function calls `ERC20(_tokenAddr).transfer` for each address in the `dests` array.  This means that an attacker could potentially send a large amount of tokens to multiple addresses in a single transaction. 
",738,71,2.832953929901123
101,reentrancy,"YES
 
The `multisend` function allows an attacker to potentially drain funds from the contract.  The function does not have any checks to prevent an attacker from sending large amounts of tokens to multiple addresses. 
",681,46,1.8660261631011963
102,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1287,114,4.5598204135894775
103,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1521,47,1.9651176929473877
104,reentrancy,"YES
 
The contract uses the `multisend` function which allows for multiple transfers to multiple addresses. This function is vulnerable to reentrancy attacks. 
",794,35,1.4391653537750244
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a chain of calls that drain the contract's funds. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1513,119,4.749776363372803
106,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1463,47,1.94753098487854
107,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1291,114,4.563073635101318
108,reentrancy,"YES
 
The `multisend` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `multisend` function calls the ERC20 token contract (`ERC20(_tokenAddr).transfer`) for each destination address and value. 
* **Potential for Reentrancy:**  An attacker could call `multisend` multiple times, each time attempting to transfer funds to different addresses.  The function doesn't handle the possibility of a reentrancy attack. 
* **Uncontrolled Execution:** The `transfer` function is executed by the ERC20 contract, which is not controlled by the `multisend` function. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1405,165,6.472984790802002
109,reentrancy,"YES

The contract uses the `airDrop` function, which allows an attacker to call the `airDrop` function repeatedly, potentially draining the contract of funds. This is a classic reentrancy attack. 
",1006,45,1.8319320678710938
110,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **Unrestricted External Calls:** The `CashOut` function allows external calls to the contract's `msg.sender` address.
* **Potential for Reentrancy:**  An attacker could call `CashOut` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any checks to prevent multiple calls or to ensure that the `msg.sender` address has sufficient funds. 


",1251,122,4.861868381500244
111,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which is vulnerable to reentrancy attacks.  
",1455,31,1.324638843536377
112,reentrancy,"YES
 
The `multisend` function allows an attacker to potentially drain funds from the contract.  The function does not have any checks to prevent an attacker from sending large amounts of tokens to multiple addresses. 
",719,46,1.8629286289215088
113,reentrancy,"YES
 
The `multisend` function in the `QuantumpayAirdropper` contract allows an attacker to potentially drain funds from the contract.  This is because the `multisend` function does not have any checks to prevent an attacker from sending large amounts of tokens to multiple addresses. 
",710,64,2.565948486328125
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1209,47,1.9366278648376465
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1205,47,1.936826467514038
116,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1283,114,4.5656960010528564
117,reentrancy,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",763,37,1.5172367095947266
118,reentrancy,"YES
 
The `withdrawBalance` function is vulnerable to reentrancy attacks.  The `if` statement allows an attacker to call the `withdrawBalance` function repeatedly before the initial execution is complete. 
",706,46,1.8680808544158936
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1313,47,1.9462664127349854
120,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `if(msg.sender.call.value(_am)())` line allows an attacker to call the `CashOut` function repeatedly, potentially draining the contract's funds.
* **Reentrancy Vulnerability:**  The `call.value(_am)` function call is susceptible to reentrancy because it doesn't handle the potential for a contract to call itself again before the initial execution is complete. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1179,138,5.441025733947754
121,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1359,47,1.9391536712646484
122,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `CashOut` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy Vulnerability:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1193,121,4.813814878463745
123,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1287,114,4.537807464599609
124,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `if(msg.sender.call.value(_am)())` line allows an attacker to call the `CashOut` function repeatedly, potentially draining the contract's funds.
* **Reentrancy Vulnerability:**  The `call.value(_am)` function call is susceptible to reentrancy because it doesn't handle the potential for a contract to call itself again before the initial execution is complete. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1179,138,5.462083578109741
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1363,47,1.94339919090271
126,reentrancy,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks because it allows the owner to call the `withdrawBalance` function repeatedly. 
",650,51,2.0481460094451904
127,time manipulation,"NO 
",552,4,0.22533535957336426
128,time manipulation,"YES
 
The contract relies heavily on `block.timestamp` for its functionality, making it susceptible to manipulation by miners. This can lead to the contract being exploited to drain funds or to perform actions that were not intended. 
",823,49,1.992035150527954
129,time manipulation,"YES
 
The contract relies heavily on `block.timestamp` for its functionality, making it vulnerable to manipulation by miners.  The `resetInvestment` function is particularly susceptible to this as it uses the timestamp to determine when to reset the investment. 
",1035,54,2.1930971145629883
130,time manipulation,"NO 
",671,4,0.23163723945617676
131,time manipulation,"YES
 
The contract uses `block.timestamp` in the `sha3` function to generate a random number. This is vulnerable because the miners can manipulate the timestamp, potentially leading to unfair outcomes. 
",821,45,1.8260557651519775
132,short addresses,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",859,37,1.5173137187957764
133,denial of service,"YES
 
The contract's `multisend` function allows an attacker to potentially drain funds from the contract.  This is because the function doesn't have any checks to ensure the provided `dests` and `values` are valid.  An attacker could send a large number of transactions to the contract, potentially draining funds. 
",824,72,2.9011528491973877
134,denial of service,"YES
 
The contract's `multisend` function allows for the transfer of tokens to multiple addresses. This can be exploited by an attacker to drain funds from the contract. 
",955,40,1.6415042877197266
135,denial of service,"YES
 
The code has a vulnerability related to the `lendGovernmentMoney` function.  The `creditorAddresses` and `creditorAmounts` arrays are cleared every time a transaction is executed. This can be exploited to drain funds from the contract. 
",2184,56,2.359163999557495
136,denial of service,"YES
 
The contract uses a `multisend` function that transfers tokens to multiple addresses. This function is vulnerable to a denial of service attack because it can be used to send a large number of transactions to a large number of addresses. This can lead to a denial of service attack because the contract will be unable to process any other transactions. 
",844,73,2.9083895683288574
137,denial of service,"YES
 
The contract uses the `multisend` function to transfer tokens to multiple addresses. This function is vulnerable to a denial of service attack because it can be used to send a large number of transactions to a large number of addresses. This can lead to a denial of service attack because the contract will be unable to process the transactions. 
",683,72,2.8643124103546143
138,denial of service,"YES
 
The contract uses the `multisend` function to transfer tokens to multiple addresses. This function is vulnerable to a Denial of Service attack because it can be used to send a large number of transactions to a large number of addresses. This can lead to a denial of service attack, where the contract is unable to process any transactions. 
",655,72,2.8761355876922607
