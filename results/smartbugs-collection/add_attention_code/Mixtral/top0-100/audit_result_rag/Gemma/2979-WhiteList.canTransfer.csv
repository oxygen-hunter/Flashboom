case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"NO 
",782,4,0.2439258098602295
12,access control,"NO 
",478,4,0.2252182960510254
13,access control,"YES
The contract uses `canTransfer` function to determine if a transfer is allowed. This function is not a standard function and is not part of the standard Solidity syntax. This can be exploited by an attacker to bypass the contract's intended functionality. 
",2720,54,2.3383638858795166
14,access control,"NO 
",653,4,0.23636102676391602
15,access control,"NO 
",492,4,0.2191619873046875
16,access control,"NO 
",592,4,0.22344589233398438
17,access control,"NO 
",440,4,0.2057790756225586
18,access control,"NO 
",683,4,0.23009872436523438
19,access control,"NO 
",478,4,0.22637295722961426
20,access control,"NO 
",674,4,0.23019957542419434
21,access control,"NO 
",435,4,0.20397663116455078
22,access control,"NO 
",703,4,0.23071765899658203
23,access control,"NO 
",378,4,0.21445775032043457
24,access control,"NO 
",486,4,0.22007274627685547
25,access control,"NO 
",457,4,0.2062821388244629
26,access control,"YES

The contract uses `fibonacciLibrary.delegatecall` to execute functions. This is a potential vulnerability because it allows an attacker to call functions on the `fibonacciLibrary` contract. 
",962,41,1.691136360168457
27,unchecked low level calls,"YES
 
The `canTransfer` function is vulnerable because it returns `true` regardless of the input parameters. This means that the `withdraw` function can be exploited to transfer funds to an attacker. 
",1280,45,1.8845586776733398
28,unchecked low level calls,"YES
 
The `canTransfer` function is vulnerable to reentrancy attacks.  
 
Here's why:

* **Reentrancy:**  A reentrancy attack occurs when an attacker calls a contract's function multiple times in rapid succession, exploiting the contract's ability to execute code within the function.
* **Vulnerability:** The `canTransfer` function doesn't explicitly check for reentrancy.  
* **Exploitation:** An attacker could call `canTransfer` repeatedly, potentially draining the contract's funds. 


",1475,119,4.750171422958374
29,unchecked low level calls,"YES

The `canTransfer` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `canTransfer` function doesn't explicitly check for reentrancy. 
* **Potential for Exploitation:** An attacker could call `canTransfer` multiple times in rapid succession, potentially draining the contract's funds. 
* **Lack of Robustness:** The `canTransfer` function doesn't handle reentrancy attacks. 


",978,103,4.121411085128784
30,unchecked low level calls,"YES
 
 The code has several vulnerabilities related to the `send` function.  Here's why:

* **`msg.sender.send(valuePaid)`:** This line sends the `valuePaid` to the `msg.sender` address.  This is a potential vulnerability because it doesn't check for the return value of the `send` function. If the `send` function fails, the contract will continue to execute, potentially leading to unexpected outcomes. 
* **`msg.sender.send(excessPaid)`:**  Similar to the previous vulnerability, this line sends the `excessPaid` to the `msg.sender` address. 
* **`currentMonarch.etherAddress.send(compensation)`:** This line sends the `compensation` to the `currentMonarch.etherAddress`.  This is a potential vulnerability because it doesn't check for the return value of the `send` function. If the `send` function fails, the contract will continue to execute, potentially leading to unexpected outcomes. 


",2370,216,8.57593584060669
31,unchecked low level calls,"NO 
",557,4,0.2273540496826172
32,unchecked low level calls,"YES
 
 The `canTransfer` function is vulnerable because it returns `true` for all calls. This means that the contract will always allow transfers, even if they are not intended. This can lead to malicious actors exploiting the contract. 
",2502,52,2.227874755859375
33,unchecked low level calls,"NO 
",414,4,0.20546364784240723
34,unchecked low level calls,"YES

The `canTransfer` function is vulnerable because it returns `true` without any checks. This means that the `transfer` function will always execute, even if the `canTransfer` function returns `false`. This can lead to unintended consequences, such as funds being transferred to an unauthorized address. 
",746,64,2.5635650157928467
35,unchecked low level calls,"NO 
",1450,4,0.29844117164611816
36,unchecked low level calls,"YES
 
The `canTransfer` function is vulnerable because it returns `true` without any checks. This means that anyone can potentially transfer tokens, even if they are not authorized. 
",1349,41,1.7219219207763672
37,unchecked low level calls,"NO 
",732,4,0.23242449760437012
38,unchecked low level calls,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Withdraw:** The `WithdrawToHolder` function doesn't check for reentrancy. 
* **Potential for Reentrancy:** An attacker could call `WithdrawToHolder` multiple times in rapid succession, potentially draining funds. 
* **Lack of Safeguard:** The function doesn't have any safeguards to prevent this. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1377,120,4.7923407554626465
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can be exploited.  The `call.value` function can be used to send a value to an address, and the `gas` function can be used to set the gas limit for a function call. These functions can be used to send a large amount of gas to an address, which can be used to drain the contract of funds. 
",2297,97,3.959923028945923
40,unchecked low level calls,"YES
 
 The `execute` function is vulnerable because it calls a function on the target contract without any checks for success or failure. This can lead to reentrancy attacks, where an attacker can repeatedly call the `execute` function to drain the contract of funds. 
 
 The `canTransfer` function is vulnerable because it does not check for the validity of the transfer. This can lead to a denial of service attack, where an attacker can send a large number of transactions to the contract, causing it to fail. 
 
 The `Marriage` contract is vulnerable because it does not have any checks for the validity of the marriage status. This can lead to a denial of service attack, where an attacker can send a large number of transactions to the contract, causing it to fail. 
 
 The `setMajorEvent` function is vulnerable because it does not have any checks for the validity of the event name. This can lead to a denial of service attack, where an attacker can send a large number of transactions to the contract, causing it to fail. 
 
 The `sendMessage` function is vulnerable because it does not have any checks for the validity of the message. This can lead to a denial of service attack, where an attacker can send a large number of transactions to the contract, causing it to fail. 
 
 The `Marriage` contract is vulnerable because it does not have any checks for the validity of the marriage status.",1810,301,11.851200580596924
41,unchecked low level calls,"YES
 
The `execute` function allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors. This means an attacker could potentially execute malicious code, leading to a variety of attacks. 
",1150,70,2.832963228225708
42,unchecked low level calls,"NO 
",1420,4,0.29717159271240234
43,unchecked low level calls,"YES
 
 The `canTransfer` function is vulnerable because it returns `true` regardless of the input parameters. This means that the `sendToWinner` and `withdrawLeftOver` functions can be exploited by an attacker to transfer funds to the attacker's address. 
",536,58,2.3306899070739746
44,unchecked low level calls,"YES

The `canTransfer` function is vulnerable because it returns `true` regardless of the input parameters. This means that the `Command` function can potentially transfer funds to any address, even if the `canTransfer` function is not designed to do so. 
",978,56,2.2783167362213135
45,unchecked low level calls,"YES
 
The `_dst.call.value(_value)(_data);` line is vulnerable because it uses the `call` function, which does not propagate errors. This means that if the `call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",1778,66,2.723686456680298
46,unchecked low level calls,"NO 
",451,4,0.20877671241760254
47,unchecked low level calls,"YES

The `WithdrawToken` function uses `token.call` which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",1293,58,2.3815298080444336
48,unchecked low level calls,"NO 
",561,4,0.22997832298278809
49,unchecked low level calls,"NO 
",1456,4,0.2943911552429199
50,unchecked low level calls,"NO 
",1456,4,0.2815585136413574
51,unchecked low level calls,"NO 
",630,4,0.22803187370300293
52,unchecked low level calls,"YES

The `canTransfer` function is vulnerable because it returns `true` unconditionally. This means that the `transfer` function will always execute, even if the `canTransfer` function returns `false`. This can lead to a reentrancy attack, where an attacker can call the `transfer` function multiple times to drain the contract of funds. 
",893,74,2.9701740741729736
53,unchecked low level calls,"NO 
",540,4,0.22695088386535645
54,unchecked low level calls,"NO 
",559,4,0.22954320907592773
55,unchecked low level calls,"YES
 
The `canTransfer` function is vulnerable because it returns `true` regardless of the input parameters. This means that the contract will always allow transfers, even if they are not intended. This can lead to malicious actors exploiting the contract to transfer funds without authorization. 
",1416,59,2.430126190185547
56,unchecked low level calls,"YES

The `canTransfer` function is vulnerable because it returns `true` without any checks. This means an attacker could potentially call `makeOldFucks` with a large number of calls, potentially draining the contract's funds. 
",557,51,2.0514421463012695
57,unchecked low level calls,"NO 
",824,4,0.2381591796875
58,unchecked low level calls,"YES

The `canTransfer` function is vulnerable because it returns `true` without any checks. This means that the `transfer` function will always execute, even if the `canTransfer` function returns `false`. This can lead to a reentrancy attack, where an attacker can call the `transfer` function multiple times to drain the contract of funds. 
",561,76,3.0095973014831543
59,unchecked low level calls,"YES
 
The `canTransfer` function is vulnerable because it returns `true` regardless of the input parameters. This means that the contract will always allow transfers, even if they are not intended. This can lead to malicious actors exploiting the contract to transfer funds without authorization. 
",1420,59,2.439451217651367
60,unchecked low level calls,"NO 
",360,4,0.20676159858703613
61,unchecked low level calls,"YES
 
The contract uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning they will not revert the current execution. This can lead to unexpected outcomes and vulnerabilities. 
",2187,53,2.245818853378296
62,unchecked low level calls,"YES
 
The `canTransfer` function is vulnerable because it returns `true` without any checks. This means that the `getTokens` function could potentially call `addr.call.value(0 wei)();` on an address that is not authorized to do so. 
",667,59,2.3670554161071777
63,unchecked low level calls,"NO 
",668,4,0.22935867309570312
64,unchecked low level calls,"NO 
",822,4,0.2442915439605713
65,unchecked low level calls,"YES

The `canTransfer` function is vulnerable because it returns `true` without any checks. This means that the `transfer` function will always execute, even if the `canTransfer` function returns `false`. This can lead to a reentrancy attack, where an attacker can call the `transfer` function multiple times to drain the contract of funds. 
",602,76,3.0221376419067383
66,unchecked low level calls,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Withdraw:** The `WithdrawToHolder` function doesn't check for reentrancy.  
* **Potential for Reentrancy:** An attacker could call `WithdrawToHolder` multiple times in rapid succession, potentially draining funds. 
* **Lack of Safeguard:** The function doesn't have any safeguards to prevent this. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1377,120,4.8296592235565186
67,unchecked low level calls,"NO 
",1364,4,0.3058505058288574
68,unchecked low level calls,"NO 
",501,4,0.22036123275756836
69,unchecked low level calls,"NO 
",670,4,0.23188495635986328
70,unchecked low level calls,"NO 
",565,4,0.22400927543640137
71,unchecked low level calls,"NO 
",613,4,0.2259521484375
72,unchecked low level calls,"YES
 
The `canTransfer` function is vulnerable to reentrancy attacks.  
",822,21,0.901986837387085
73,front running,"NO 
",612,4,0.22861027717590332
74,front running,"NO 
",554,4,0.218095064163208
75,front running,"NO 
",1950,4,0.32433295249938965
76,front running,"NO 
",867,4,0.2430737018585205
77,arithmetic,"YES

The line `map[k] -= v;` is vulnerable to integer overflows and underflows.  This is because the `map` is a mapping of uint256 to uint256, and the operation `-=` can cause an overflow if the value of `v` is too large. 
",368,68,2.6921257972717285
78,arithmetic,"YES

The code uses multiplication with an unsigned integer.  This can lead to integer overflows, which can be exploited to drain funds or cause denial of service. 
",333,35,1.416846752166748
79,arithmetic,"NO 
",325,4,0.19896912574768066
80,arithmetic,"YES

The `run` function subtracts `input` from `count`. If `input` is large enough, it could cause an overflow, leading to an underflow of the `count` variable. 
",333,45,1.8014085292816162
81,arithmetic,"NO 
",616,4,0.22821569442749023
82,arithmetic,"NO 
",721,4,0.23167800903320312
83,arithmetic,"NO 
",439,4,0.21077537536621094
84,arithmetic,"YES

The `run` function performs a subtraction operation, which could potentially lead to an integer overflow if the input value is large enough. 
",346,31,1.253706932067871
85,arithmetic,"NO 
",421,4,0.2066507339477539
86,arithmetic,"YES

The code uses unsigned integers and has functions that perform arithmetic operations.  These operations can lead to overflows and underflows, which can be exploited by attackers. 
",736,36,1.476984977722168
87,arithmetic,"NO 
",573,4,0.22475838661193848
88,arithmetic,"YES

The `run` function adds the input to the `count` variable.  This is vulnerable to integer overflows because the `count` variable is an unsigned integer. If the input is large enough, it could overflow the `count` variable, leading to unexpected behavior and potential loss of funds. 
",333,64,2.52410888671875
89,arithmetic,"YES

The `add` function has a potential for integer overflow.  
",353,17,0.7140192985534668
90,arithmetic,"NO 
",415,4,0.20966744422912598
91,bad randomness,"NO 
",725,4,0.23370838165283203
92,bad randomness,"YES
 
 The code uses `block.coinbase` and `block.difficulty` to generate random numbers for the raffle. These values are predictable and can be manipulated by miners, making the randomness unreliable. 
",2580,46,2.011415481567383
93,bad randomness,"YES
The code uses a function `rand` that relies on block hash and a constant `FACTOR` to generate a seemingly random number. However, this is not truly random, as it's predictable and can be manipulated by miners. 
",2919,51,2.223499298095703
94,bad randomness,"NO 
",883,4,0.24524617195129395
95,bad randomness,"NO 
",576,4,0.22382664680480957
96,bad randomness,"NO 
",668,4,0.22751975059509277
97,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1148,126,5.017881870269775
98,reentrancy,"NO 
",688,4,0.23290467262268066
99,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1222,120,4.782438039779663
100,reentrancy,"YES

The `canTransfer` function is vulnerable to reentrancy attacks.  The `canTransfer` function does not check for reentrancy, and the `withdraw` function allows external calls to be made to the contract. 
",595,50,2.0142574310302734
101,reentrancy,"NO 
",538,4,0.223405122756958
102,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the `Collect` function repeatedly, draining the contract's funds. This is a classic reentrancy attack. 
",1144,59,2.4043521881103516
103,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call allows an attacker to potentially call the `Collect` function again before the initial execution is complete. 
* **Uncontrolled Execution:** The code doesn't handle the potential for multiple calls to `Collect` to drain funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1378,140,5.559315204620361
104,reentrancy,"YES
 
The `canTransfer` function allows the contract to be re-entrancy vulnerable.  The `withdrawReward` function is vulnerable to reentrancy because it allows the caller to call `getFirstWithdrawalBonus` again before the `withdrawReward` function is complete. 
",651,60,2.4093480110168457
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function multiple times within a short period, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1370,133,5.274939060211182
106,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1320,121,4.82213020324707
107,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1148,126,5.015996694564819
108,reentrancy,"YES
 
The `canTransfer` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `canTransfer` function doesn't explicitly check for reentrancy. 
* **Potential for Exploitation:**  An attacker could call `canTransfer` multiple times within a short period, potentially draining funds from the contract. 
* **Lack of Robustness:** The function doesn't handle the possibility of a reentrancy attack. 


",1262,106,4.257946252822876
109,reentrancy,"YES

The `airDrop` function in the `ModifierEntrancy` contract is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `airDrop` function calls `ModifierEntrancy(msg.sender).airDrop()` which means it can be called multiple times in a row.
* **No Locking:** The `airDrop` function does not have any locking mechanism to prevent multiple calls. 


Let me know if you'd like to explore other aspects of smart contract security! 
",863,113,4.488036394119263
110,reentrancy,"YES
 
The `CashOut` function allows for a reentrancy attack.  The `if` statement allows for a malicious actor to call the `CashOut` function repeatedly, draining the contract of funds. 
",1108,48,1.9759867191314697
111,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1312,47,1.950988531112671
112,reentrancy,"YES

The `canTransfer` function allows for external contract calls, which can be exploited for reentrancy attacks. 
",576,27,1.1152377128601074
113,reentrancy,"NO 
",567,4,0.2239856719970703
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1066,47,1.9358506202697754
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1062,47,1.938910722732544
116,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again and again. This is a classic reentrancy attack. 
",1140,43,1.7868731021881104
117,reentrancy,"YES

The contract has a function `canTransfer` that returns `true` for all calls. This means that the `transfer` function can be called repeatedly without any checks. This allows an attacker to repeatedly call the `transfer` function and drain the contract of funds. 
",620,58,2.331252098083496
118,reentrancy,"YES
 
The `canTransfer` function is vulnerable to reentrancy attacks.  Here's why:

* **Unrestricted External Calls:** The `canTransfer` function allows external calls without any checks. This means an attacker could potentially call `canTransfer` multiple times within a single transaction, leading to a reentrancy attack. 
* **Potential for Manipulation:**  The `canTransfer` function doesn't check the validity of the `_from` and `_to` addresses. An attacker could manipulate these addresses to bypass the intended transfer logic. 


Let me know if you'd like to explore other aspects of smart contract security! 
",563,140,5.506224632263184
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1170,47,1.9420111179351807
120,reentrancy,"YES
 
The `CashOut` function allows an attacker to call `msg.sender.call.value(_am)()` which is a reentrancy vulnerability. 
",1036,38,1.5788357257843018
121,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1216,120,4.83935022354126
122,reentrancy,"YES

The code uses `msg.sender.call.value(_am)()` which allows an external contract to call the `CashOut` function before the initial execution is complete. This creates a reentrancy vulnerability. 
",1050,48,1.9757068157196045
123,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the `Collect` function repeatedly, draining the contract's funds. This is a classic reentrancy attack. 
",1144,59,2.40146541595459
124,reentrancy,"YES
 
The `CashOut` function allows for external contract calls to be made within the `CashOut` function. This creates a reentrancy vulnerability. 
",1036,37,1.6521553993225098
125,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1220,120,4.780447959899902
126,reentrancy,"YES

The contract allows for reentrancy attacks because it calls `withdrawBalance` again before the initial execution is complete. 
",507,28,1.158452033996582
127,time manipulation,"NO 
",409,4,0.2021956443786621
128,time manipulation,"NO 
",680,4,0.2321333885192871
129,time manipulation,"YES

The contract relies heavily on `block.timestamp` for its functionality, making it susceptible to manipulation by miners. This can lead to the contract being exploited to drain funds or to perform actions at a different time than intended. 
",892,49,1.997614860534668
130,time manipulation,"NO 
",528,4,0.2217559814453125
131,time manipulation,"NO 
",678,4,0.23202180862426758
132,short addresses,"YES
 
The `canTransfer` function is vulnerable to a reentrancy attack.  
",716,22,0.9305379390716553
133,denial of service,"YES
 
The contract's `canTransfer` function returns `true` for all addresses, regardless of the actual logic. This means that the contract can be exploited to transfer funds without any checks or restrictions. 
",681,47,1.912069320678711
134,denial of service,"YES
 
The contract's `canTransfer` function is vulnerable to denial of service attacks.  The function returns `true` for all calls, regardless of the input. This means that an attacker could continuously call the function and consume resources without any actual transfer of funds. 
",812,60,2.430016040802002
135,denial of service,"YES
 
The contract's `canTransfer` function is vulnerable to denial of service attacks.  The function returns `true` for all calls, which means that the contract can be exploited to perform actions that it is not intended to. 
",2041,53,2.2410056591033936
136,denial of service,"NO 
",701,4,0.23176312446594238
137,denial of service,"YES
 
The contract's `canTransfer` function returns `true` regardless of the input addresses. This means that the contract can be exploited to transfer funds to any address, even if the `canTransfer` function is not intended to be used for that purpose. 
",540,59,2.3620431423187256
138,denial of service,"NO 
",512,4,0.22139215469360352
