case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"YES
 
The `newOwner` function allows anyone to set themselves as the owner of the contract. This is a classic access control vulnerability.  
",929,33,1.368819236755371
12,access control,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",625,37,1.5121147632598877
13,access control,"YES
The contract uses `msg.sender` to determine the owner. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",2867,38,1.7182345390319824
14,access control,"NO 
",800,4,0.24144554138183594
15,access control,"YES
 
The contract uses the `msg.sender` to determine the owner. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",639,41,1.6718790531158447
16,access control,"NO 
",739,4,0.23617768287658691
17,access control,"NO 
",587,4,0.2182331085205078
18,access control,"NO 
",830,4,0.2396392822265625
19,access control,"NO 
",625,4,0.22653722763061523
20,access control,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has finished executing. 
* **Potential for Loss:**  This could lead to the attacker draining funds from the contract. 


",821,118,4.673065900802612
21,access control,"NO 
",582,4,0.22645950317382812
22,access control,"NO 
",850,4,0.2409076690673828
23,access control,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",525,37,1.5108909606933594
24,access control,"YES
 
The `Airdropper` contract uses the `multisend` function to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",633,39,1.5811052322387695
25,access control,"NO 
",604,4,0.22850394248962402
26,access control,"YES
 
The contract uses `fibonacciLibrary.delegatecall` to execute external functions. This is a common vulnerability, as it can be exploited to call arbitrary functions on the contract. 
",1109,42,1.7343835830688477
27,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each recipient.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has finished. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy.  This means that an attacker could potentially drain the contract's funds. 


",1427,140,5.541736125946045
28,unchecked low level calls,"YES
 
The `tokens_buy` function calls `transferFrom` with a potentially malicious `owner` address. This is a common vulnerability, as it allows an attacker to drain funds from the contract. 
",1622,46,1.9272050857543945
29,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any built-in error handling. If the `transfer` function fails, the contract will not revert. This can lead to a loss of funds for the contract owner. 
",1125,79,3.174712657928467
30,unchecked low level calls,"YES
 
The code has several vulnerabilities:

* **Unchecked Return Values:** The `claimThrone` function doesn't check the return value of `msg.sender.send(valuePaid)`. This can lead to unexpected behavior and potential loss of funds.
* **Low Level Function Calls:** The `claimThrone` function uses `msg.sender.send(valuePaid)` and `msg.sender.send(excessPaid)`. These functions are low-level and can be vulnerable to reentrancy attacks.
* **Unprotected Access Control:** The `transferOwnership` function is not restricted to the owner. This could allow an attacker to change the contract's ownership. 
* **Reentrancy Attacks:** The `claimThrone` function could be vulnerable to reentrancy attacks. 
* **Arithmetic Overflows and Underflows:** The code does not handle arithmetic overflows and underflows well. 
* **Randomness:** The code does not use a secure way to generate randomness. 



",2517,213,8.449287176132202
31,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can lead to reentrancy attacks if an attacker can call the `multisend` function multiple times. 
",704,57,2.285203218460083
32,unchecked low level calls,"YES
 
The `cash` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `cash` function calls `winner.send(subpot)` which is a function call.  This function call can be re-entered by an attacker.
* **Potential for Unintended Execution:**  The attacker can potentially execute the `cash` function multiple times, leading to unintended execution and potentially draining funds. 


",2649,99,4.0629754066467285
33,unchecked low level calls,"NO 
",561,4,0.22876214981079102
34,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any checks for the validity of the `to` and `value` parameters. This can lead to a reentrancy attack. 
",893,62,2.4873387813568115
35,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  
* **Potential for Reentrancy:**  If an attacker can call the `multisend` function multiple times in rapid succession, they could potentially drain the contract's funds before the `ERC20` contract's `transfer` function completes. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy. 


",1597,147,5.8894383907318115
36,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling for the `ERC20` contract. If the `ERC20` contract fails to transfer the tokens, the `multisend` function will continue to execute. 
",1496,73,2.975574254989624
37,unchecked low level calls,"YES

The `multisend` function calls `ERC20`'s `transfer` function with a potentially large number of addresses and values. This could lead to a reentrancy attack if an attacker can call the `multisend` function multiple times before the `ERC20` transfer completes. 
",879,65,2.613013505935669
38,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling. If the `transfer` function fails, the contract will not revert. 
",1524,54,2.2335474491119385
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can be exploited.  The `call.value` function can be used to send a value to a contract, and the `gas` function can be used to set the gas limit for the transaction.  These functions can be used to send a large amount of gas to a contract, which can be used to drain the contract of funds. 
",2444,97,3.9509851932525635
40,unchecked low level calls,"YES
 
 The `execute` function in the `Marriage` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors.  This means an attacker could potentially execute malicious code, leading to a variety of attacks. 
",1957,77,3.1355955600738525
41,unchecked low level calls,"YES
 
The `execute` function in the `WedIndex` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors. This means an attacker could potentially execute malicious code, leading to a variety of attacks. 
",1297,77,3.0899572372436523
42,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  
* **Potential for Reentrancy:**  If an attacker can call the `multisend` function multiple times in rapid succession, they could potentially drain the contract's funds. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy. 


",1567,132,5.293930292129517
43,unchecked low level calls,"YES
 
 The `multisend` function in the `Airdropper` contract allows for sending tokens to multiple addresses.  This function is vulnerable to reentrancy attacks.  The attacker can call the `multisend` function repeatedly, potentially draining the contract's funds. 
",683,62,2.480381727218628
44,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has finished executing. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy attacks. 
* **Potential for Loss:**  If an attacker can re-enter the `multisend` function multiple times, they could drain the contract's funds. 


",1125,162,6.376265287399292
45,unchecked low level calls,"YES
 
The `execute` function in the `TokenSender` contract calls the target contract (`_dst`) with the provided value and data.  However, the `_dst.call.value(_value)(_data)` call is a low-level function that does not propagate errors. This means that if the call fails, the contract will continue to execute the next line of code, potentially leading to unexpected behavior and vulnerabilities. 
",1925,92,3.7437164783477783
46,unchecked low level calls,"NO 
",598,4,0.22491669654846191
47,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling. If the `transfer` function fails, the contract will not revert. 
",1440,54,2.220581293106079
48,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can be a vulnerability if the `transfer` function is not properly implemented, as it could allow an attacker to drain the contract of funds. 
",708,64,2.555910110473633
49,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  
* **Potential for Reentrancy:**  If an attacker can call the `multisend` function multiple times in rapid succession, they could potentially drain the contract's funds. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy. 


",1603,132,5.266449689865112
50,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  
* **Potential for Reentrancy:**  If an attacker can call the `multisend` function multiple times in rapid succession, they could potentially drain the contract's funds. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy. 


",1603,132,5.278197765350342
51,unchecked low level calls,"YES
 
The `sendMoney` function uses `_target.call.value(_value)(_data)` which is a low-level call.  This function does not propagate errors, meaning if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",777,66,2.6225850582122803
52,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token with a potentially large number of addresses and values. This can lead to a reentrancy attack if an attacker can call the `transfer` function multiple times within a short time frame. 
",1040,71,2.856252670288086
53,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",687,37,1.5064785480499268
54,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can be a vulnerability if the `transfer` function is not properly implemented, as it could allow an attacker to drain the contract of funds. 
",706,64,2.568427562713623
55,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  
* **Potential for Reentrancy:**  If an attacker can call the `multisend` function multiple times in rapid succession, they could potentially drain the contract's funds. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy. 


",1563,132,5.272944688796997
56,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",704,37,1.5114622116088867
57,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any checks for the amount of tokens to be transferred. This can lead to a vulnerability where an attacker can transfer more tokens than the contract allows. 
",971,65,2.6095352172851562
58,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can be a vulnerability if the `transfer` function is not properly implemented, as it could allow an attacker to drain the contract of funds. 
",708,64,2.5508968830108643
59,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  
* **Potential for Reentrancy:**  If an attacker can call the `multisend` function multiple times in rapid succession, they could potentially drain the contract's funds. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy. 


",1567,132,5.265109300613403
60,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token contract.  This function does not check the return value of the `transfer` function. If the `transfer` function fails, the contract will continue to execute, potentially leading to a loss of funds. 
",507,75,2.976867198944092
61,unchecked low level calls,"YES
 
The `callFirstTarget` and `callSecondTarget` functions call external contracts with `msg.value` as the argument. This can lead to reentrancy attacks, as the attacker can repeatedly call the function and drain the contract of funds. 
",2334,57,2.407583713531494
62,unchecked low level calls,"YES

The `addr.call.value(0 wei)();` line is vulnerable to reentrancy attacks.  It allows an attacker to repeatedly call the function and drain the contract of funds. 
",814,43,1.751702070236206
63,unchecked low level calls,"YES

The `multisend` function in the `Airdropper` contract uses `ERC20` transfer function to send tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `multisend` function doesn't explicitly handle reentrancy.  
* **Potential for Reentrancy:**  An attacker could call `multisend` multiple times, each time attempting to transfer tokens to different addresses. 
* **Uncontrolled Execution:** The `ERC20` transfer function doesn't have any built-in safeguards against reentrancy. 
* **Vulnerability:**  The attacker could potentially execute multiple calls to `multisend` in a loop, draining the contract's funds. 


",815,167,6.549407720565796
64,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any checks for the amount of tokens to be transferred. This can lead to a vulnerability where an attacker can transfer more tokens than the contract allows. 
",969,65,2.6194701194763184
65,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",749,35,1.4448285102844238
66,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling. If the `transfer` function fails, the contract will not revert. 
",1524,54,2.237703323364258
67,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function.  This function is susceptible to reentrancy because it doesn't handle the possibility of a contract calling itself again. 
* **Potential for Exploits:**  An attacker could call `multisend` multiple times, each time attempting to transfer tokens to different addresses.  The attacker could then call the `multisend` function again, potentially draining the contract's funds. 


",1511,142,5.654972076416016
68,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token contract. This function is vulnerable because it does not check the return value of the `transfer` function. If the `transfer` function fails, the contract will continue to execute, potentially leading to a loss of funds. 
",648,78,3.097633123397827
69,unchecked low level calls,"YES

The `multisend` function in the `Airdropper` contract uses `ERC20` transfer function to send tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `multisend` function doesn't explicitly handle reentrancy.  
* **Potential for Reentrancy:**  An attacker could call `multisend` multiple times, each time attempting to transfer tokens to different addresses. 
* **Uncontrolled Execution:** The `ERC20` transfer function doesn't have any built-in safeguards against reentrancy. 
* **Vulnerability:**  The attacker could potentially execute multiple calls to `multisend` in a loop, draining the contract's funds. 


",817,167,6.560271501541138
70,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can be a vulnerability if the `transfer` function is not properly implemented, as it could allow an attacker to drain the contract of funds. 
",712,64,2.566850185394287
71,unchecked low level calls,"YES
 
The `sendMoney` function uses `_target.call.value(_value)`. This is a low-level function call that doesn't propagate errors.  It's possible for the call to fail, and the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",760,69,2.7534942626953125
72,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any checks for the amount of tokens to be transferred. This can lead to a vulnerability where an attacker can transfer more tokens than the contract allows. 
",969,65,2.6106021404266357
73,front running,"NO 
",759,4,0.24007749557495117
74,front running,"NO 
",701,4,0.23366236686706543
75,front running,"NO 
",2097,4,0.3400998115539551
76,front running,"NO 
",1014,4,0.26493167877197266
77,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the values being transferred. If the values are too large, they could overflow the `uint256` data type, leading to unexpected behavior and potential loss of funds. 
",515,93,3.6836652755737305
78,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract uses a loop to transfer tokens to multiple addresses.  This loop could potentially lead to integer overflows if the values being transferred are too large. 
",480,50,2.0053467750549316
79,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract uses a loop to transfer tokens to multiple addresses.  This loop could potentially lead to integer overflows if the `values` array is not carefully managed. 
",472,52,2.06270170211792
80,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the input values for potential overflows. If the `values` array contains a large number, it could lead to an overflow in the `ERC20` contract's transfer function. 
",480,95,3.7417776584625244
81,arithmetic,"NO 
",763,4,0.2368149757385254
82,arithmetic,"NO 
",868,4,0.24052691459655762
83,arithmetic,"YES

The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function does not check the input values, which could lead to integer overflows. 
",586,56,2.23533034324646
84,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the input values for potential overflows. If the `values` array contains a large number, it could lead to an overflow in the `ERC20` contract's transfer function. 
",493,95,3.7526934146881104
85,arithmetic,"YES

The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function does not have any checks for overflow or underflow. If the `values` array is large enough, it could lead to an overflow in the `ERC20` contract's transfer function. 
",568,82,3.2365355491638184
86,arithmetic,"YES
 
The contract uses unsigned integers for its state variables and functions.  This makes it vulnerable to integer overflows and underflows.  The `multisend` function transfers tokens to multiple addresses, and the `ERC20` contract is used to transfer tokens.  The `ERC20` contract is not audited, so it is possible that it is vulnerable to integer overflows and underflows. 
",883,85,3.378420114517212
87,arithmetic,"NO 
",720,4,0.23270869255065918
88,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the input values for potential overflows. If the `values` array contains a large number, it could lead to an overflow in the `ERC20` contract's transfer function. 
",480,95,3.732386827468872
89,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract transfers tokens to multiple addresses.  This function is vulnerable to a reentrancy attack. 
",500,40,1.612731695175171
90,arithmetic,"NO 
",562,4,0.2272021770477295
91,bad randomness,"NO 
",872,4,0.2502572536468506
92,bad randomness,"YES
 
The code uses `block.number` to generate random numbers for the `chooseWinner` function. This is a major security vulnerability.  The `block.number` is predictable and can be manipulated by miners. This means that the random numbers generated by the contract are not truly random, and can be exploited by attackers. 
",2727,72,3.014878749847412
93,bad randomness,"YES
The code uses a function `rand` that relies on the block hash and a constant factor. This makes it susceptible to attacks where the attacker can manipulate the block hash to influence the random number. 
",3066,44,1.9676337242126465
94,bad randomness,"NO 
",1030,4,0.26035332679748535
95,bad randomness,"YES
 
The contract uses `keccak256` to generate a random number, but it's vulnerable to predictable attacks. The `block.blockhash` and `block.number` values are predictable, and the `keccak256` function can be manipulated to produce a predictable result. 
",723,68,2.7106640338897705
96,bad randomness,"YES
 
The contract uses the `block.timestamp` for the `salt` variable, which is a predictable source of randomness. This makes the random number generator susceptible to attacks. 
",815,41,1.681983470916748
97,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution Flow:** The code doesn't clearly define how the `Collect` function interacts with the external contract. 
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times, potentially draining funds from the contract. 


",1295,114,4.531056642532349
98,reentrancy,"YES
 
The `multisend` function in the `Airdropper` contract allows an attacker to potentially drain funds from the contract. This is because the `multisend` function does not have any checks to prevent an attacker from sending large amounts of tokens to multiple addresses. 
",835,61,2.468916893005371
99,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1369,47,1.9463543891906738
100,reentrancy,"YES
 
The `multisend` function allows an attacker to potentially drain funds from the contract.  The function calls `ERC20(_tokenAddr).transfer` for each address in the `dests` array.  This means that an attacker could potentially send a large amount of tokens to the contract's `dests` array. 
",742,74,2.940222978591919
101,reentrancy,"YES
 
The `multisend` function allows an attacker to potentially drain funds from the contract.  The function calls `ERC20(_tokenAddr).transfer` for each address in the `dests` array.  This means that an attacker could potentially send a large amount of tokens to the contract's `dests` array. 
",685,74,2.948514223098755
102,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Reentrancy Vulnerability:**  This allows an attacker to repeatedly call the `Collect` function before the initial execution is complete, potentially draining funds. 


",1291,92,3.6876778602600098
103,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining funds. 
* **Lack of Safeguards:** The code doesn't include any safeguards to prevent multiple calls or to handle the potential for reentrancy. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1525,127,5.055778741836548
104,reentrancy,"YES
 
The contract has a reentrancy vulnerability in the `multisend` function.  The function allows for multiple transfers to different addresses, which can be exploited by a malicious actor to drain funds. 
",798,46,1.8799495697021484
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function multiple times in rapid succession, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1517,132,5.256669759750366
106,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **Unrestricted External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any safeguards to prevent this type of attack. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1467,123,4.935211896896362
107,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1295,114,4.547644138336182
108,reentrancy,"YES
 
The `multisend` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `multisend` function calls the ERC20 token contract (`ERC20(_tokenAddr).transfer`) to transfer tokens. 
* **Potential for Reentrancy:**  An attacker could call `multisend` multiple times, each time attempting to transfer tokens to different addresses.  The function doesn't handle the possibility of a reentrancy attack. 
* **Uncontrolled Execution:** The `ERC20` contract's transfer function is executed in a way that allows for reentrancy. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1409,159,6.287067174911499
109,reentrancy,"YES

The contract uses the `airDrop` function, which is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `airDrop` function allows an attacker to call it repeatedly before the initial execution is complete. 
* **Potential for Exploitation:**  This allows the attacker to drain the contract of funds. 
* **Example:** An attacker could call `airDrop` multiple times in quick succession, potentially draining the contract's funds. 


",1010,106,4.227888822555542
110,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **Unrestricted External Calls:** The `CashOut` function allows external calls to the contract's `msg.sender` address.
* **Potential for Reentrancy:**  An attacker could call `CashOut` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any checks to prevent multiple calls or to ensure that the `msg.sender` address has sufficient funds. 


",1255,122,4.869226932525635
111,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining funds. 
* **Lack of Safeguards:** The code doesn't include any safeguards to prevent multiple calls or to handle the potential for reentrancy. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1459,127,5.045901775360107
112,reentrancy,"YES
 
The `multisend` function in the `Airdropper` contract allows for the transfer of tokens to multiple addresses. This function is vulnerable to reentrancy attacks because it allows the attacker to call the `multisend` function multiple times, potentially draining the contract's funds. 
",723,65,2.6047723293304443
113,reentrancy,"YES

The `withdrawBalance` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Call:** The `withdrawBalance` function uses `msg.sender.call.value(amountToWithdraw)()` to transfer funds. This means the contract is making an external call to the `msg.sender` address.
* **Potential Reentrancy:**  An attacker could call `withdrawBalance` multiple times in rapid succession, potentially draining the contract's funds. 
* **Unprotected Call:** The `withdrawBalance` function does not have any checks to prevent this. 


",714,129,5.072719097137451
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1213,47,1.9365026950836182
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows for reentrancy attacks.  This line allows an attacker to call the contract again before the initial execution is complete. 
",1209,48,1.9737701416015625
116,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1287,114,4.529007911682129
117,reentrancy,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",767,37,1.5138580799102783
118,reentrancy,"YES
 
The `withdrawBalance` function is vulnerable to reentrancy attacks.  The `if` statement allows an attacker to call the `withdrawBalance` function repeatedly, draining the contract's funds. 
",710,47,1.8991875648498535
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1317,47,1.9394125938415527
120,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `CashOut` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  An attacker could call `CashOut` multiple times in rapid succession, potentially draining the contract's funds. 
* **Unclear Execution:** The code doesn't specify how the external contract is executed, making it difficult to determine if it's truly safe from reentrancy. 


",1183,132,5.215206146240234
121,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1363,47,1.947216510772705
122,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `if(msg.sender.call.value(_am)())` line allows an attacker to call the `CashOut` function repeatedly, potentially draining the contract's funds.
* **Reentrancy Vulnerability:**  The `if` statement allows the attacker to call the `CashOut` function again before the initial execution is complete. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1197,125,4.954106330871582
123,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1291,114,4.546305894851685
124,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `CashOut` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  An attacker could call `CashOut` multiple times in rapid succession, potentially draining the contract's funds. 
* **Unclear Execution:** The code doesn't specify how the external contract is executed, making it difficult to determine if it's truly safe from reentrancy. 


",1183,132,5.24184250831604
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1367,47,1.9438824653625488
126,reentrancy,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks because it allows the owner to call the `withdrawBalance` function again before the initial execution is complete. 
",654,57,2.2845022678375244
127,time manipulation,"NO 
",556,4,0.22412919998168945
128,time manipulation,"YES
 
The contract relies heavily on `block.timestamp` for its functionality, making it susceptible to manipulation by miners. This is a classic vulnerability, as miners can potentially alter the timestamp to their advantage. 
",827,46,1.8613276481628418
129,time manipulation,"YES
 
The `lastInvestmentTimestamp` variable is set to the current block timestamp, making it susceptible to manipulation by miners. This could allow an attacker to manipulate the timestamp and potentially gain control of the contract. 
",1039,47,1.9996562004089355
130,time manipulation,"YES
 
The contract uses `now` to determine the current time, which is susceptible to manipulation by miners. This can lead to the contract being exploited. 
",675,36,1.4724047183990479
131,time manipulation,"YES
 
The contract uses `block.timestamp` to generate a random number. This is vulnerable because miners can manipulate the timestamp, potentially leading to unfair outcomes. 
",825,37,1.5769927501678467
132,short addresses,"YES
 
The contract uses the `multisend` function which allows the owner to send tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",863,37,1.5280799865722656
133,denial of service,"YES
 
The contract's `addCreditors` function adds a large number of addresses to the `creditorAddresses` array. This could be exploited to cause a denial of service attack by flooding the contract with unnecessary calls. 
",828,51,2.0649893283843994
134,denial of service,"YES
 
The contract's `multisend` function allows an attacker to potentially drain funds from the contract.  This is because the function doesn't have any checks to ensure the provided `dests` and `values` are valid.  An attacker could send a large number of transactions to the contract, potentially draining the funds. 
",959,73,2.920700788497925
135,denial of service,"YES
 
The code has a vulnerability related to the `creditorAddresses` and `creditorAmounts` arrays.  These arrays are initialized with `new address[](0)` and `new uint[](0)`, respectively. This means that the arrays are empty, and therefore, there is no way to track the creditor addresses and amounts. 

This can be exploited by an attacker to drain the contract of funds. 
",2188,89,3.661703586578369
136,denial of service,"YES
 
The contract's `multisend` function allows an attacker to potentially drain funds from the contract.  The function does not have any checks to prevent an attacker from sending large amounts of tokens to the contract. 
",848,49,1.991450548171997
137,denial of service,"YES
 
The contract's `multisend` function uses the `ERC20` contract to transfer tokens. This can be exploited by an attacker to drain funds from the contract. 
",687,42,1.705451250076294
138,denial of service,"YES
 
The contract uses the `send` function to transfer funds. This function is vulnerable to reentrancy attacks. 
",659,29,1.2043488025665283
