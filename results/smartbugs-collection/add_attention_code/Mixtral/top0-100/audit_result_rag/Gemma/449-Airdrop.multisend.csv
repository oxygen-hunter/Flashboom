case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"YES
 
The `multisend` function in the `Airdrop` contract allows an attacker to send tokens to multiple addresses without any checks or restrictions. This is a classic example of a reentrancy attack. 
",970,48,1.9579036235809326
12,access control,"YES
 
The contract uses the `multisend` function which allows the owner to send tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",666,37,1.519577980041504
13,access control,"YES
The contract uses `msg.sender` to determine the owner. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",2908,38,1.7295997142791748
14,access control,"YES
 
The `multisend` function in the `Airdrop` contract allows for the transfer of tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",841,41,1.6753103733062744
15,access control,"YES
 
The contract uses the `msg.sender` to determine the owner. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",680,41,1.6750762462615967
16,access control,"YES
 
The `multisend` function in the `Airdrop` contract allows an attacker to potentially drain funds from the contract. This is because the `multisend` function does not have any checks to ensure that the `_to` and `_value` arrays are valid. 
",780,63,2.5250165462493896
17,access control,"YES
 
The `Airdrop` contract uses `multisend` function to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",628,37,1.5147974491119385
18,access control,"NO 
",871,4,0.2483053207397461
19,access control,"YES
 
The `Airdrop` contract uses the `multisend` function to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",666,38,1.5565931797027588
20,access control,"YES
 
The `multisend` function in the `Airdrop` contract allows for the transfer of tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",862,41,1.6760175228118896
21,access control,"YES

The contract uses the `tx.origin` modifier to ensure only the contract owner can call the `sendTo` function. This is a common vulnerability, as it can be bypassed by attackers. 
",623,43,1.7382915019989014
22,access control,"NO 
",891,4,0.25070619583129883
23,access control,"YES
 
The `Airdrop` contract has a potential vulnerability related to the `multisend` function.  The function allows the owner to transfer tokens to multiple addresses.  This could be exploited by an attacker to drain funds from the contract. 
",566,55,2.215477228164673
24,access control,"YES
 
The `Airdrop` contract uses the `multisend` function to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",674,38,1.5599989891052246
25,access control,"YES
 
The `Airdrop` contract uses `multisend` function to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",645,37,1.5066282749176025
26,access control,"YES
 
The contract uses `fibonacciLibrary.delegatecall` to execute external functions. This is a common vulnerability, as it can be exploited to call arbitrary functions on the contract. 
",1150,42,1.7383396625518799
27,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `transfer` function of the `Token` contract.  The `transfer` function is susceptible to reentrancy because it doesn't handle the possibility of a reentrancy attack. 
* **Potential for Exploiting:**  An attacker could call the `multisend` function multiple times in rapid succession, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1468,142,5.649662971496582
28,unchecked low level calls,"YES
 
The `tokens_buy` function calls `transferFrom` with a potentially malicious `owner` and `msg.sender` address. This is a classic reentrancy vulnerability. 
",1663,43,1.8215415477752686
29,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract allows for sending tokens to multiple addresses.  This function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function doesn't explicitly check for reentrancy.  An attacker could call the function multiple times in rapid succession, potentially draining the contract's funds. 
* **Lack of Safeguards:** The function doesn't include any safeguards to prevent reentrancy. 
* **Potential for Exploits:**  The vulnerability allows an attacker to exploit the contract by repeatedly calling the `multisend` function. 


",1166,143,5.669117212295532
30,unchecked low level calls,"YES
 
The `claimThrone` function is vulnerable to reentrancy attacks. 
 
Here's why:
 
* **Reentrancy:** The `claimThrone` function allows for external contract calls before resolving any effects. 
* **Potential for Exploitation:** An attacker could call `claimThrone` repeatedly, potentially draining funds from the contract. 
* **Lack of Safeguards:** The code lacks any safeguards to prevent reentrancy. 


",2558,103,4.215916156768799
31,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the `Token` contract for each address in the `_to` array. This is a potential vulnerability because the `transfer` function of the `Token` contract is not explicitly checked for its behavior. 

The `transfer` function of the `Token` contract is not explicitly checked for its behavior. 
",745,80,3.2047393321990967
32,unchecked low level calls,"YES
 
The `cash` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `cash` function calls `winner.send(subpot)` which is a function call.  This function call can be re-entered by the attacker.
* **Potential for Unintended Execution:**  The attacker can potentially execute the `cash` function multiple times, leading to unintended execution and potentially draining funds. 


",2690,99,4.087343692779541
33,unchecked low level calls,"YES

The `multisend` function in the `Airdrop` contract calls the `transfer` function of the `Token` contract.  The `transfer` function does not have any checks for the `value` parameter. This means that an attacker could send a large amount of tokens to the contract, potentially causing a loss of funds. 
",602,73,2.9204134941101074
34,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the `Token` contract.  The `transfer` function in the `Token` contract is not explicitly designed to handle multiple transfers. This can lead to unexpected behavior and potential vulnerabilities. 
",934,55,2.2231431007385254
35,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function allows multiple transactions to be executed in a single call. This creates a window of opportunity for an attacker to call the function again before the first transaction is completed.
* **Potential for Manipulation:**  The attacker could potentially call the `multisend` function multiple times, each time attempting to transfer funds to different addresses. 
* **Unintended Consequences:**  The attacker could potentially drain funds from the contract or manipulate the contract's state in unintended ways. 


",1638,142,5.662208795547485
36,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function allows multiple transactions to be executed in a single call. This creates a window of opportunity for an attacker to call the function again before the first transaction is completed.
* **Potential for Manipulation:**  The attacker could potentially call the `multisend` function multiple times, each time attempting to transfer funds to different addresses. 
* **Unpredictable Execution:** The `multisend` function doesn't handle the execution of multiple transactions in a controlled manner. 


Let me know if you'd like to explore other aspects of smart contract security. 
",1537,161,6.39613151550293
37,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract calls the `transfer` function of the `Token` contract with multiple addresses and values.  This is a potential vulnerability because the `transfer` function in the `Token` contract is not explicitly designed to handle multiple transfers.  This could lead to unexpected behavior or even a denial of service attack. 
",920,81,3.236844778060913
38,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `transfer` function of the `Token` contract.  The `transfer` function is susceptible to reentrancy because it doesn't handle the possibility of a reentrancy attack. 
* **Potential for Exploiting:**  An attacker could call `multisend` multiple times, each time attempting to transfer funds to a different address.  The attacker could then call `multisend` again, and again, and again, draining the contract's funds. 


",1565,146,5.8398377895355225
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can be exploited.  The `call.value` function can be used to send a value to an address, and the `gas` function can be used to set the gas limit for the transaction.  These functions can be used to send a large amount of gas to an address, which can be used to drain the contract of funds. 
",2485,97,3.968477487564087
40,unchecked low level calls,"YES
 
The `execute` function in the `Marriage` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors.  This means an attacker could potentially execute malicious code, leading to a variety of attacks. 
",1998,77,3.1539008617401123
41,unchecked low level calls,"YES
 
The `execute` function in the `WedIndex` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors. This means an attacker could potentially execute malicious code, leading to a variety of attacks. 
",1338,77,3.101783514022827
42,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function allows multiple transactions to be sent to different addresses simultaneously. This creates a window of opportunity for an attacker to call the `multisend` function again before the first transaction is completed. 
* **Potential for Exploitation:**  An attacker could exploit this by calling `multisend` multiple times, each time attempting to transfer funds to a different address. This could lead to a loss of funds for the contract owner. 


",1608,132,5.2776265144348145
43,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract allows for sending tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `multisend` function doesn't explicitly check for reentrancy. 
* **Potential for Manipulation:** An attacker could call `multisend` multiple times, potentially draining the contract's funds. 
* **Lack of Safeguards:** The function doesn't include any safeguards to prevent reentrancy. 


",724,119,4.684491872787476
44,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract allows for sending tokens to multiple addresses.  This function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function doesn't explicitly check for reentrancy.  An attacker could call the function multiple times in rapid succession, potentially draining the contract's funds. 
* **Lack of Safeguards:** The function doesn't include any safeguards to prevent reentrancy. 
* **Potential for Exploits:**  The vulnerability allows an attacker to exploit the contract by repeatedly calling the `multisend` function. 


",1166,143,5.669372081756592
45,unchecked low level calls,"YES
 
The `execute` function in the `TokenSender` contract calls the target contract (`_dst`) with the provided value and data.  However, the `_dst.call.value(_value)(_data)` call is a low-level function that does not propagate errors. This means that if the call fails, the contract will continue to execute without any indication of the failure. This can lead to unexpected behavior and potential vulnerabilities. 
",1966,95,3.848803758621216
46,unchecked low level calls,"YES

The `multisend` function in the `Airdrop` contract allows for sending tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `multisend` function doesn't explicitly check for reentrancy. 
* **Potential for Exploits:** An attacker could call the `multisend` function multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The function doesn't include any safeguards to prevent reentrancy. 


",639,124,4.87067985534668
47,unchecked low level calls,"YES
 
The `WithdrawToken` function in the `TokenBank` contract calls the `token.call` function. This function is vulnerable because it does not handle errors. If the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",1481,65,2.6649489402770996
48,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the `Token` contract for each address in the `_to` array. This is a potential reentrancy vulnerability. 

Here's why:

* **Reentrancy:**  The `multisend` function calls the `transfer` function of the `Token` contract for each address in the `_to` array. This means that an attacker could potentially call the `multisend` function multiple times, each time attempting to transfer funds from the contract to the attacker's address. 
* **Uncontrolled Execution:** The `transfer` function of the `Token` contract is not designed to handle reentrancy attacks. 
* **Potential for Loss:** If an attacker can successfully re-enter the `multisend` function, they could potentially drain the contract of funds. 


",749,181,7.105807781219482
49,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function allows multiple transactions to be executed in a single call. This creates a window of opportunity for an attacker to call the function again before the first transaction is completed.
* **Potential for Manipulation:**  The attacker could potentially call the `multisend` function multiple times, each time attempting to transfer funds to different addresses. 
* **Unintended Consequences:**  The attacker could potentially drain funds from the contract or manipulate the contract's state in unintended ways. 


",1644,142,5.6550164222717285
50,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call that doesn't propagate errors. This means that if the `call` operation fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",1644,67,2.7554006576538086
51,unchecked low level calls,"YES
 
The `sendMoney` function in the `SimpleWallet` contract uses `_target.call.value(_value)(_data)` which is a low-level function call. This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",818,74,2.9524381160736084
52,unchecked low level calls,"YES
 
The `caddress.call` function is vulnerable to reentrancy attacks.  The `caddress.call` function does not have any checks for reentrancy. 
",1081,42,1.7386012077331543
53,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract allows for sending tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",728,39,1.595740556716919
54,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the `Token` contract for each address in the `_to` array. This is a potential reentrancy vulnerability. 

Here's why:

* **Reentrancy:**  The `multisend` function calls the `transfer` function of the `Token` contract for each address in the `_to` array. This means that an attacker could potentially call the `multisend` function multiple times, each time attempting to transfer funds from the contract to the attacker's address. 
* **Uncontrolled Execution:** The `transfer` function of the `Token` contract is not designed to handle reentrancy attacks. 
* **Potential for Loss:** If an attacker can successfully re-enter the `multisend` function, they could potentially drain the contract of funds. 


",747,181,7.078926086425781
55,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function allows multiple transfers to be made to different addresses.  
* **Potential for Reentrancy:**  If an attacker can call the `multisend` function multiple times within a short time frame, they could potentially drain the contract's funds. 
* **Lack of Safeguards:** The function doesn't include any safeguards to prevent reentrancy. 


",1604,122,4.898360967636108
56,unchecked low level calls,"YES
 
The contract uses `fuck.call(bytes4(sha3(""giveBlockReward()"")));`  This line calls a function on the `fuck` address.  The `fuck` address is not defined, and the `giveBlockReward()` function is not defined. This is a potential vulnerability because it allows an attacker to call any function on the `fuck` address. 
",745,83,3.300520181655884
57,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract allows for sending tokens to multiple addresses.  The function does not check the input addresses or the amount of tokens being sent. This can lead to a reentrancy attack, where an attacker can send a large amount of tokens to multiple addresses, draining the contract's funds. 
",1012,77,3.091129779815674
58,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the `Token` contract for each address in the `_to` array. This is a potential reentrancy vulnerability. 

Here's why:

* **Reentrancy:**  The `multisend` function calls the `transfer` function of the `Token` contract for each address in the `_to` array. This means that an attacker could potentially call the `multisend` function multiple times, each time attempting to transfer funds from the contract to the attacker's address. 
* **Uncontrolled Execution:** The `transfer` function of the `Token` contract is not designed to handle reentrancy attacks. 
* **Potential for Loss:** If an attacker can successfully re-enter the `multisend` function, they could potentially drain the contract of funds. 


",749,181,7.082395553588867
59,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function allows multiple transactions to be sent to different addresses simultaneously. This creates a window of opportunity for an attacker to call the `multisend` function again before the first transaction is completed.
* **Potential for Exploitation:**  An attacker could exploit this by calling `multisend` multiple times, each time attempting to transfer funds to a different address. This could lead to a loss of funds for the contract owner. 


",1608,131,5.250049591064453
60,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract allows for the transfer of tokens to multiple addresses.  This function does not have any checks for the validity of the addresses or the amounts being transferred.  This can lead to a number of vulnerabilities, including:

* **Reentrancy:** An attacker could call the `multisend` function multiple times in a loop, potentially draining the contract's funds.
* **Overflow:** The `_value` array could contain values that exceed the maximum allowed for the `Token` contract's transfer function. 
* **Unchecked Return Values:** The `Token` contract's transfer function may return a boolean value indicating success or failure. If these return values are not checked, it can lead to vulnerabilities. 
* **Unintended Behavior:** The `multisend` function could be used to transfer funds to malicious addresses, leading to unintended consequences. 


",548,194,7.621485233306885
61,unchecked low level calls,"YES
 
The contract uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning they will not revert the current execution. This can lead to unexpected behavior and vulnerabilities. 
",2375,53,2.2523229122161865
62,unchecked low level calls,"YES

The `getTokens` function calls `addr.call.value(0 wei)();` which is a low-level function call. This function call does not propagate errors and can lead to unexpected behavior. 
",855,46,1.8672704696655273
63,unchecked low level calls,"YES

The `multisend` function in the `Airdrop` contract allows for sending tokens to multiple addresses.  The function does not check the validity of the addresses or the values being sent. This can lead to a variety of vulnerabilities, including:

* **Reentrancy:** An attacker could call the `multisend` function multiple times in a loop, potentially draining the contract's funds.
* **Overflow:** The `_value` array could contain values that exceed the maximum allowed for the `Token` contract's transfer function. 
* **Unchecked Return Values:** The `Token` contract's transfer function does not return a boolean value indicating success or failure. This can lead to unexpected behavior and potential vulnerabilities. 


",856,154,6.087801456451416
64,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract allows for sending tokens to multiple addresses.  The function does not check the validity of the addresses or the amounts being sent. This can lead to a variety of vulnerabilities, including:

* **Reentrancy:** An attacker could call the `multisend` function repeatedly, potentially draining the contract's funds.
* **Overflow:** The `_value` array could contain values that exceed the maximum allowed for the `Token` contract's transfer function. 
* **Unchecked Return Values:** The `Token` contract's transfer function may return a boolean value indicating success or failure. If these return values are not checked, it can lead to vulnerabilities. 
* **Unintended Behavior:** The function could be used to send tokens to malicious addresses, leading to unintended consequences. 


",1010,180,7.074156761169434
65,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the `Token` contract for each address in the `_to` array.  This is a potential reentrancy vulnerability.  The `transfer` function of the `Token` contract is not designed to handle reentrancy attacks. 
",790,66,2.6321041584014893
66,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `transfer` function of the `Token` contract.  The `transfer` function is susceptible to reentrancy because it doesn't handle the possibility of a reentrancy attack. 
* **Potential for Exploiting:**  An attacker could call the `multisend` function multiple times in rapid succession, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1565,142,5.692354679107666
67,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling `adr.call.value(msg.value)(data)`. This is a classic example of a reentrancy vulnerability.  The `call` function does not have any checks for the return value, so an attacker could potentially call the function multiple times to drain the contract. 
",1552,75,3.071776866912842
68,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract allows for the transfer of tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `multisend` function calls the `transfer` function of the `Token` contract. This function can be re-entered by an attacker, leading to a potential for a re-entrancy attack. 
* **Uncontrolled Execution:** The `multisend` function does not have any checks to prevent the re-entrancy attack. 
* **Potential for Loss:** The attacker can potentially drain the contract of funds. 


",689,143,5.621496677398682
69,unchecked low level calls,"YES

The `multisend` function in the `Airdrop` contract allows for sending tokens to multiple addresses.  The function does not check the input addresses or the amount of tokens being sent. This can lead to a reentrancy attack, where an attacker can send a large amount of tokens to multiple addresses, draining the contract's funds. 
",858,75,2.995023012161255
70,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the `Token` contract for each address in the `_to` array. This is a potential reentrancy vulnerability. 

Here's why:

* **Reentrancy:**  The `multisend` function calls the `transfer` function of the `Token` contract for each address in the `_to` array. This means that an attacker could potentially call the `multisend` function multiple times, each time attempting to transfer funds from the contract to the attacker's address. 
* **Uncontrolled Execution:** The `transfer` function of the `Token` contract is not designed to handle reentrancy attacks. 
* **Potential for Loss:** If an attacker can successfully re-enter the `multisend` function, they could potentially drain the contract of funds. 


",753,181,7.087519645690918
71,unchecked low level calls,"YES
 
The `sendMoney` function in the `SimpleWallet` contract uses `_target.call.value(_value)();`. This line calls a function on the target address with the specified value.  The `call` function is a low-level function that does not propagate errors. If the function call fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",801,85,3.3891823291778564
72,unchecked low level calls,"YES
 
The `multisend` function in the `Airdrop` contract allows for sending tokens to multiple addresses.  The function does not check the input addresses or the amount of tokens being sent. This can lead to a reentrancy attack, where an attacker can send a large amount of tokens to multiple addresses, draining the contract's funds. 
",1010,77,3.102792501449585
73,front running,"YES
 
The `multisend` function in the `Airdrop` contract allows for the transfer of tokens to multiple addresses. This function is vulnerable to front-running attacks, as malicious actors can exploit the function to transfer tokens to their own addresses before the intended recipients. 
",800,60,2.4230687618255615
74,front running,"NO 
",742,4,0.23521661758422852
75,front running,"NO 
",2138,4,0.34038209915161133
76,front running,"YES
 
The contract uses the `multisend` function to transfer tokens to multiple addresses. This function is vulnerable to front-running attacks. 
",1055,33,1.3928146362304688
77,arithmetic,"YES
 
The `multisend` function in the `Airdrop` contract uses the `transfer` function of the `Token` contract to transfer tokens to multiple addresses.  This function does not check the input values for overflows. If the `_value` array is large enough, it could lead to integer overflows. 
",556,70,2.7889249324798584
78,arithmetic,"YES
 
The `multisend` function in the `Airdrop` contract multiplies the `_value` array by 10 raised to the power of the `decimals` of the token. This can lead to integer overflows if the `_value` array is large enough. 
",521,63,2.5116090774536133
79,arithmetic,"YES

The `multisend` function in the `Airdrop` contract uses a loop to transfer tokens to multiple addresses.  This loop could potentially lead to integer overflows if the `_value` array is not carefully managed. 
",513,50,2.009995937347412
80,arithmetic,"YES
 
The `multisend` function in the `Airdrop` contract allows for the transfer of tokens to multiple addresses.  The function does not have any checks to ensure that the input values are within the bounds of the contract's state. This can lead to integer overflows and underflows, which can result in the contract being drained of funds. 
",521,77,3.049288272857666
81,arithmetic,"NO 
",804,4,0.24028825759887695
82,arithmetic,"NO 
",909,4,0.24562644958496094
83,arithmetic,"YES

The `multisend` function in the `Airdrop` contract uses a loop to transfer tokens to multiple addresses.  This loop could potentially lead to integer overflows if the `_value` array is not carefully managed. 
",627,50,2.015373945236206
84,arithmetic,"YES
 
The `multisend` function in the `Airdrop` contract uses the `transfer` function of the `Token` contract to transfer tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it does not check the input values for potential overflows. If the `_value` array contains values that exceed the maximum value that can be stored in a `uint256` variable, it could lead to an overflow. 
",534,98,3.8800880908966064
85,arithmetic,"YES

The contract uses unsigned integers and the `count -= input` line can lead to integer overflows. 
",609,24,1.007364273071289
86,arithmetic,"YES
 
The contract uses unsigned integers for its state variables and functions.  This makes it vulnerable to arithmetic overflows and underflows.  The `multisend` function, in particular, could be exploited to cause overflows or underflows. 
",924,52,2.1089296340942383
87,arithmetic,"NO 
",761,4,0.2378077507019043
88,arithmetic,"YES
 
The `multisend` function in the `Airdrop` contract allows for the transfer of tokens to multiple addresses.  The function does not have any checks to prevent overflows or underflows. If the `_value` array is large enough, it could lead to an overflow of the `uint256` data type. 
",521,74,2.950742483139038
89,arithmetic,"YES
 
The `multisend` function in the `Airdrop` contract allows for the transfer of tokens to multiple addresses.  This function is vulnerable to reentrancy attacks. 
",541,42,1.704772710800171
90,arithmetic,"YES

The `multisend` function in the `Airdrop` contract uses a loop to transfer tokens to multiple addresses. This loop could potentially lead to integer overflows if the `_value` is too large. 
",603,47,1.8885498046875
91,bad randomness,"NO 
",913,4,0.24927353858947754
92,bad randomness,"YES
 
The code uses `block.number` to generate random numbers for the `chooseWinner` function. This is a major security vulnerability.  The `block.number` is predictable and can be manipulated by miners. This means that the random numbers generated by the contract are not truly random, and can be exploited by attackers. 
",2768,72,3.0345613956451416
93,bad randomness,"YES
The code uses a function `rand` that relies on the block hash and a constant factor. This makes it susceptible to attacks where the attacker can manipulate the block hash to influence the random number. 
",3107,44,1.9667682647705078
94,bad randomness,"YES
 
 The contract uses a function `multisend` that allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",1071,37,1.543642282485962
95,bad randomness,"YES
 
The contract uses the `keccak256` function to generate a random number, but it's vulnerable to reentrancy attacks. 
",764,36,1.4761464595794678
96,bad randomness,"YES
 
The contract uses a predictable random number generator. The code relies on the block timestamp and other predictable values, making it susceptible to manipulation by attackers. 
",856,36,1.4834659099578857
97,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1336,45,1.8640775680541992
98,reentrancy,"YES
 
The `withdrawFunds` function is vulnerable to reentrancy attacks.  The `require` statement `msg.sender.call.value(_weiToWithdraw)()` allows an attacker to call the `withdrawFunds` function repeatedly before the initial execution is complete. 
",876,60,2.4215493202209473
99,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1410,47,1.9554293155670166
100,reentrancy,"YES
 
The contract uses the `call.value` function, which allows external contracts to call functions within the contract. This can lead to reentrancy attacks, as an attacker can call the contract's `withdraw` function multiple times before the initial execution is complete. 
",783,60,2.4258506298065186
101,reentrancy,"YES
 
The `multisend` function in the `Airdrop` contract allows for the transfer of tokens to multiple addresses. This function is vulnerable to reentrancy attacks because it allows the contract to call itself repeatedly, potentially draining the contract's funds. 
",726,58,2.3447959423065186
102,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution Flow:** The code doesn't clearly define how the `Collect` function interacts with the external contract. 
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining the contract's funds. 


",1332,120,4.772602796554565
103,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining funds. 
* **Lack of Safeguards:** The code doesn't include any safeguards to prevent multiple calls or to handle the potential for reentrancy. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1566,127,5.059654474258423
104,reentrancy,"YES
 
The contract uses the `withdrawReward` function, which allows an attacker to call `getFirstWithdrawalBonus` again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",839,45,1.83457612991333
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1558,128,5.1030309200286865
106,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **Unrestricted External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any safeguards to prevent multiple calls to `Collect` from a single address. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1508,129,5.164333343505859
107,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be reentrant, meaning an attacker could call the `Collect` function multiple times before the initial execution is complete. 
* **Uncontrolled Execution:** The `Collect` function doesn't have any checks to prevent this. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1336,142,5.638583660125732
108,reentrancy,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `WithdrawToHolder` function calls an external contract (`_addr.call.value(_wei)`) without any checks. This means an attacker could potentially call the function multiple times, draining the contract's funds. 
* **Reentrancy Vulnerability:** The `WithdrawToHolder` function doesn't handle the possibility of a reentrancy attack. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1450,129,5.1699230670928955
109,reentrancy,"YES

The contract uses the `airDrop` function, which is vulnerable to reentrancy attacks.  The `airDrop` function allows an attacker to call the `airDrop` function repeatedly, draining the contract of funds. 
",1051,50,2.0410966873168945
110,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `CashOut` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy Vulnerability:** This creates a reentrancy vulnerability because the contract's state can be altered in the middle of its execution. 


",1296,102,4.077382564544678
111,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1500,47,1.9562273025512695
112,reentrancy,"YES
 
The `multisend` function in the `Airdrop` contract allows for the transfer of tokens to multiple addresses. This function is vulnerable to reentrancy attacks because it allows the contract to call itself repeatedly, potentially draining the contract's funds. 
",764,58,2.3346548080444336
113,reentrancy,"YES

The `withdrawBalance` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Call:** The `withdrawBalance` function uses `msg.sender.call.value(amountToWithdraw)()` to transfer funds. This means the contract is making an external call to the `msg.sender` address.
* **Potential Reentrancy:**  An attacker could call `withdrawBalance` multiple times in rapid succession, potentially draining the contract's funds. 
* **Unprotected Call:** The `withdrawBalance` function does not have any checks to prevent this. 


",755,129,5.08546257019043
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1254,47,1.9477415084838867
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows for reentrancy attacks.  This line allows an attacker to call the contract again before the initial execution is complete. 
",1250,48,1.9809942245483398
116,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be reentrant, meaning an attacker could call the `Collect` function multiple times before the initial execution is complete. 
* **Uncontrolled Execution:** The `Collect` function doesn't have any checks to prevent this. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1328,142,5.650903701782227
117,reentrancy,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",808,37,1.521186113357544
118,reentrancy,"YES
 
The `withdrawBalance` function is vulnerable to reentrancy attacks.  The `if` statement checks the return value of the `call.value` function, which is not a standard Solidity function. This can be exploited by an attacker to call the `withdrawBalance` function repeatedly, draining the contract of funds. 
",751,71,2.8516736030578613
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1358,47,1.9565353393554688
120,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1224,47,1.9391686916351318
121,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1404,47,1.9521417617797852
122,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows for reentrancy attacks.  This line allows an attacker to call the contract again before the initial call is complete. 
",1238,48,1.9744129180908203
123,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be reentrant, meaning an attacker could call the `Collect` function multiple times before the initial execution is complete. 
* **Uncontrolled Execution:** The `Collect` function doesn't have any checks to prevent this. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1332,142,5.63006329536438
124,reentrancy,"YES
 
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",1224,33,1.3943006992340088
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1408,47,1.9499115943908691
126,reentrancy,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks because it allows the owner to call the `withdrawBalance` function again before the initial execution is complete. 
",695,57,2.2935538291931152
127,time manipulation,"NO 
",597,4,0.2293095588684082
128,time manipulation,"YES
 
The contract uses `block.timestamp` for random number generation, which is vulnerable to manipulation by miners. 
",868,28,1.1819539070129395
129,time manipulation,"YES
The `lastInvestmentTimestamp` variable is directly set to `block.timestamp`, making it susceptible to manipulation by miners. This could allow an attacker to manipulate the timestamp and potentially gain control of the contract. 
",1080,46,1.8973779678344727
130,time manipulation,"YES
 
The contract uses `now` to determine the current block timestamp. This is vulnerable to manipulation by miners. 
",716,28,1.1662721633911133
131,time manipulation,"YES
 
The contract uses `block.timestamp` to generate a random number, which is then used to determine the winner of a lottery. This is a common vulnerability, as the timestamp can be manipulated by miners. 
",866,48,1.958376169204712
132,short addresses,"YES
 
The `multisend` function in the `Airdrop` contract allows an attacker to send a large number of tokens to multiple addresses. This is a potential vulnerability because it could be used to drain funds from the contract. 
",904,52,2.103854179382324
133,denial of service,"YES
 
The contract's `addCreditors` function allows an attacker to add an unlimited number of addresses to the `creditorAddresses` array. This can lead to a denial-of-service attack, as the contract will be unable to process any transactions. 
",869,59,2.3899993896484375
134,denial of service,"YES
 
The contract's `multisend` function allows for the transfer of tokens to multiple addresses. This function is vulnerable to a denial of service attack because it can be used to send a large number of transactions to a large number of addresses. This can lead to a denial of service attack because the contract will be unable to process the transactions. 
",1000,75,3.0149588584899902
135,denial of service,"YES
 
The code has a potential denial of service vulnerability.  The lines `creditorAddresses = new address[](0);` and `creditorAmounts = new uint[](0);`  are setting the arrays to be empty. This can be exploited to cause the contract to crash. 
",2229,63,2.624394655227661
136,denial of service,"YES
 
The `multisend` function in the `Airdrop` contract is vulnerable to a Denial of Service attack.  The function allows the owner to send tokens to multiple addresses, but it does not have any checks to prevent the owner from sending an excessive amount of tokens to a single address. This could lead to a Denial of Service attack, where the owner could send a large amount of tokens to a single address, causing the contract to become unresponsive. 
",889,98,3.914522171020508
137,denial of service,"YES
 
The contract's `multisend` function allows an attacker to send a large number of tokens to multiple addresses, potentially exhausting the contract's funds. This is a classic denial-of-service attack, as the attacker can control the contract's behavior and prevent legitimate transactions. 
",728,64,2.556713581085205
138,denial of service,"YES

The contract uses the `send` function to transfer funds, which is a potential vulnerability.  The `send` function is not a standard function in Solidity and can be exploited by malicious actors. 
",700,44,1.7929117679595947
