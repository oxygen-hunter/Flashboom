case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"YES
 
The `newOwner` function allows anyone to change the owner of the contract. This is a classic access control vulnerability. 
",919,31,1.288686752319336
12,access control,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",615,37,1.5091440677642822
13,access control,"YES
The contract uses `msg.sender` to determine the owner. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",2857,38,1.7182095050811768
14,access control,"NO 
",790,4,0.23741579055786133
15,access control,"YES
 
The contract uses the `msg.sender` to determine the owner. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",629,41,1.6648094654083252
16,access control,"NO 
",729,4,0.2387697696685791
17,access control,"NO 
",577,4,0.22186708450317383
18,access control,"NO 
",820,4,0.242293119430542
19,access control,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",615,37,1.5101726055145264
20,access control,"YES
 
The `multisend` function in the `Airdropper` contract allows an attacker to potentially drain funds from the contract.  This is because the function doesn't have any checks to ensure that the `dests` array is valid or that the `value` is not exceeding the contract's balance. 
",811,71,2.849654197692871
21,access control,"NO 
",572,4,0.22401809692382812
22,access control,"NO 
",840,4,0.23862266540527344
23,access control,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",515,37,1.503002643585205
24,access control,"YES
 
The `Airdropper` contract uses the `multisend` function to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",623,39,1.590672492980957
25,access control,"NO 
",594,4,0.22986578941345215
26,access control,"YES
 
The contract uses `fibonacciLibrary.delegatecall` to execute external functions. This is a common vulnerability, as it can be exploited to call arbitrary functions on the contract. 
",1099,42,1.734879970550537
27,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has finished. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy.  This means that an attacker could potentially drain the contract's funds. 


",1417,141,5.610309362411499
28,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has completed. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy.  This means that an attacker could potentially drain funds from the contract. 


",1612,140,5.580358982086182
29,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any built-in error handling. If the `transfer` function fails, the contract will not revert. This can lead to a loss of funds. 
",1115,75,3.0353810787200928
30,unchecked low level calls,"YES
 
The code has several vulnerabilities:

* **Unchecked Return Values:** The `claimThrone` function doesn't check the return value of `msg.sender.send(valuePaid)`. This can lead to unexpected behavior and potential loss of funds.
* **Low Level Function Calls:** The `claimThrone` function uses `msg.sender.send(valuePaid)` and `msg.sender.send(excessPaid)`. These functions are low-level and can be exploited. 
* **Unprotected Access:** The `transferOwnership` function is not restricted to the owner. This could allow an attacker to change the contract's ownership. 
* **Reentrancy:** The `claimThrone` function could be vulnerable to reentrancy attacks. 
* **Unprotected `send` Function:** The `send` function is not protected against reentrancy. 
* **Unprotected `multisend` Function:** The `multisend` function is vulnerable to reentrancy attacks. 



",2507,215,8.581743240356445
31,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can be a vulnerability if the `transfer` function is not properly implemented, as it could allow an attacker to drain the contract of funds. 
",694,66,2.6366326808929443
32,unchecked low level calls,"YES
 
The `cash` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `cash` function calls `winner.send(subpot)` which is a function call.  This function call can be re-entered by an attacker.
* **Potential for Unintended Execution:**  The attacker can potentially execute the `cash` function multiple times, leading to unintended execution and potentially draining funds. 


",2639,99,4.074140310287476
33,unchecked low level calls,"NO 
",551,4,0.22208404541015625
34,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function is not explicitly checked for potential vulnerabilities.  This could lead to an attacker being able to drain funds from the contract. 
",883,57,2.297530174255371
35,unchecked low level calls,"NO 
",1587,4,0.3155512809753418
36,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling. If the `transfer` function fails, the contract will not handle the failure. 
",1486,56,2.30953311920166
37,unchecked low level calls,"YES

The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `multisend` function calls the `transfer` function of the ERC20 token contract multiple times. If an attacker can call the `transfer` function of the ERC20 token contract multiple times before the `multisend` function completes, they can drain the contract of funds. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy attacks. 
* **Potential for Exploits:**  An attacker could exploit this vulnerability by calling the `transfer` function of the ERC20 token contract multiple times before the `multisend` function completes. 


",869,184,7.23256516456604
38,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling. If the `transfer` function fails, the contract will not revert. 
",1514,54,2.243171215057373
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can be exploited.  The `call.value` function can be used to send a value to an address, and the `gas` function can be used to set the gas limit for the transaction.  These functions can be used to send a large amount of gas to an address, which can be used to drain the contract of funds. 
",2434,97,3.9660568237304688
40,unchecked low level calls,"YES
 
 The `execute` function in the `Marriage` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors.  This means an attacker could potentially execute malicious code, leading to a variety of attacks. 
",1947,77,3.152364730834961
41,unchecked low level calls,"YES
 
The `execute` function in the `WedIndex` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors. This means an attacker could potentially execute malicious code, leading to a variety of attacks. 
",1287,77,3.1137876510620117
42,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has completed. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy.  This means that an attacker could potentially drain the contract's funds. 


",1557,141,5.632039785385132
43,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract allows for sending tokens to multiple addresses.  This function is vulnerable to reentrancy attacks.  An attacker could call the `multisend` function multiple times, each time attempting to send tokens to a different address.  This could lead to a situation where the contract is drained of funds. 
",673,81,3.237730026245117
44,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any built-in error handling. If the `transfer` function fails, the contract will not revert. This can lead to a loss of funds for the contract owner. 
",1115,79,3.1891424655914307
45,unchecked low level calls,"YES
 
The `execute` function in the `TokenSender` contract calls the target contract (`_dst`) with the provided value and data.  However, the `_dst.call.value(_value)(_data)` call is a low-level function that does not propagate errors. This means that if the call fails, the contract will continue to execute the next line of code, potentially leading to unexpected behavior and vulnerabilities. 
",1915,92,3.731316566467285
46,unchecked low level calls,"NO 
",588,4,0.2238166332244873
47,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function is not a standard Solidity function and can be vulnerable to reentrancy attacks. 
",1430,49,2.0278079509735107
48,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can be a vulnerability if the `transfer` function is not properly audited. 

The `multisend` function does not check if the `transfer` function of the ERC20 token contract is successful. If the `transfer` function fails, the `multisend` function will continue to execute, potentially leading to a loss of funds. 
",698,105,4.14846134185791
49,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has completed. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy.  This means that an attacker could potentially drain the contract's funds. 


",1593,140,5.597445726394653
50,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has completed. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy. 
* **Potential for Loss:**  If an attacker can repeatedly call `multisend` before the previous one has completed, they could drain the contract's funds. 


",1593,160,6.35430121421814
51,unchecked low level calls,"YES
 
The `sendMoney` function in the `SimpleWallet` contract uses the `call` function with `value` and `_data`. This is a low-level function that does not propagate errors. If the `_target.call.value(_value)(_data)` call fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",767,81,3.233243942260742
52,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can be a vulnerability if the `transfer` function is not properly implemented. 

For example, if the `transfer` function is not designed to handle multiple transfers, it could lead to a reentrancy attack. 
",1030,91,3.6259453296661377
53,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract allows for the transfer of tokens to multiple addresses.  This function is vulnerable to reentrancy attacks.  The function does not check for the return value of the `ERC20` transfer function.  If an attacker can call the `multisend` function multiple times, they can drain the contract of funds. 
",677,86,3.4435389041900635
54,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can be a vulnerability if the `transfer` function is not properly audited. 

The `multisend` function does not check if the `transfer` function of the ERC20 token contract is successful. If the `transfer` function fails, the `multisend` function will continue to execute, potentially leading to a loss of funds. 
",696,105,4.1801369190216064
55,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has finished. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy.  This means that an attacker could potentially drain funds from the contract. 


",1553,140,5.591465950012207
56,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 
",694,46,1.8596651554107666
57,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token.  This function is vulnerable to reentrancy attacks. 
",961,46,1.8742585182189941
58,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This is a potential vulnerability because it does not check the return value of the `transfer` function. If the `transfer` function fails, the contract will continue to execute, potentially leading to a loss of funds. 
",698,78,3.095432996749878
59,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has completed. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy. 
* **Potential for Loss:**  If an attacker can repeatedly call `multisend` before the previous one has completed, they could drain the contract's funds. 


",1557,160,6.3768908977508545
60,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token contract.  This function does not check the return value of the `transfer` function. If the `transfer` function fails, the contract will continue to execute, potentially leading to a loss of funds. 
",497,75,2.9777681827545166
61,unchecked low level calls,"YES
 
The `callFirstTarget` and `callSecondTarget` functions call external contracts (`firstTarget` and `secondTarget`) with the `value` parameter.  This can lead to reentrancy attacks, where an attacker can repeatedly call the function to drain funds. 
",2324,61,2.569589376449585
62,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array.  This is a potential vulnerability because the `transfer` function is not inherently secure.  It is possible for an attacker to exploit this vulnerability by sending a large number of transactions to the contract. 
",804,76,3.0453546047210693
63,unchecked low level calls,"YES

The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address. If an attacker can call the `multisend` function multiple times in a short time, they can potentially drain the contract's funds. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy. 
* **Potential for Exploits:**  An attacker could exploit this vulnerability by repeatedly calling the `multisend` function, causing the contract to transfer funds to their own address. 


",805,173,6.799210071563721
64,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's `transfer` function. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address. If an attacker can call the `multisend` function multiple times in a short time, they can potentially drain the contract's funds. 
* **Lack of Safeguards:** The `multisend` function does not include any safeguards to prevent reentrancy. 
* **Potential for Exploits:**  An attacker could exploit this vulnerability by repeatedly calling the `multisend` function, causing the contract to transfer funds to their own address. 


",959,178,6.991459846496582
65,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can be a vulnerability if the `transfer` function is not properly audited. 

The `transfer` function in the ERC20 contract is not explicitly defined in the provided code. This means that the `multisend` function is relying on the ERC20 contract to handle the transfer of tokens. 

If the ERC20 contract is vulnerable, the `multisend` function will also be vulnerable. 
",739,119,4.72422456741333
66,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling. If the `transfer` function fails, the contract will not revert. 
",1514,54,2.249093770980835
67,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `multisend` function calls the `ERC20` contract's `transfer` function for each destination address.  This means that an attacker could potentially call the `multisend` function multiple times, each time before the previous one has finished executing. 
* **Unprotected Transfers:** The `ERC20` contract's `transfer` function is not designed to handle reentrancy.  This means that an attacker could potentially drain funds from the contract. 


",1501,141,5.652060031890869
68,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract calls the `transfer` function of the ERC20 token contract for each address in the `dests` array.  This function does not check the return value of the `transfer` function. If the `transfer` function fails, the contract will continue to execute, potentially leading to a loss of funds. 
",638,85,3.371316432952881
69,unchecked low level calls,"YES
 
The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function. This function is vulnerable to reentrancy attacks. 
",807,45,1.8336529731750488
70,unchecked low level calls,"YES

The `multisend` function calls the `transfer` function of the ERC20 token contract for each address in the `dests` array. This can be a vulnerability if the `transfer` function is not properly implemented, as it could allow an attacker to drain the contract of funds. 
",702,64,2.557955026626587
71,unchecked low level calls,"YES
 
The `sendMoney` function uses `_target.call.value(_value)`. This is a low-level call that doesn't propagate errors.  It's possible for the call to fail, and the contract will continue to execute, potentially leading to unexpected outcomes. 
",750,64,2.5755865573883057
72,unchecked low level calls,"YES
 
The `multisend` function calls the `transfer` function of the ERC20 token contract.  The `transfer` function does not have any error handling for the case where the `to` address is not valid. This can lead to a denial of service attack. 
",959,62,2.5018672943115234
73,front running,"NO 
",749,4,0.23859286308288574
74,front running,"NO 
",691,4,0.23360085487365723
75,front running,"NO 
",2087,4,0.336989164352417
76,front running,"NO 
",1004,4,0.25635194778442383
77,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's `transfer` function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the value of the `value` parameter before sending it to the `ERC20` contract. If the `value` parameter is too large, it could overflow the `uint256` data type, leading to a potential loss of funds. 
",505,111,4.3895251750946045
78,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract uses a loop to transfer tokens to multiple addresses. This loop could potentially lead to integer overflows if the `value` parameter is not carefully controlled. 
",470,51,2.049351930618286
79,arithmetic,"NO 
",462,4,0.20474720001220703
80,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the input value for potential overflows. If the `value` is too large, it could overflow the `uint256` data type, leading to unexpected behavior and potential loss of funds. 
",470,97,3.8211891651153564
81,arithmetic,"NO 
",753,4,0.2347567081451416
82,arithmetic,"NO 
",858,4,0.23795628547668457
83,arithmetic,"YES

The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the input value before sending it to the `ERC20` contract. 
",576,71,2.8228795528411865
84,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the input values. If the `value` parameter is too large, it could overflow the `uint256` data type, leading to unexpected behavior and potential loss of funds. 
",483,95,3.777113199234009
85,arithmetic,"YES

The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the input value before sending it to the `ERC20` contract. 
",558,71,2.828195571899414
86,arithmetic,"YES

The contract uses unsigned integers for its state variables and functions.  This makes it vulnerable to integer overflows and underflows.  The `multisend` function transfers tokens to multiple addresses, and the `ERC20` contract is not specifically designed to handle overflows. 
",873,58,2.350407600402832
87,arithmetic,"NO 
",710,4,0.23177266120910645
88,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract uses the `ERC20` contract's transfer function to send tokens to multiple addresses.  This function is vulnerable to integer overflows and underflows because it doesn't check the input value for potential overflows. If the `value` is too large, it could overflow the `uint256` data type, leading to unexpected behavior and potential loss of funds. 
",470,97,3.8156838417053223
89,arithmetic,"YES
 
The `multisend` function in the `Airdropper` contract transfers tokens to multiple addresses.  This function is vulnerable to reentrancy attacks. 
",490,39,1.5838172435760498
90,arithmetic,"NO 
",552,4,0.2266530990600586
91,bad randomness,"NO 
",862,4,0.24211907386779785
92,bad randomness,"YES
 
The code uses `block.number` to generate random numbers for the `chooseWinner` function. This is a major security vulnerability because `block.number` is predictable and can be manipulated by miners. 
",2717,48,2.0856711864471436
93,bad randomness,"YES
The code uses a function `rand` that relies on the block hash and a constant factor. This makes it susceptible to attacks where the attacker can manipulate the block hash to influence the random number. 
",3056,44,2.0432586669921875
94,bad randomness,"NO 
",1020,4,0.2612123489379883
95,bad randomness,"YES
 
The contract uses `keccak256` to generate a random number, but it's vulnerable to predictable attacks. The `block.blockhash` and `block.number` values are predictable, making the generated number susceptible to manipulation. 
",713,57,2.2899320125579834
96,bad randomness,"YES
 
The contract uses the `block.timestamp` for the `salt` variable, which is a predictable source of randomness. This makes the random number generator vulnerable to attacks. 
",805,41,1.675459384918213
97,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 
* **Uncontrolled Execution:** The `Collect` function does not have any checks to prevent the attacker from repeatedly calling the function. 


",1285,122,4.864688158035278
98,reentrancy,"YES
 
The `multisend` function in the `Airdropper` contract allows for the transfer of tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",825,42,1.7178001403808594
99,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1359,47,1.9551537036895752
100,reentrancy,"YES
 
The `multisend` function in the `Airdropper` contract allows for the transfer of tokens to multiple addresses. This function is vulnerable to reentrancy attacks because it allows the contract to call itself repeatedly. 
",732,51,2.0550968647003174
101,reentrancy,"YES
 
The `multisend` function in the `Airdropper` contract allows an attacker to potentially drain funds from the contract.  This is because the `multisend` function does not have any checks to prevent an attacker from sending large amounts of tokens to multiple addresses. 
",675,62,2.4764950275421143
102,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1281,114,4.556631326675415
103,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1515,47,1.9666376113891602
104,reentrancy,"YES
 
The contract has a reentrancy vulnerability in the `multisend` function.  The function allows multiple transfers to be made to different addresses, which can be exploited by a malicious actor to drain funds. 
",788,48,1.945249080657959
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Reentrancy Vulnerability:**  This call to an external contract can be exploited by an attacker. The attacker can call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1507,120,4.798554420471191
106,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any checks to prevent multiple calls to `Collect` from the same address. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1457,127,5.066856384277344
107,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 
* **Uncontrolled Execution:** The `Collect` function does not have any checks to prevent the attacker from repeatedly calling the function. 


",1285,122,4.856232643127441
108,reentrancy,"YES
 
The `multisend` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `multisend` function calls the ERC20 token's `transfer` function on each destination address. This means the contract is making calls to external contracts (the ERC20 token) before the initial execution is complete.
* **Reentrancy Vulnerability:**  This creates a reentrancy vulnerability because an attacker could call the `multisend` function multiple times, each time before the previous one has finished. This could lead to a situation where funds are transferred multiple times, draining the contract. 


",1399,137,5.471012353897095
109,reentrancy,"YES

The contract uses the `airDrop` function, which is vulnerable to reentrancy attacks.  The `airDrop` function allows an attacker to call the `airDrop` function repeatedly, draining the contract of funds. 
",1000,50,2.04885196685791
110,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **Unrestricted External Calls:** The `CashOut` function allows external calls to the contract's `msg.sender` address.
* **Potential for Reentrancy:**  An attacker could call `CashOut` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any checks to prevent multiple calls or to ensure that the `msg.sender` address has sufficient funds. 


",1245,122,4.841862440109253
111,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which is vulnerable to reentrancy attacks.  The `call` function can be used to call another contract, and if the contract is not designed to handle reentrancy, it can be exploited. 
",1449,63,2.572242259979248
112,reentrancy,"YES
 
The `multisend` function in the `Airdropper` contract allows for the transfer of tokens to multiple addresses. This function is vulnerable to reentrancy attacks because it allows the contract to call itself repeatedly, potentially draining the contract's funds. 
",713,59,2.3736698627471924
113,reentrancy,"YES
 
The `withdrawBalance` function is vulnerable to reentrancy attacks.  Here's why:

* **External Call:** The `withdrawBalance` function calls `msg.sender.call.value(amountToWithdraw)()` which is an external call.
* **Potential for Reentrancy:**  An attacker could call `withdrawBalance` multiple times in rapid succession, potentially draining the contract's funds. 
* **Unprotected State:** The `withdrawBalance` function doesn't have any checks to prevent this. 


Let me know if you'd like to explore other aspects of smart contract security! 
",704,135,5.3265979290008545
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1203,47,1.9310526847839355
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1199,47,1.9382221698760986
116,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1277,114,4.563750267028809
117,reentrancy,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks because it allows the owner to call the `transfer` function multiple times within the same transaction. 
",757,55,2.2174816131591797
118,reentrancy,"YES
 
The `withdrawBalance` function is vulnerable to reentrancy attacks.  The `if` statement allows an attacker to call the `withdrawBalance` function repeatedly before the initial execution is complete. 
",700,46,1.8541193008422852
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1307,47,1.9453589916229248
120,reentrancy,"YES
 
The `CashOut` function allows an attacker to call the `call.value(_am)` function before the `balances[msg.sender]-=_am` operation is complete. This creates a reentrancy vulnerability. 
",1173,51,2.0940792560577393
121,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1353,47,1.9468727111816406
122,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `if(msg.sender.call.value(_am)())` line allows an attacker to call the `CashOut` function repeatedly, potentially draining the contract's funds.
* **Reentrancy Vulnerability:**  The `call.value(_am)` function call is susceptible to reentrancy because it doesn't handle the potential for a contract to call itself again before the initial execution is complete. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1187,138,5.532408714294434
123,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a re-entrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1281,114,4.547065496444702
124,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **Unrestricted External Calls:** The `if(msg.sender.call.value(_am)())` line allows the contract to make external calls to the `msg.sender` address. 
* **Potential for Reentrancy:**  An attacker could call `CashOut` multiple times within a short period, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1173,121,4.818878173828125
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1357,47,1.9457287788391113
126,reentrancy,"YES
 
The contract uses the `multisend` function which allows the owner to transfer tokens to multiple addresses. This function is vulnerable to reentrancy attacks because it allows the owner to call the `withdrawBalance` function repeatedly. 
",644,51,2.064838171005249
127,time manipulation,"NO 
",546,4,0.22705745697021484
128,time manipulation,"YES
 
The contract relies heavily on `block.timestamp` for its functionality, making it susceptible to manipulation by miners. This is a classic vulnerability, as miners can adjust the timestamp to their advantage. 
",817,45,1.830583095550537
129,time manipulation,"YES
 
The `lastInvestmentTimestamp` variable is directly set to `block.timestamp`, making it susceptible to manipulation by miners. This could allow an attacker to manipulate the timestamp and potentially gain control of the contract. 
",1029,48,1.9676082134246826
130,time manipulation,"NO 
",665,4,0.2323286533355713
131,time manipulation,"YES
 
The contract uses `block.timestamp` in the `sha3` function to generate a random number. This is vulnerable because the miners can manipulate the timestamp, potentially leading to unfair outcomes. 
",815,45,1.834150791168213
132,short addresses,"YES
 
The contract uses the `multisend` function which allows the owner to send tokens to multiple addresses. This function is vulnerable to reentrancy attacks. 
",853,37,1.5362212657928467
133,denial of service,"YES
 
The contract's `addCreditors` function allows an attacker to add an unlimited number of addresses to the `creditorAddresses` array. This can lead to a denial-of-service attack, as the contract will be unable to process any transactions. 
",818,59,2.3823330402374268
134,denial of service,"YES
 
The contract's `multisend` function allows an attacker to potentially send a large number of tokens to multiple addresses. This is a classic DOS attack vector. 
",949,39,1.6154260635375977
135,denial of service,"YES
 
The code has a vulnerability related to the `lendGovernmentMoney` function.  The `creditorAddresses` and `creditorAmounts` arrays are cleared every time a transaction is executed. This can be exploited to drain funds from the contract. 
",2178,56,2.372833013534546
136,denial of service,"YES
 
The contract's `multisend` function is vulnerable to Denial of Service attacks.  The function uses a `while` loop to iterate through a list of addresses.  If an attacker can manipulate the `dests` array, they can cause the loop to run indefinitely, consuming all the gas and potentially locking up the contract. 
",838,74,2.964695692062378
137,denial of service,"YES
 
The contract's `multisend` function uses the `ERC20` contract's transfer function to send tokens to multiple addresses. This can be exploited by an attacker to drain funds from the contract. 
",677,49,1.9752132892608643
138,denial of service,"YES
 
The contract uses the `send` function to transfer funds. This function is vulnerable to reentrancy attacks. 
",649,29,1.2014124393463135
