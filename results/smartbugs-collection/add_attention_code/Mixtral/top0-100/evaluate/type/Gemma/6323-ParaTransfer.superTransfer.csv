case_id,vuln_type,audit_report,gt,eval_score,eval_input_token_num,eval_output_token_num,eval_inference_time
11,access control,"YES
 
The `newOwner` function allows anyone to change the owner of the contract. This is a classic access control vulnerability. 
",access control,3.0,460.0,6.0,2.475100517272949
12,access control,"NO 
",access control,1.0,435.0,6.0,1.8515348434448242
13,access control,"YES
The contract uses `msg.sender` to determine the owner of the contract. This is a common vulnerability, as it can be exploited by attackers to gain control of the contract. 
",access control,3.0,471.0,6.0,2.743640184402466
14,access control,"YES
 
The `ParaTransfer` contract uses `msg.sender` to call the `superTransfer` function. This is a potential security vulnerability because it allows an attacker to call the `superTransfer` function with malicious intent. 
",access control,3.0,479.0,6.0,1.485281229019165
15,access control,"YES
 
The `ParaTransfer` contract has a potential vulnerability related to reentrancy.  Here's why:

* **Reentrancy:** The `superTransfer` function allows an attacker to call it repeatedly, potentially draining the contract's funds. 
* **Unprotected Logic:** The `superTransfer` function doesn't have any checks to prevent an attacker from calling it multiple times. 
* **Potential for Exploitation:** An attacker could exploit this vulnerability by repeatedly calling `superTransfer` with the same `AirDrop` and `amount` values. 


",access control,2.0,546.0,6.0,2.2259528636932373
16,access control,"YES
 
The `ParaTransfer` contract uses `msg.sender` to call the `superTransfer` function. This is a common vulnerability that can be exploited by an attacker to call the `superTransfer` function with malicious intent. 
",access control,3.0,480.0,6.0,2.8282034397125244
17,access control,"YES
 
The `ParaTransfer` contract uses `superTransfer` function to transfer tokens. This function is vulnerable to reentrancy attacks. 
",access control,2.0,462.0,6.0,2.89119815826416
18,access control,"YES
 
The `ParaTransfer` contract uses `msg.sender` to call the `superTransfer` function. This is a potential security vulnerability because it allows an attacker to call the `superTransfer` function with malicious intent. 
",access control,3.0,479.0,6.0,2.078697681427002
19,access control,"NO 
",access control,1.0,435.0,6.0,3.2685468196868896
20,access control,"YES
 
The `ParaTransfer` contract uses `msg.sender` to call the `superTransfer` function. This is a potential security vulnerability because it allows an attacker to call the `superTransfer` function with malicious intent. 
",access control,3.0,479.0,6.0,4.513316631317139
21,access control,"NO 
",access control,1.0,435.0,6.0,2.843677282333374
22,access control,"YES
 
The `ParaTransfer` contract's `superTransfer` function allows an attacker to transfer tokens to any address by simply calling it with the correct parameters. This is a classic example of a reentrancy attack. 
",access control,2.0,478.0,6.0,2.1855666637420654
23,access control,"YES
 
The `ParaTransfer` contract allows an attacker to transfer tokens to any address by calling the `superTransfer` function. This is a classic example of a **reentrancy attack**. 

Here's why:

* **Reentrancy:** The `superTransfer` function calls the `transfer` function of the ERC20 token contract. This function is susceptible to reentrancy attacks because it doesn't handle the possibility of a reentrancy attack. 
* **Unprotected Transfer:** The `transfer` function is not designed to handle reentrancy attacks. 
* **Potential for Abuse:** An attacker could call `superTransfer` multiple times, potentially draining the contract's funds. 


",access control,2.0,573.0,6.0,2.3718581199645996
24,access control,"YES
 
The `ParaTransfer` contract has a vulnerability related to the `superTransfer` function.  It allows an attacker to transfer tokens to any address by calling the function with the correct parameters. 
",access control,3.0,474.0,6.0,2.431581497192383
25,access control,"NO 
",access control,1.0,435.0,6.0,3.1390974521636963
26,access control,"YES
 
The contract uses `fibonacciLibrary.delegatecall` to execute external functions. This is a common vulnerability, as it can be exploited to gain unauthorized access to the contract's internal state and logic. 
",access control,3.0,475.0,6.0,2.46439790725708
27,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Transfers:** The `superTransfer` function allows the `parachute` contract to transfer tokens to multiple addresses. 
* **Reentrancy Vulnerability:**  An attacker could call `superTransfer` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The function doesn't include any checks to prevent the attacker from calling it repeatedly. 


",unchecked low level calls,2.0,548.0,6.0,2.9368908405303955
28,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract allows an attacker to transfer tokens to any address by simply calling it with the correct parameters. This is a classic example of a reentrancy attack. 
",unchecked low level calls,2.0,481.0,6.0,1.943300485610962
29,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract uses the `transfer` function of an ERC20 token.  This function is vulnerable to reentrancy attacks.  The attacker can call the `superTransfer` function multiple times, each time transferring a different amount of tokens.  This can lead to a loss of funds for the contract owner. 
",unchecked low level calls,2.0,511.0,6.0,2.510772705078125
30,unchecked low level calls,"YES
 
The code has several vulnerabilities:

* **Unchecked Return Values:** The `claimThrone` function returns a boolean value, but it doesn't check the return value. This can lead to unexpected behavior.
* **Low Level Function Calls:** The `msg.sender.send` function is vulnerable to reentrancy attacks. 
* **Unprotected Access Control:** The `transferOwnership` function allows anyone to change the contract's owner. 
* **Unclear Contract Logic:** The `ParaTransfer` contract is not well-defined and could be vulnerable to exploits. 



",unchecked low level calls,4.0,548.0,6.0,3.1401724815368652
31,unchecked low level calls,"YES

The `ParaTransfer` contract calls the `transfer` function of the ERC20 token contract. This function is not explicitly audited, and the `superTransfer` function does not check the return value of the ERC20 transfer function. This can lead to a reentrancy attack, where an attacker can call the `superTransfer` function multiple times to drain the contract of funds. 
",unchecked low level calls,4.0,514.0,6.0,2.196526050567627
32,unchecked low level calls,"YES
 
The `cash` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `cash` function calls `winner.send(subpot)` which is a function call.  This function call can be re-entered by an attacker.
* **Potential for Exploiting:**  An attacker could repeatedly call `cash` with different subpots, potentially draining funds from the contract. 


",unchecked low level calls,2.0,523.0,6.0,2.672778844833374
33,unchecked low level calls,"YES

The `superTransfer` function calls the `transfer` function of the ERC20 token contract.  This function is vulnerable to reentrancy attacks. 
",unchecked low level calls,2.0,468.0,6.0,2.5705173015594482
34,unchecked low level calls,"YES

The `superTransfer` function calls the `transfer` function of the ERC20 token contract.  This is a potential vulnerability because the `transfer` function in the ERC20 contract is not explicitly checked for its behavior.  The `transfer` function in the ERC20 contract is not explicitly checked for its behavior. 
",unchecked low level calls,3.0,501.0,6.0,1.9251515865325928
35,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Transfers:** The `superTransfer` function allows for multiple token transfers to different addresses. 
* **Reentrancy Vulnerability:**  An attacker could call `superTransfer` multiple times, each time attempting to transfer funds to a different address.  
* **Potential for Loss:**  The attacker could exploit the reentrancy vulnerability to drain funds from the contract. 


",unchecked low level calls,2.0,541.0,6.0,2.7015116214752197
36,unchecked low level calls,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Withdraw:** The `WithdrawToHolder` function doesn't check for reentrancy.  
* **Potential for Reentrancy:** An attacker could call `WithdrawToHolder` multiple times in rapid succession, potentially draining funds. 
* **Lack of Safeguards:** The function doesn't have any safeguards to prevent this. 


",unchecked low level calls,2.0,526.0,6.0,2.0271236896514893
37,unchecked low level calls,"YES

The `superTransfer` function calls the `transfer` function of the ERC20 token contract. This function is not explicitly audited, and the `transfer` function of the ERC20 token contract is not explicitly audited. This can lead to vulnerabilities, as the `transfer` function of the ERC20 token contract is not explicitly audited. 
",unchecked low level calls,2.0,504.0,6.0,2.46266508102417
38,unchecked low level calls,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Withdraw:** The `WithdrawToHolder` function doesn't check for reentrancy.  
* **Potential for Reentrancy:** An attacker could call `WithdrawToHolder` multiple times in rapid succession, potentially draining funds. 
* **Lack of Safeguard:** The function doesn't have any safeguards to prevent this. 


Let me know if you'd like to explore other aspects of smart contract security! 
",unchecked low level calls,2.0,541.0,6.0,2.3136165142059326
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can lead to unexpected behavior.  The `call.value` function can be exploited to drain funds from the contract. 
",unchecked low level calls,4.0,480.0,6.0,2.6788010597229004
40,unchecked low level calls,"YES
 
The `execute` function in the `Marriage` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is a low-level call that doesn't propagate errors. This means an attacker could potentially execute malicious code, leading to a variety of attacks. 
",unchecked low level calls,3.0,500.0,6.0,3.651578187942505
41,unchecked low level calls,"YES
 
The `execute` function in the `Owned` contract allows arbitrary code execution. This is a major security vulnerability.  The `_dst.call.value(_value)(_data)` line is particularly concerning. It allows the contract to call any function on the target address, potentially leading to malicious code execution. 
",unchecked low level calls,3.0,497.0,6.0,2.1211681365966797
42,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Transfers:** The `superTransfer` function allows the `parachute` contract to transfer tokens to multiple addresses. 
* **Reentrancy Vulnerability:**  An attacker could call `superTransfer` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Locking:** The function doesn't lock the transfer until all tokens are transferred. 


",unchecked low level calls,2.0,551.0,6.0,1.3879625797271729
43,unchecked low level calls,"YES
 
The `ParaTransfer` contract's `superTransfer` function allows an attacker to transfer tokens to any address by simply calling it with the correct parameters. This is a potential reentrancy vulnerability. 
",unchecked low level calls,2.0,477.0,6.0,2.90524959564209
44,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract uses the `transfer` function of an ERC20 token.  This function is vulnerable to reentrancy attacks.  The attacker can call the `superTransfer` function multiple times, each time transferring a different amount of tokens.  This can lead to a loss of funds for the contract owner. 
",unchecked low level calls,2.0,511.0,6.0,3.6712646484375
45,unchecked low level calls,"YES
 
The `_dst.call.value(_value)(_data);` line is vulnerable because it uses the `call` function, which does not propagate errors. This means that if the `call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",unchecked low level calls,3.0,493.0,6.0,3.0943856239318848
46,unchecked low level calls,"NO 
",unchecked low level calls,1.0,437.0,6.0,2.4217677116394043
47,unchecked low level calls,"YES
 
The `WithdrawToken` function in the `Token` contract uses the `call` function to transfer tokens. This is a low-level function that does not propagate errors. If the transfer fails, the contract will continue to execute, potentially leading to unexpected outcomes. 
",unchecked low level calls,3.0,490.0,6.0,2.7055814266204834
48,unchecked low level calls,"YES

The `ParaTransfer` contract calls the `transfer` function of an ERC20 token, which is a standard ERC20 token.  This means that the `ParaTransfer` contract is not directly controlling the ERC20 token, but rather is calling the ERC20 token's `transfer` function.  This can lead to a reentrancy attack if the ERC20 token's `transfer` function is vulnerable to reentrancy. 
",unchecked low level calls,2.0,524.0,6.0,2.6368191242218018
49,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Transfers:** The `superTransfer` function doesn't check for reentrancy. It allows the attacker to call the function multiple times, potentially draining the contract's funds.
* **Potential for Reentrancy:**  The `superTransfer` function calls the ERC20 token's `transfer` function. If an attacker can call the function multiple times, they can potentially drain the contract's funds. 


",unchecked low level calls,2.0,546.0,6.0,2.7757439613342285
50,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Transfers:** The `superTransfer` function doesn't check for reentrancy. It allows the attacker to call the function multiple times, potentially draining the contract's funds.
* **Potential for Reentrancy:**  The `superTransfer` function calls the ERC20 token's `transfer` function. If an attacker can call the function multiple times, they can potentially drain the contract's funds. 


",unchecked low level calls,2.0,546.0,6.0,2.699860095977783
51,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract calls the `transfer` function of the ERC20 token with the `_recipient` and `amount` parameters. This function does not check if the `_recipient` is a valid address or if the `amount` is valid. This can lead to a reentrancy attack, where an attacker can call the `superTransfer` function multiple times to drain the contract of funds. 
",unchecked low level calls,2.0,526.0,6.0,2.4230291843414307
52,unchecked low level calls,"YES

The `caddress.call` function is vulnerable to reentrancy attacks.  The `caddress.call` function does not have any checks for reentrancy. 
",unchecked low level calls,2.0,471.0,6.0,2.5567522048950195
53,unchecked low level calls,"YES
 
The `superTransfer` function allows an attacker to transfer tokens to any address by simply calling it with the correct parameters. This is a classic reentrancy vulnerability. 
",unchecked low level calls,2.0,471.0,6.0,2.5360140800476074
54,unchecked low level calls,"YES

The `ParaTransfer` contract calls the `transfer` function of an ERC20 token, which is a standard ERC20 token.  The `transfer` function of an ERC20 token is not a standard Solidity function.  This means that the `ParaTransfer` contract is vulnerable to a reentrancy attack. 
",unchecked low level calls,2.0,501.0,6.0,2.3707637786865234
55,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Transfers:** The `superTransfer` function allows for multiple transfers to different addresses. 
* **Reentrancy Vulnerability:**  An attacker could call `superTransfer` multiple times within a short timeframe, potentially draining the contract's funds. 
* **Lack of Locking:** The function doesn't lock the transfer process, allowing for potential re-entrancy. 


",unchecked low level calls,2.0,541.0,6.0,2.982743501663208
56,unchecked low level calls,"YES

The `superTransfer` function calls the `transfer` function of the ERC20 token contract. This function is vulnerable to reentrancy attacks. 

Here's why:

* **Reentrancy:** The `superTransfer` function calls the `transfer` function of the ERC20 token contract. This function can be vulnerable to reentrancy attacks if the `transfer` function is not properly protected. 
* **Unprotected `transfer`:** The `transfer` function of the ERC20 token contract is not protected against reentrancy attacks. 
* **Potential for Multiple Calls:** An attacker could call `superTransfer` multiple times, each time attempting to transfer tokens to a different address. 
* **Unintended Transfers:** The attacker could potentially transfer tokens to their own address or to another address that they control. 



",unchecked low level calls,2.0,603.0,6.0,2.3725860118865967
57,unchecked low level calls,"YES
 
The `superTransfer` function allows an attacker to transfer tokens to any address by simply calling it with the correct parameters. This is a classic reentrancy vulnerability. 
",unchecked low level calls,2.0,471.0,6.0,2.2577781677246094
58,unchecked low level calls,"YES

The `ParaTransfer` contract calls the `transfer` function of the ERC20 token contract. This function is not explicitly audited, and the `superTransfer` function does not check the return value of the ERC20 transfer function. This can lead to a reentrancy attack, where an attacker can call the `superTransfer` function multiple times to drain the contract of funds. 
",unchecked low level calls,4.0,514.0,6.0,3.1946637630462646
59,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract is vulnerable to reentrancy attacks.  Here's why:

* **Unprotected Transfers:** The `superTransfer` function allows the `parachute` contract to transfer tokens to multiple addresses. 
* **Reentrancy Vulnerability:**  An attacker could call `superTransfer` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Locking:** The function doesn't lock the transfer until all tokens are transferred. 


",unchecked low level calls,2.0,544.0,6.0,3.555874824523926
60,unchecked low level calls,"YES

The `superTransfer` function calls the `transfer` function of the ERC20 token contract.  This function is vulnerable to reentrancy attacks. 
",unchecked low level calls,2.0,468.0,6.0,2.944777727127075
61,unchecked low level calls,"YES
 
The `callFirstTarget` and `callSecondTarget` functions call external contracts (`firstTarget` and `secondTarget`) with the `value` parameter.  This can lead to reentrancy attacks, where an attacker can repeatedly call the function to drain funds. 
",unchecked low level calls,2.0,492.0,6.0,2.813037633895874
62,unchecked low level calls,"YES

The `addr.call.value(0 wei)();` line is vulnerable to reentrancy attacks.  It allows an attacker to repeatedly call the function and drain the contract of funds. 
",unchecked low level calls,2.0,475.0,6.0,2.4480679035186768
63,unchecked low level calls,"YES

The `superTransfer` function in the `ParaTransfer` contract calls the `transfer` function of the ERC20 token with the `msg.sender` as the recipient. This is a potential vulnerability because the `transfer` function in an ERC20 token is not designed to be called directly by a contract. 

It is possible for an attacker to call `superTransfer` with malicious intent, potentially draining funds from the contract. 
",unchecked low level calls,2.0,523.0,6.0,2.2165896892547607
64,unchecked low level calls,"YES
 
The `superTransfer` function uses the `transfer` function of the ERC20 token, which is a low-level function.  This function does not propagate errors, meaning that if the transfer fails, the contract will continue to execute. This can lead to unexpected outcomes and vulnerabilities. 
",unchecked low level calls,3.0,494.0,6.0,2.1035776138305664
65,unchecked low level calls,"YES

The `ParaTransfer` contract calls the `transfer` function of the ERC20 token contract. This function is not explicitly audited, and the `superTransfer` function does not check the return value of the ERC20 transfer function. This can lead to a reentrancy attack, where an attacker can call the `superTransfer` function multiple times to drain the contract of funds. 
",unchecked low level calls,4.0,514.0,6.0,3.341444492340088
66,unchecked low level calls,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `WithdrawToHolder` function calls `_addr.call.value(_wei);` which is a low-level call. This means that the contract can be called multiple times within a single transaction. 
* **Potential for Exploitation:**  An attacker could call `WithdrawToHolder` repeatedly, potentially draining funds from the contract. 


Let me know if you'd like to explore other aspects of smart contract security! 
",unchecked low level calls,2.0,546.0,6.0,1.940328598022461
67,unchecked low level calls,"YES
 
The `superTransfer` function in the `ParaTransfer` contract is vulnerable to reentrancy attacks.  Here's why:

* **Reentrancy:**  The `superTransfer` function calls the ERC20 token's `transfer` function.  This function is susceptible to reentrancy because it doesn't handle the possibility of a contract calling itself again. 
* **Potential for Exploits:**  An attacker could call `superTransfer` multiple times within a short period, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",unchecked low level calls,2.0,557.0,6.0,2.8359580039978027
68,unchecked low level calls,"YES

The `superTransfer` function calls the `transfer` function of the ERC20 token contract. This function is not explicitly audited, and the `transfer` function itself is vulnerable to reentrancy attacks. 
",unchecked low level calls,2.0,479.0,6.0,2.7041661739349365
69,unchecked low level calls,"YES

The `superTransfer` function in the `ParaTransfer` contract calls the `transfer` function of the ERC20 token with the `msg.sender` as the recipient. This is a potential vulnerability because the `transfer` function in an ERC20 token is not designed to be called directly by a contract. 

It is possible for an attacker to call `superTransfer` with malicious intent, potentially draining funds from the contract. 
",unchecked low level calls,2.0,523.0,6.0,2.2523112297058105
70,unchecked low level calls,"YES

The `ParaTransfer` contract calls the `transfer` function of the ERC20 token contract. This function is not audited and could be vulnerable to reentrancy attacks. 
",unchecked low level calls,2.0,472.0,6.0,2.3215017318725586
71,unchecked low level calls,"YES
 
The `superTransfer` function uses `_target.call.value(_value)`. This is a low-level call that doesn't propagate errors.  It's possible for the transfer to fail, but the contract doesn't handle this failure. This can lead to unexpected outcomes and potential vulnerabilities. 
",unchecked low level calls,3.0,491.0,6.0,3.361445426940918
72,unchecked low level calls,"YES
 
The `superTransfer` function uses the `transfer` function of the ERC20 token, which is a low-level function that does not propagate errors. This means that if the `transfer` function fails, the contract will continue to execute, potentially leading to unexpected outcomes. 
",unchecked low level calls,3.0,492.0,6.0,1.9580953121185303
73,front running,"YES
 
The `ParaTransfer` contract allows for the transfer of ERC20 tokens to multiple addresses. This is a potential vulnerability because it could be exploited by an attacker to drain funds from the contract. 
",front running,2.0,474.0,6.0,2.4786579608917236
74,front running,"NO 
",front running,1.0,435.0,6.0,2.737999200820923
75,front running,"YES
 
The contract uses the `transferFrom` function, which allows users to transfer tokens from one address to another. However, the contract does not have any checks in place to prevent malicious users from exploiting this function. 

For example, a malicious user could call `transferFrom` with a large amount of tokens and transfer them to a different address. This could lead to a loss of funds for the original owner of the tokens. 
",front running,2.0,521.0,6.0,2.9930503368377686
76,front running,"YES
 
The contract uses the `superTransfer` function to transfer tokens to multiple addresses. This function is vulnerable to front-running attacks because the `superTransfer` function is public and anyone can call it. This means that a malicious user could call the `superTransfer` function with a large amount of tokens and then immediately transfer the tokens to another address. This could result in a loss of funds for the original owner of the tokens. 
",front running,3.0,521.0,6.0,2.33181095123291
77,arithmetic,"YES

The `superTransfer` function in the `ParaTransfer` contract uses the `transfer` function of an ERC20 token.  This function can be vulnerable to integer overflows if the `amount` parameter is not carefully checked. 
",arithmetic,3.0,481.0,6.0,3.9428870677948
78,arithmetic,"YES

The `ParaTransfer` contract uses the `transfer` function of an ERC20 token.  This function is susceptible to integer overflows if the amount being transferred is too large. 
",arithmetic,3.0,471.0,6.0,1.9968457221984863
79,arithmetic,"YES

The `ParaTransfer` contract uses the `transfer` function of an ERC20 token.  This function is susceptible to integer overflows if the amount being transferred exceeds the maximum value allowed by the ERC20 token. 
",arithmetic,3.0,478.0,6.0,3.2138423919677734
80,arithmetic,"YES

The `ParaTransfer` contract uses the `transfer` function of an ERC20 token.  This function is susceptible to integer overflows and underflows, as the `amount` parameter can be larger than the maximum value that the ERC20 token can hold. 
",arithmetic,3.0,487.0,6.0,2.30877423286438
81,arithmetic,"NO 
",arithmetic,1.0,434.0,6.0,1.9097459316253662
82,arithmetic,"YES

The `superTransfer` function in the `ParaTransfer` contract allows an attacker to transfer a large amount of tokens to multiple addresses. This is a classic reentrancy attack vector. 
",arithmetic,2.0,472.0,6.0,2.5488014221191406
83,arithmetic,"YES

The `ParaTransfer` contract uses the `transfer` function of the ERC20 token contract.  This function is vulnerable to integer overflows and underflows because it does not have any checks for the input amount. If the amount is too large, it could overflow the `uint256` data type, leading to unexpected behavior and potential loss of funds. 
",arithmetic,3.0,506.0,6.0,1.7544987201690674
84,arithmetic,"YES

The `ParaTransfer` contract uses the `transfer` function of an ERC20 token.  This function is susceptible to integer overflows and underflows, as the `amount` parameter can be larger than the maximum value that the ERC20 token can hold. 
",arithmetic,3.0,487.0,6.0,2.1530683040618896
85,arithmetic,"YES

The `ParaTransfer` contract uses the `transfer` function of an ERC20 token.  This function is susceptible to integer overflows if the amount being transferred is too large. 
",arithmetic,3.0,471.0,6.0,2.684516668319702
86,arithmetic,"YES

The contract uses unsigned integers for its state variables and functions.  This makes it vulnerable to integer overflows and underflows.  The `superTransfer` function, in particular, could be exploited to cause overflows. 
",arithmetic,3.0,479.0,6.0,2.7221994400024414
87,arithmetic,"YES

The `superTransfer` function in the `ParaTransfer` contract uses the `transfer` function of the ERC20 token contract. This function is vulnerable to integer overflows and underflows. 
",arithmetic,3.0,473.0,6.0,2.9616000652313232
88,arithmetic,"YES

The `ParaTransfer` contract uses the `transfer` function of an ERC20 token.  This function is susceptible to integer overflows if the amount being transferred is too large. 
",arithmetic,3.0,471.0,6.0,2.2543065547943115
89,arithmetic,"YES

The `ParaTransfer` contract uses the `transfer` function from the ERC20 contract.  This function is vulnerable to reentrancy attacks. 
",arithmetic,2.0,464.0,6.0,3.853156089782715
90,arithmetic,"YES

The `ParaTransfer` contract uses the `transfer` function of the ERC20 token contract.  This function is vulnerable to integer overflows and underflows because it does not have any checks for the amount of tokens being transferred. 
",arithmetic,3.0,481.0,6.0,1.8843879699707031
91,bad randomness,"YES
 
The contract relies on the `blockhash` function, which is deterministic. This means that the hash of a block is predictable, and therefore, the contract's logic is vulnerable to attacks. 
",bad randomness,3.0,474.0,6.0,2.298755645751953
92,bad randomness,"YES
 
The code uses `block.number` to generate random numbers for the `chooseWinner` function. This is a major security vulnerability because `block.number` is predictable and can be manipulated by miners. 
",bad randomness,3.0,475.0,6.0,1.6874885559082031
93,bad randomness,"YES
The code uses a function `rand` that relies on the block hash and a constant factor. This makes it susceptible to attacks where the attacker can manipulate the block hash to influence the random number. 
",bad randomness,3.0,475.0,6.0,2.600292921066284
94,bad randomness,"YES
 
The `makeBet` function relies on the block number being even to determine the winner. This is a predictable pattern, and an attacker could manipulate the block number to win. 
",bad randomness,3.0,471.0,6.0,2.8268141746520996
95,bad randomness,"YES
 
The contract uses `keccak256` to generate a random number, but it's vulnerable to predictable attacks. The `block.blockhash` and `block.number` values are predictable, and the attacker can manipulate them to guess the `answer`. 
",bad randomness,3.0,484.0,6.0,2.7248475551605225
96,bad randomness,"YES
 
The contract uses the `block.timestamp` for the `salt` variable, which is a predictable source of randomness. This makes the generated random numbers susceptible to manipulation by attackers. 
",bad randomness,3.0,471.0,6.0,2.5040535926818848
97,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. 
* **Reentrancy Vulnerability:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,538.0,6.0,3.209332227706909
98,reentrancy,"YES
 
The `superTransfer` function in the `ParaTransfer` contract allows an attacker to transfer tokens to any address by calling the `transfer` function of the ERC20 contract. This is a classic reentrancy attack vector. 
",reentrancy,3.0,482.0,6.0,3.5680084228515625
99,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution:** The code doesn't specify how the `_am` value is handled. 
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times, potentially draining the contract's funds. 


",reentrancy,3.0,532.0,6.0,3.1065163612365723
100,reentrancy,"YES

The `superTransfer` function in the `ParaTransfer` contract allows an attacker to transfer tokens to any address by calling the `transfer` function of the ERC20 contract. This is a classic reentrancy vulnerability. 


",reentrancy,3.0,482.0,6.0,2.2755160331726074
101,reentrancy,"YES
 
The `ParaTransfer` contract uses the `superTransfer` function to transfer ERC20 tokens. This function allows an attacker to call it with the `parachute` address as the sender, and an array of addresses and amounts. This could be exploited to transfer funds to any address. 
",reentrancy,2.0,495.0,6.0,2.097054958343506
102,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution Flow:** The code doesn't clearly define how the `Collect` function interacts with the external contract. 
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times, potentially draining funds from the contract. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,552.0,6.0,2.552717924118042
103,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy Vulnerability:** This creates a reentrancy vulnerability because the contract's state can be altered in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,540.0,6.0,3.41774320602417
104,reentrancy,"YES
 
The `superTransfer` function in the `ParaTransfer` contract allows an attacker to call the `transfer` function of the ERC20 token contract multiple times with different amounts. This can lead to a reentrancy attack, as the `withdrawReward` function in the `Reentrancy_bonus` contract is vulnerable to reentrancy. 
",reentrancy,3.0,505.0,6.0,2.653470277786255
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,544.0,6.0,2.348417282104492
106,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call the `Collect` function multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any safeguards to prevent multiple calls to the `Collect` function. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,550.0,6.0,2.76562237739563
107,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. 
* **Reentrancy Vulnerability:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,538.0,6.0,2.2743120193481445
108,reentrancy,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `WithdrawToHolder` function allows external calls to be made to the `_addr` address. 
* **Potential for Reentrancy:**  An attacker could call `WithdrawToHolder` multiple times in rapid succession, potentially draining funds from the contract. 
* **Lack of Safeguards:** The function doesn't include any checks to prevent multiple calls or ensure that the funds are not being drained repeatedly. 


",reentrancy,3.0,547.0,6.0,2.3996901512145996
109,reentrancy,"YES

The contract uses the `airDrop` function, which allows an attacker to call the `airDrop` function repeatedly, draining the contract of funds. This is a classic reentrancy attack. 
",reentrancy,3.0,476.0,6.0,1.3961286544799805
110,reentrancy,"YES
 
The `CashOut` function is vulnerable to reentrancy attacks.  Here's why:

* **Unrestricted External Calls:** The `CashOut` function allows external calls to the contract's `msg.sender` address.
* **Potential for Reentrancy:**  An attacker could call `CashOut` multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any checks to prevent multiple calls or to ensure that the `msg.sender` address is not calling itself repeatedly. 


",reentrancy,3.0,548.0,6.0,2.3914387226104736
111,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `Collect` function allows external calls to be made within the contract.
* **Potential for Reentrancy:**  An attacker could call the `Collect` function multiple times within a short period, potentially draining the contract's funds. 
* **Lack of Safeguards:** The code lacks any safeguards to prevent multiple calls to the `Collect` function. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,550.0,6.0,2.5026943683624268
112,reentrancy,"YES
 
The `ParaTransfer` contract allows for a reentrancy attack.  The `superTransfer` function allows the `parachute` contract to call the ERC20 contract multiple times, potentially draining funds. 
",reentrancy,3.0,479.0,6.0,2.5748140811920166
113,reentrancy,"YES

The `ParaTransfer` contract has a potential reentrancy vulnerability.  The `superTransfer` function allows for the transfer of tokens to multiple addresses.  This function is susceptible to reentrancy attacks because it allows the attacker to call the `superTransfer` function multiple times, potentially draining the contract's funds. 
",reentrancy,3.0,501.0,6.0,2.0469729900360107
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",reentrancy,3.0,474.0,6.0,3.0131306648254395
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",reentrancy,3.0,474.0,6.0,2.5791945457458496
116,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks. 

Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. 
* **Potential for Reentrancy:** This creates a window for an attacker to repeatedly call the `Collect` function, draining the contract's funds. 


",reentrancy,3.0,523.0,6.0,2.603778600692749
117,reentrancy,"YES
 
The `ParaTransfer` contract allows for a reentrancy attack.  The `superTransfer` function allows the `parachute` contract to call the ERC20 transfer function multiple times.  This can lead to a reentrancy attack. 
",reentrancy,3.0,487.0,6.0,2.194462537765503
118,reentrancy,"YES

The `ParaTransfer` contract has a vulnerability that allows for reentrancy attacks.  The `superTransfer` function allows the `parachute` contract to call the ERC20 token's `transfer` function multiple times, potentially leading to a reentrancy attack. 
",reentrancy,3.0,492.0,6.0,2.8217644691467285
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",reentrancy,3.0,474.0,6.0,2.845599889755249
120,reentrancy,"YES
 
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",reentrancy,3.0,463.0,6.0,2.0221118927001953
121,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution Flow:** The code doesn't clearly define how the `Collect` function interacts with the external contract. 
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times, potentially draining the contract's funds. 


",reentrancy,3.0,537.0,6.0,2.9631752967834473
122,reentrancy,"YES
 
The `CashOut` function allows an attacker to call the `superTransfer` function with a malicious address and potentially drain the contract of funds. 
",reentrancy,3.0,466.0,6.0,2.3572540283203125
123,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy Vulnerability:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


",reentrancy,3.0,524.0,6.0,2.3662476539611816
124,reentrancy,"YES
 
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",reentrancy,3.0,463.0,6.0,2.489943027496338
125,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a potential reentrancy vulnerability. 
* **Unclear Execution:** The code doesn't specify how the `_am` value is handled. 
* **Potential for Reentrancy:**  An attacker could call `Collect` multiple times, potentially draining the contract's funds. 


",reentrancy,3.0,532.0,6.0,2.506470203399658
126,reentrancy,"YES

The `ParaTransfer` contract allows for a reentrancy attack.  The `superTransfer` function allows the `parachute` contract to call the ERC20 transfer function multiple times. This can lead to a reentrancy attack. 
",reentrancy,3.0,486.0,6.0,4.5655436515808105
127,time manipulation,"NO 
",time manipulation,1.0,435.0,6.0,2.391659736633301
128,time manipulation,"YES
 
The contract relies heavily on `block.timestamp` for its functionality, making it susceptible to manipulation by miners. This is a classic vulnerability, as miners can potentially alter the timestamp to their advantage. 
",time manipulation,3.0,474.0,6.0,2.236912965774536
129,time manipulation,"YES
 
The `lastInvestmentTimestamp` variable is directly set to `block.timestamp`, making it susceptible to manipulation by miners. This could allow an attacker to manipulate the timestamp and potentially gain control of the contract. 
",time manipulation,3.0,476.0,6.0,2.7894561290740967
130,time manipulation,"YES
 
The contract relies on the `now` variable to determine the current block timestamp. This can be manipulated by miners, potentially allowing an attacker to control the contract's behavior. 
",time manipulation,3.0,470.0,6.0,2.652132511138916
131,time manipulation,"YES
 
The contract relies on `block.timestamp` for the `random` variable. This is vulnerable to manipulation by miners, as they can change the reported timestamp. 
",time manipulation,3.0,467.0,6.0,3.2782797813415527
132,short addresses,"YES
 
The `ParaTransfer` contract has a potential vulnerability related to reentrancy.  Here's why:

* **Reentrancy:**  The `superTransfer` function allows an attacker to repeatedly call the function, potentially draining the contract's funds. 
* **Potential for Exploitation:**  The `superTransfer` function doesn't explicitly handle reentrancy.  An attacker could exploit this by calling the function multiple times within a short timeframe. 
* **Impact:**  This vulnerability could allow an attacker to drain the contract's funds. 


",short addresses,2.0,545.0,6.0,2.5596654415130615
133,denial of service,"YES
 
The contract `ParaTransfer` has a vulnerability that allows an attacker to drain funds from the contract. This is because the `superTransfer` function allows the attacker to transfer funds to any address. 
",denial of service,2.0,476.0,6.0,3.0510683059692383
134,denial of service,"YES

The contract's `clearDOS` function has a potential denial of service vulnerability.  It clears the array, which could lead to a denial of service attack if the attacker can control the `numElements` variable. 
",denial of service,3.0,480.0,6.0,2.4845943450927734
135,denial of service,"YES
 
The code has a vulnerability related to Denial of Service.  The lines `creditorAddresses = new address[](0);` and `creditorAmounts = new uint[](0);`  are vulnerable to Denial of Service attacks. 
",denial of service,3.0,485.0,6.0,1.973585605621338
136,denial of service,"YES

The `ParaTransfer` contract has a vulnerability that allows an attacker to drain funds from the contract. 

Specifically, the `superTransfer` function allows an attacker to call the `transfer` function of the ERC20 token contract with the `parachute` address as the recipient and any amount of tokens. This can be exploited to drain funds from the contract. 
",denial of service,2.0,511.0,6.0,2.2014577388763428
137,denial of service,"YES

The `ParaTransfer` contract has a vulnerability that allows an attacker to drain funds from the contract. 

Specifically, the `superTransfer` function allows an attacker to call the `transfer` function of the ERC20 token contract with the `msg.sender` address as the recipient and any amount of tokens. This can be exploited to drain funds from the contract. 
",denial of service,2.0,510.0,6.0,2.741680145263672
138,denial of service,"YES

The `ParaTransfer` contract has a vulnerability that allows for a denial of service attack.  Specifically, the `superTransfer` function allows the `parachute` contract to transfer tokens to any address. This could be exploited by an attacker to drain funds from the contract. 
",denial of service,3.0,493.0,6.0,2.126321792602539
