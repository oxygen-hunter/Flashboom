case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"NO 
",904,4,0.405271053314209
12,access control,"NO 
",600,4,0.4022502899169922
13,access control,"YES
The contract's `DynamicPyramid` function allows anyone to call it, making it vulnerable to attacks. 
",2842,26,1.8224740028381348
14,access control,"NO 
",775,4,0.42727041244506836
15,access control,"YES
 
The contract uses `msg.sender` to determine the owner. This is a common vulnerability, as it can be manipulated by attackers. 
",614,34,2.0207149982452393
16,access control,"NO 
",714,4,0.3784792423248291
17,access control,"NO 
",562,4,0.4454796314239502
18,access control,"NO 
",805,4,0.3998994827270508
19,access control,"NO 
",600,4,0.3676261901855469
20,access control,"NO 
",796,4,0.39536237716674805
21,access control,"NO 
",557,4,0.4059445858001709
22,access control,"NO 
",825,4,0.39574241638183594
23,access control,"NO 
",500,4,0.36377406120300293
24,access control,"YES
 
The contract uses `msg.sender` to determine the owner. This is a common vulnerability, as it can be manipulated by attackers. 
",608,34,2.0241267681121826
25,access control,"NO 
",579,4,0.3561692237854004
26,access control,"YES

The contract uses `fibonacciLibrary.delegatecall` to execute external functions. This is a common vulnerability, as it can be exploited to call functions with malicious intent. 
",1084,39,2.3367018699645996
27,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling the target address with the provided data and value. This is a classic example of a reentrancy vulnerability. 
",1402,40,2.4343035221099854
28,unchecked low level calls,"YES
 
The `tokens_buy` function calls `transferFrom` with `owner` and `msg.sender` as the first two arguments. This is a potential reentrancy vulnerability. 
",1597,44,2.719228982925415
29,unchecked low level calls,"YES

The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",1100,44,2.766141176223755
30,unchecked low level calls,"YES
 
The code has several vulnerabilities:

* **Unchecked Return Values:** The `claimThrone` function returns a boolean value, but it doesn't check the return value. This can lead to unexpected behavior.
* **Low Level Function Calls:** The `msg.sender.send` function is vulnerable to reentrancy attacks. 
* **Unprotected Access Control:** The `transferOwnership` function is vulnerable to reentrancy attacks. 
* **Arithmetic Overflows:** The code does not handle arithmetic overflows and underflows well. 
* **Timestamp Dependence:** The code uses the block timestamp for critical functionality, which can be manipulated by miners. 
* **Unprotected `send` Function:** The `send` function is vulnerable to reentrancy attacks. 



",2492,165,9.560779094696045
31,unchecked low level calls,"YES

The `caddress.call` function is vulnerable to reentrancy attacks.  The contract calls the `caddress` function with the `id` and the `from`, `_tos[i]` and `v` parameters.  This can be exploited by an attacker to call the `caddress` function repeatedly, draining the contract of funds. 
",679,77,4.397667646408081
32,unchecked low level calls,"YES
 
The `cash` function is vulnerable because it does not check the return value of `winner.send(subpot)`. This can lead to a reentrancy attack, where an attacker can repeatedly call the `cash` function to drain the contract's funds. 
",2624,61,3.758225202560425
33,unchecked low level calls,"NO 
",536,4,0.3696889877319336
34,unchecked low level calls,"NO 
",868,4,0.42536211013793945
35,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling the target address with the provided data and value. This is a classic example of a reentrancy vulnerability. 
",1572,40,2.4571473598480225
36,unchecked low level calls,"YES
 
The `WithdrawToken` function in the `TokenBank` contract calls the `token.call` function with a `bytes4` value representing the `transfer` function. This is a low-level call that does not propagate errors. If the `transfer` function fails, the contract will continue to execute, potentially leading to unexpected outcomes. 
",1471,76,4.461869239807129
37,unchecked low level calls,"YES

The `contract_address.call` function is vulnerable because it doesn't check the return value. If the `call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and security vulnerabilities. 
",854,50,2.9632346630096436
38,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to a loss of funds. 
",1499,63,3.7241480350494385
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions, which are low-level functions that can be exploited.  The `call.value` function can be used to send a value to an address, and the `gas` function can be used to set the gas limit for the transaction.  These functions can be used to send a large amount of gas to an address, which can be used to drain the contract of funds. 
",2419,97,5.6327924728393555
40,unchecked low level calls,"YES
 
The `execute` function is vulnerable because it calls a function on the target contract without any checks for success or failure. This can lead to reentrancy attacks, where an attacker can repeatedly call the `execute` function to drain the contract of funds. 
",1932,58,3.4534525871276855
41,unchecked low level calls,"YES
 
The `execute` function is vulnerable because it calls a function on the target address (`_dst`) without any checks. This means an attacker could potentially exploit this vulnerability to drain funds from the contract. 
",1272,47,2.7990541458129883
42,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling the target address with the provided data and value. This is a classic example of a reentrancy vulnerability. 
",1542,40,2.4614198207855225
43,unchecked low level calls,"YES
 
 The `withdrawLeftOver` function calls `msg.sender.send(this.balance)`. This is a potential reentrancy vulnerability.  The `send` function can fail, and the contract will continue to execute. 
",658,53,3.1120622158050537
44,unchecked low level calls,"YES

The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",1100,44,2.6376051902770996
45,unchecked low level calls,"YES
 
The `_dst.call.value(_value)(_data);` line is vulnerable because it uses the `call` function, which does not propagate errors. This means that if the `call` function fails, the contract will continue to execute the rest of the code without any error handling. This can lead to unexpected behavior and potential vulnerabilities. 
",1900,77,4.523578405380249
46,unchecked low level calls,"NO 
",573,4,0.35539984703063965
47,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that does not propagate errors. This means that if the `token.call` function fails, the contract will not revert. This can lead to unexpected behavior and potential vulnerabilities. 
",1415,61,3.7418601512908936
48,unchecked low level calls,"YES

The `caddress.call` function is vulnerable to reentrancy attacks.  The code does not check for the return value of the `caddress.call` function. 
",683,41,2.4213826656341553
49,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1578,45,2.729691743850708
50,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and vulnerabilities. 
",1578,45,2.7572295665740967
51,unchecked low level calls,"NO 
",752,4,0.4142780303955078
52,unchecked low level calls,"YES

The contract uses `caddress.call()` which is a low-level function that does not propagate errors. This means that if the `caddress.call()` function fails, the contract will continue to execute the rest of the code without any error handling. This can lead to unexpected behavior and potential vulnerabilities. 
",1015,67,3.838387966156006
53,unchecked low level calls,"YES

The `target.call.value(msg.value)()` line is vulnerable to reentrancy attacks.  The `call` function does not have any built-in reentrancy protection. 
",662,45,2.63523268699646
54,unchecked low level calls,"YES

The `caddress.call` function is vulnerable to reentrancy attacks.  The contract calls the `caddress` function with the `id` and other parameters, but it does not check the return value of the `caddress.call` function. This can lead to a reentrancy attack, where an attacker can call the `caddress.call` function multiple times to drain the contract of funds. 
",681,90,5.1396849155426025
55,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling the target address with the provided data and value. This is a classic example of a reentrancy vulnerability. 
",1538,40,2.4957141876220703
56,unchecked low level calls,"YES
 
The contract uses `fuck.call(bytes4(sha3(""giveBlockReward()"")));` which is a low-level call. This can lead to unexpected behavior and potential vulnerabilities. 
",679,45,2.6003170013427734
57,unchecked low level calls,"YES
 
The `proxy` function uses `target.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",946,46,2.726759910583496
58,unchecked low level calls,"YES

The `caddress.call` function is vulnerable to reentrancy attacks.  The code does not check for the return value of the `caddress.call` function. 
",683,41,2.437255859375
59,unchecked low level calls,"YES
 
The `Command` function allows arbitrary code execution by calling the target address with the provided data and value. This is a classic example of a reentrancy vulnerability. 
",1542,40,2.452467203140259
60,unchecked low level calls,"NO 
",482,4,0.3619205951690674
61,unchecked low level calls,"YES
 
The `callFirstTarget` and `callSecondTarget` functions call external contracts with `msg.value` as the argument. This can lead to reentrancy attacks, as the attacker can call the function repeatedly to drain the contract's funds. 
",2309,58,3.549211263656616
62,unchecked low level calls,"YES

The `addr.call.value(0 wei)();` line is vulnerable to reentrancy attacks.  It allows an attacker to repeatedly call the function and drain the contract of funds. 
",789,43,2.5157525539398193
63,unchecked low level calls,"NO 
",790,4,0.3895688056945801
64,unchecked low level calls,"YES
 
The `proxy` function uses `target.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",944,46,2.7319328784942627
65,unchecked low level calls,"YES

The `caddress.call` function is vulnerable to reentrancy attacks.  The `caddress.call` function does not have any checks for reentrancy. 
",724,40,2.399338483810425
66,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level call that doesn't propagate errors. This means that if the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",1499,64,3.786485195159912
67,unchecked low level calls,"YES
 
The `Command` function uses `adr.call.value(msg.value)(data);` which is a low-level call.  This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",1486,67,3.9355225563049316
68,unchecked low level calls,"YES

The `withdraw()` function calls `msg.sender.call.value(balances[msg.sender])()` which is a low-level call. This function does not propagate errors and can lead to unexpected behavior. 
",623,48,2.8152668476104736
69,unchecked low level calls,"NO 
",792,4,0.39418458938598633
70,unchecked low level calls,"YES

The `caddress.call` function is vulnerable to reentrancy attacks.  The contract calls the `caddress` function with the `id` and the `from`, `_tos[i]`, and `v[i]` arguments.  This means that an attacker could call the contract multiple times to drain the contract of funds. 
",687,75,4.2521045207977295
71,unchecked low level calls,"YES

The `sendMoney` function uses `_target.call.value(_value)();`. This is a low-level call that doesn't propagate errors.  It's possible for the call to fail, and the contract will continue to execute, potentially leading to unexpected outcomes. 
",735,62,3.677807569503784
72,unchecked low level calls,"YES
 
The `proxy` contract's `call` function is vulnerable to reentrancy attacks.  The `call` function does not have any checks for reentrancy. 
",944,42,2.4896233081817627
73,front running,"NO 
",734,4,0.39004063606262207
74,front running,"NO 
",676,4,0.37784671783447266
75,front running,"NO 
",2072,4,0.5489280223846436
76,front running,"NO 
",989,4,0.4096710681915283
77,arithmetic,"YES

The `init` function in the `IntegerOverflowMappingSym1` contract subtracts `v` from `map[k]`. This can lead to integer overflows if `v` is large enough. 
",490,46,2.6481986045837402
78,arithmetic,"YES

The code uses the `SafeMath` library, which implements SafeMath functions.  However, the `sub` function in the `SafeMath` library is vulnerable to integer overflows.  This is because it does not check for overflows before performing the subtraction. 
",455,54,3.141202926635742
79,arithmetic,"NO 
",447,4,0.3485379219055176
80,arithmetic,"YES

The code uses the `sub` function from the `SafeMath` library, which performs subtraction.  However, the `SafeMath` library does not handle arithmetic overflows and underflows well. This can lead to vulnerabilities. 
",455,48,2.7992703914642334
81,arithmetic,"NO 
",738,4,0.40049195289611816
82,arithmetic,"NO 
",843,4,0.401475191116333
83,arithmetic,"YES

The `run` function subtracts the `input` from the `count` variable. This could lead to integer overflows if the `input` is large enough. 
",561,38,2.2591373920440674
84,arithmetic,"NO 
",468,4,0.3598313331604004
85,arithmetic,"YES

The `run` function in the `IntegerOverflowMultiTxOneFuncFeasible` contract subtracts the `input` from the `count` variable.  This could lead to integer overflows if the `input` is large enough. 
",543,52,2.969978094100952
86,arithmetic,"YES

The code uses unsigned integers and does not handle arithmetic overflows and underflows well.  The functions `overflowaddtostate`, `overflowmultostate`, `underflowtostate`, `overflowlocalonly`, `overflowmulocalonly`, and `underflowlocalonly` can lead to integer overflows and underflows. 
",858,68,4.0776917934417725
87,arithmetic,"NO 
",695,4,0.3750617504119873
88,arithmetic,"NO 
",455,4,0.34501028060913086
89,arithmetic,"YES

The code uses the `add` function which adds a value to the `sellerBalance` variable. This function does not have any checks for overflows. If the `value` is too large, it could overflow the `sellerBalance` variable, leading to unexpected behavior and potential loss of funds. 
",475,64,3.664970874786377
90,arithmetic,"NO 
",537,4,0.3616495132446289
91,bad randomness,"NO 
",847,4,0.44719719886779785
92,bad randomness,"YES
 
The code uses `block.number` to generate random numbers for the `chooseWinner` function. This is a major security vulnerability because it is deterministic and predictable.  
",2702,40,2.6013479232788086
93,bad randomness,"YES
The code uses a function `rand` that relies on the block hash to generate a pseudo-random number. This is a known security vulnerability as it is predictable and can be manipulated by attackers. 
",3041,44,2.8183906078338623
94,bad randomness,"YES
 
The code uses a simple random number generator based on the block number. This is vulnerable to attacks as the block number can be manipulated by miners. 
",1005,36,2.172048807144165
95,bad randomness,"YES
 
The contract uses `keccak256` to generate the `answer` which is a random number. However, the `keccak256` function is deterministic and predictable. This means that the attacker can calculate the `answer` by knowing the previous block hash and the current timestamp. 
",698,67,3.910201072692871
96,bad randomness,"YES

The contract uses a predictable source of randomness, making it vulnerable to attacks. The `random` function relies on the `block.timestamp` and other predictable values, which can be manipulated by attackers. 
",790,45,2.665647506713867
97,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1270,121,6.906876087188721
98,reentrancy,"YES

The `withdrawFunds` function allows an attacker to call `msg.sender.call.value(_weiToWithdraw)()` before the contract has finished executing the withdrawal. This allows the attacker to call the `withdrawFunds` function again and again, draining the contract of funds. 
",810,61,3.586244821548462
99,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1344,120,6.938935279846191
100,reentrancy,"YES

The `withdraw` function allows an attacker to call `msg.sender.call.value(_amount)()` before the initial execution is complete. This creates a reentrancy vulnerability. 
",717,42,2.649325132369995
101,reentrancy,"NO 
",660,4,0.4242866039276123
102,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function multiple times, leading to a reentrancy attack. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1266,130,7.368445634841919
103,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1500,47,2.8456671237945557
104,reentrancy,"YES

The contract uses the `withdrawReward` function, which allows an external contract to call the `getFirstWithdrawalBonus` function again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",773,46,2.6763551235198975
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Reentrancy Vulnerability:**  This call to an external contract can be exploited by an attacker. The attacker can call the `Collect` function repeatedly, potentially draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1492,120,6.8065266609191895
106,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **Unrestricted External Calls:** The `Collect` function allows external calls to the contract before the initial execution is complete. 
* **Potential for Reentrancy:**  The `if(msg.sender.call.value(_am)())` line allows an attacker to call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1442,121,6.943025827407837
107,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1270,47,2.825033664703369
108,reentrancy,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `WithdrawToHolder` function allows external calls to the contract's `Withdraw` function. 
* **Potential for Reentrancy:**  An attacker could call `WithdrawToHolder` multiple times, each time attempting to drain funds from the contract. 
* **No Safeguards:** The contract lacks any safeguards to prevent this type of attack. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1384,128,7.34933066368103
109,reentrancy,"YES

The contract uses the `airDrop` function which allows an attacker to call the `airDrop` function repeatedly. This is a classic reentrancy attack. 
",985,37,2.3188555240631104
110,reentrancy,"YES

The `CashOut` function allows for a reentrancy attack.  The `msg.sender.call.value(_am)()` line allows an attacker to call the `CashOut` function repeatedly, draining the contract of funds. 
",1230,53,3.138805389404297
111,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **Unrestricted External Calls:** The `Collect` function allows external calls to the contract before the initial execution is complete. 
* **Potential for Reentrancy:**  The `if(msg.sender.call.value(_am)())` line allows an attacker to call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1434,121,6.877472877502441
112,reentrancy,"YES

The `withdrawAll` function allows an attacker to call the `withdrawAll` function again and again, draining the contract of funds. This is because the `call.value(oCredit)` function is not checked for reentrancy. 
",698,53,3.092886209487915
113,reentrancy,"NO 
",689,4,0.374204158782959
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1188,47,2.883749485015869
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1184,47,2.781947612762451
116,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1262,47,2.8507261276245117
117,reentrancy,"YES

The contract uses the `call.value` function to transfer funds. This function allows the contract to be re-entrancy vulnerable. 
",742,32,1.9867255687713623
118,reentrancy,"YES

The `withdrawBalance` function is vulnerable to reentrancy attacks.  The `if` statement allows an attacker to call the `withdrawBalance` function multiple times before the initial execution is complete. 
",685,45,2.6625607013702393
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1292,47,2.8372490406036377
120,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1158,47,2.805114507675171
121,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which allows an attacker to potentially call the contract again before the initial execution is complete. 
* **Reentrancy:** This creates a reentrancy vulnerability because the contract's state can be changed in the middle of its execution. 


Let me know if you'd like to explore other aspects of smart contract security! 
",1338,120,6.849794387817383
122,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1172,47,2.8231418132781982
123,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `if` statement allows the contract to call an external contract (`msg.sender.call.value(_am)`) before the initial execution is complete. 
* **Potential for Reentrancy:** This means an attacker could call the `Collect` function multiple times within a short period, draining the contract's funds. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",1266,122,6.912983417510986
124,reentrancy,"YES
 
The `CashOut` function allows for external calls to the contract. This is a classic reentrancy vulnerability. 
",1158,30,1.9088470935821533
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1342,47,2.793001174926758
126,reentrancy,"YES

The contract uses `msg.sender.call.value(amountToWithdraw)("""")` which allows for reentrancy attacks. 
",629,31,1.842085361480713
127,time manipulation,"NO 
",531,4,0.36235547065734863
128,time manipulation,"YES
 
The contract relies heavily on `block.timestamp` for its functionality, making it susceptible to manipulation by miners. This is a classic vulnerability, as miners can adjust the timestamp to their advantage. 
",802,45,2.72287917137146
129,time manipulation,"YES
 
The contract relies heavily on `block.timestamp` for its functionality. This makes it vulnerable to manipulation by miners, as they can adjust the reported timestamp. 
",1014,38,2.2943170070648193
130,time manipulation,"NO 
",650,4,0.3746979236602783
131,time manipulation,"YES
 
The contract relies on `block.timestamp` for the `random` variable. This is vulnerable because miners can manipulate the timestamp, potentially leading to unfair outcomes. 
",800,39,2.2942285537719727
132,short addresses,"NO 
",838,4,0.4188847541809082
133,denial of service,"YES

The contract has a potential denial of service vulnerability. 

Here's why:

* **Excessive Creditors:** The contract allows adding a large number of creditors (up to 350) through the `addCreditors` function. This can lead to a denial of service if the contract is targeted by an attacker who can repeatedly call this function. 
* **Empty Creditors:** The `emptyCreditors` function can be exploited to clear the `creditorAddresses` array, potentially causing the contract to become unresponsive. 
* **Unpredictable Behavior:** The `emptyCreditors` function's logic is not clear. It could be exploited to cause the contract to behave in unexpected ways. 


",803,151,8.459377765655518
134,denial of service,"NO 
",934,4,0.40065526962280273
135,denial of service,"YES
 
The code has a potential denial of service vulnerability.  The lines `creditorAddresses = new address[](0);` and `creditorAmounts = new uint[](0);`  are setting the arrays to be empty. This can be exploited to cause the contract to crash. 
",2163,63,3.918196439743042
136,denial of service,"YES

The contract uses `send` which is a function that is not part of the standard ERC20 interface. This can lead to denial of service attacks. 
",823,36,2.1380908489227295
137,denial of service,"YES
 
The contract has a potential Denial of Service vulnerability.  The `ifillArray` function pushes the sender's address into the `listAddresses` array repeatedly, potentially leading to a denial of service attack. 
",662,49,2.86879301071167
138,denial of service,"YES

The contract uses `currentFrontrunner.send(currentBid)` which is vulnerable to Denial of Service attacks.  This line of code attempts to send the `currentBid` to the `currentFrontrunner` address. If the `currentFrontrunner` address is malicious, it can cause a Denial of Service attack by refusing to send the funds. 
",634,78,4.455723524093628
