case_id,vuln_type,audit_report,input_token_num,output_token_num,inference_time
11,access control,"NO 
",1125,4,0.2501034736633301
12,access control,"NO 
",821,4,0.22768640518188477
13,access control,"NO 
",3063,4,0.4429161548614502
14,access control,"YES
 
The code uses `require` to check if the amount to be transferred is greater than or equal to the balance of the sender. This is a common vulnerability, as it can be bypassed by an attacker. 
",996,48,1.8993475437164307
15,access control,"NO 
",835,4,0.22891831398010254
16,access control,"NO 
",935,4,0.23345327377319336
17,access control,"NO 
",783,4,0.22545337677001953
18,access control,"NO 
",1026,4,0.2469785213470459
19,access control,"NO 
",821,4,0.22733712196350098
20,access control,"NO 
",1017,4,0.24704217910766602
21,access control,"NO 
",778,4,0.22458600997924805
22,access control,"NO 
",1046,4,0.24758100509643555
23,access control,"NO 
",721,4,0.22079181671142578
24,access control,"YES
 
The code uses the `allowed` mapping to track the amount of tokens an address can transfer.  This mapping is not properly secured.  An attacker could potentially manipulate the `allowed` mapping to transfer more tokens than the user intended. 
",829,54,2.106086015701294
25,access control,"NO 
",800,4,0.22733712196350098
26,access control,"NO 
",1305,4,0.2626981735229492
27,unchecked low level calls,"NO 
",1619,4,0.2956223487854004
28,unchecked low level calls,"YES
 
The code uses `transferFrom` and `send` functions. These functions are low-level and don't propagate errors.  The `send` function can fail, and the code doesn't handle this failure. This can lead to a loss of funds. 
",1814,61,2.459585428237915
29,unchecked low level calls,"NO 
",1317,4,0.26215434074401855
30,unchecked low level calls,"YES
 
The code has a vulnerability related to the `send()` function.  It's important to note that `send()` can fail, and the code doesn't handle this failure gracefully.  This can lead to unexpected outcomes, such as funds being sent to the wrong address or being lost. 
",2709,66,2.699070930480957
31,unchecked low level calls,"NO 
",896,4,0.23238515853881836
32,unchecked low level calls,"NO 
",2841,4,0.37636637687683105
33,unchecked low level calls,"NO 
",753,4,0.22548651695251465
34,unchecked low level calls,"NO 
",1085,4,0.24698495864868164
35,unchecked low level calls,"NO 
",1789,4,0.31452298164367676
36,unchecked low level calls,"YES
 
The code uses `token.call()` to transfer tokens. This function is vulnerable to reentrancy attacks. 
",1688,29,1.2288179397583008
37,unchecked low level calls,"NO 
",1071,4,0.24745750427246094
38,unchecked low level calls,"YES
 
The code uses `call` and `delegatecall` functions. These functions are low-level and can be vulnerable to reentrancy attacks. 
",1716,37,1.5333540439605713
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions. These functions are low-level and can be exploited.  The `call.value` function can be used to call a function with a specific value. The `gas` function can be used to set the gas limit for a function call. 

The vulnerability lies in line 69:         extra[0].call.value(_share).gas(800000)();

The vulnerability lies in line 71:         extra[1].call.value(_share).gas(800000)();

The vulnerability lies in line 73:         extra[2].call.value(_share).gas(800000)();

The vulnerability lies in line 75:         extra[3].call.value(_share).gas(800000)();

The vulnerability lies in line 102: 			target[0].call.value(msg.value).gas(600000)();



These functions can be used to call functions with arbitrary values and gas limits. This can be exploited to drain funds from the contract. 
",2636,252,9.706979036331177
40,unchecked low level calls,"YES
 
The code uses `_dst.call.value(_value)(_data);` to call a function on another contract. This is a low-level call and can be vulnerable to reentrancy attacks. 
",2149,49,2.02882981300354
41,unchecked low level calls,"YES
 
The `execute` function calls a target contract with `_value` and `_data` using `_dst.call.value(_value)(_data)`. This is a low-level call that doesn't propagate errors.  The `execute` function doesn't check the return value of the low-level call, which can lead to unexpected behavior and potential vulnerabilities. 
",1489,85,3.3141255378723145
42,unchecked low level calls,"NO 
",1759,4,0.31020665168762207
43,unchecked low level calls,"YES
 
 The code uses `sendToWinner` and `withdrawLeftOver` functions. These functions call `send` which can fail.  The `send` function does not have any error handling and will not propagate errors. 
",875,50,1.9632008075714111
44,unchecked low level calls,"NO 
",1317,4,0.2640211582183838
45,unchecked low level calls,"YES
 
The code uses `_dst.call.value(_value)(_data);` to call a function on another contract. This is a low-level call and can be vulnerable to reentrancy attacks. 
",2117,49,2.024097442626953
46,unchecked low level calls,"YES
 
The code uses `withdrawBalance` function which calls `msg.sender.send(amountToWithdraw)` which is a low-level call. This can lead to unexpected behavior and potential vulnerabilities. 
",790,46,1.8001112937927246
47,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that doesn't propagate errors. This means that if the transfer fails, the contract won't revert.  The vulnerability lies in the `WithdrawToken` function, as it doesn't check the return value of `token.call`. 
",1632,75,2.9512462615966797
48,unchecked low level calls,"NO 
",900,4,0.23242735862731934
49,unchecked low level calls,"NO 
",1795,4,0.31145715713500977
50,unchecked low level calls,"NO 
",1795,4,0.3119087219238281
51,unchecked low level calls,"YES
 
The code uses `_target.call.value(_value)(_data);` which is a low-level call.  This function call does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",969,65,2.527273178100586
52,unchecked low level calls,"NO 
",1232,4,0.2542710304260254
53,unchecked low level calls,"NO 
",879,4,0.23009729385375977
54,unchecked low level calls,"NO 
",898,4,0.23285603523254395
55,unchecked low level calls,"NO 
",1755,4,0.30698347091674805
56,unchecked low level calls,"YES
 
The code uses `fuck.call(bytes4(sha3(""giveBlockReward()"")));` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",896,46,1.8128910064697266
57,unchecked low level calls,"YES
 
The code uses `target.call.value(msg.value)(data);` to call the target contract. This is a low-level call that does not propagate errors.  The `call` function can fail, and the contract will continue to run. This can lead to unexpected behavior and vulnerabilities. 
",1163,69,2.7010343074798584
58,unchecked low level calls,"NO 
",900,4,0.2316887378692627
59,unchecked low level calls,"NO 
",1759,4,0.3129301071166992
60,unchecked low level calls,"YES
 
The code uses `callAddress` which is a low-level function that doesn't propagate errors. This means that if the function call fails, the contract won't handle it properly.  The code doesn't check for the return value of `callAddress`, which could lead to unexpected behavior and potential vulnerabilities. 
",699,72,2.7805819511413574
61,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions are low-level and do not propagate errors. This means that if an error occurs, the contract will continue to execute without stopping. 
",2526,57,2.3462884426116943
62,unchecked low level calls,"YES
 
The code uses `addr.call.value(0 wei)();` which is a low-level call.  This function call can lead to unexpected behavior and potential vulnerabilities. 
",1006,42,1.6779906749725342
63,unchecked low level calls,"NO 
",1007,4,0.24645686149597168
64,unchecked low level calls,"YES
 
The code uses `target.call.value(msg.value)(data);` to call the target contract. This is a low-level call that does not propagate errors.  The `call.value` function can fail, and the code continues to run without any error handling. This can lead to unexpected behavior and potential vulnerabilities. 
",1161,75,2.9147183895111084
65,unchecked low level calls,"NO 
",941,4,0.23149442672729492
66,unchecked low level calls,"YES
 
The code uses `token.call()` to transfer tokens. This function is vulnerable to reentrancy attacks. 
",1716,29,1.231597900390625
67,unchecked low level calls,"NO 
",1703,4,0.30695366859436035
68,unchecked low level calls,"YES
 
The code uses `msg.sender.call.value(balances[msg.sender])()` which is a low-level call.  This function call can be vulnerable to reentrancy attacks and other issues. 
",840,50,1.9610011577606201
69,unchecked low level calls,"NO 
",1009,4,0.24682331085205078
70,unchecked low level calls,"NO 
",904,4,0.23264217376708984
71,unchecked low level calls,"YES
 
The code uses `_target.call.value(_value)();` which is a low-level call.  This function call does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",952,62,2.422569990158081
72,unchecked low level calls,"YES
 
The code uses `target.call.value(msg.value)(data);` to call a function on the target contract. This is a low-level call that does not propagate errors. If the call fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",1161,66,2.589775562286377
73,front running,"NO 
",955,4,0.234391450881958
74,front running,"NO 
",897,4,0.23256969451904297
75,front running,"NO 
",2293,4,0.3308076858520508
76,front running,"NO 
",1210,4,0.25289106369018555
77,arithmetic,"NO 
",713,4,0.2209758758544922
78,arithmetic,"YES
 
The code uses the `mul` function from the `SafeMath` library, which is vulnerable to integer overflows.  The `mul` function multiplies two numbers and returns the result. If the result of the multiplication exceeds the maximum value that can be stored in a uint256, an overflow occurs. This can lead to a loss of data or even a crash of the contract. 
",678,85,3.26283597946167
79,arithmetic,"YES
 
The code uses SafeMath library which has a function `add` that can cause overflow. 
",670,24,0.9718050956726074
80,arithmetic,"YES
 
The code uses the SafeMath library, which has a function called `mul` that multiplies two numbers.  However, the code does not check for overflow when multiplying the input with the `count` variable. This can lead to an overflow, which could result in a loss of funds. 
",678,65,2.5113608837127686
81,arithmetic,"NO 
",961,4,0.23534584045410156
82,arithmetic,"YES
 
The code has a potential vulnerability related to arithmetic overflows and underflows.  Specifically, the `TokenSaleChallenge` contract uses the `SafeMath` library, which implements SafeMath functions. However, the code snippet you provided does not show the implementation of these functions. 

It's important to note that the code snippet you provided does not show the implementation of the `SafeMath` library. 
",1066,85,3.287095785140991
83,arithmetic,"YES
 
The code uses the SafeMath library, which implements the SafeMath library.  The SafeMath library is a common library used in Solidity to prevent integer overflows and underflows. However, the code still has a potential vulnerability. 

The SafeMath library is a common library used in Solidity to prevent integer overflows and underflows. However, the code still has a potential vulnerability. 

The vulnerability lies in line 25:         count -= input;



Based on the given code, the SafeMath library is used to prevent integer overflows and underflows. However, the code still has a potential vulnerability. 

The vulnerability lies in line 25:         count -= input;



Based on the given code, the SafeMath library is used to prevent integer overflows and underflows. However, the code still has a potential vulnerability. 

The vulnerability lies in line 25:         count -= input;



Based on the given code, the SafeMath library is used to prevent integer overflows and underflows. However, the code still has a potential vulnerability. 

The vulnerability lies in line 25:         count -= input;



Based on the given code, the SafeMath library is used to prevent integer overflows and underflows. However, the code still has a potential vulnerability. 

The vulnerability lies in line 25:         count -= input;



Based on the given code, the SafeMath library is used to prevent integer overflows and underflows. However, the code",784,301,11.327736616134644
84,arithmetic,"YES
 
The code uses the SafeMath library, which has a `mul` function that can cause integer overflows. 
",691,27,1.0837299823760986
85,arithmetic,"YES
 
The code uses the `SafeMath` library, which implements SafeMath functions.  The `mul`, `div`, `sub`, and `add` functions in the `SafeMath` library are vulnerable to integer overflows and underflows. 
",766,52,2.037365674972534
86,arithmetic,"NO 
",1081,4,0.24844813346862793
87,arithmetic,"YES
 
The code uses SafeMath library for arithmetic operations.  The SafeMath library is a common practice in smart contracts to prevent integer overflows and underflows. However, the code still has a potential vulnerability. 

The vulnerability lies in line 22:      balances[_from] -= _value;
 
The SafeMath library is used to prevent integer overflows and underflows, but it does not prevent other vulnerabilities. 
",918,89,3.43683123588562
88,arithmetic,"YES
 
The code has a potential for integer overflow.  The line `count += input;`  could cause an overflow if the value of `input` is too large. 
",678,41,1.6083283424377441
89,arithmetic,"YES
 
The code uses the SafeMath library, which includes functions for arithmetic operations like `mul`, `div`, `sub`, and `add`.  However, the `add` function in the `Overflow` contract is vulnerable to integer overflows.  The `add` function is vulnerable to integer overflows because it does not check the input values before adding them. 
",698,77,2.9672935009002686
90,arithmetic,"YES

The code has a potential for integer overflow and underflow vulnerabilities.  Specifically, the line `balanceOf[_to] += _value;`  and `balances[_from] = balances[_from].sub(_value);`  can lead to overflows if the values are too large. 
",760,62,2.4013545513153076
91,bad randomness,"NO 
",1067,4,0.24556493759155273
92,bad randomness,"YES
 
The code uses `block.number` to generate a random number for the `chooseWinner` function. This is a bad practice because `block.number` is predictable and can be manipulated by miners. 
",2922,48,2.0310757160186768
93,bad randomness,"YES
The code uses a function called `rand` that relies on the block hash to generate a random number. This is a known security vulnerability as it is predictable and can be manipulated by miners. 
",3261,43,1.8779969215393066
94,bad randomness,"NO 
",1225,4,0.2538869380950928
95,bad randomness,"NO 
",918,4,0.23136210441589355
96,bad randomness,"NO 
",1010,4,0.2462141513824463
97,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1493,45,1.8053169250488281
98,reentrancy,"NO 
",1033,4,0.24714970588684082
99,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1567,47,1.898148775100708
100,reentrancy,"YES
 
The contract uses a function `donate` that allows users to send Ether to the contract.  The function `withdraw` allows the contract owner to withdraw Ether from the contract.  The function `donate` and `withdraw` are vulnerable to reentrancy attacks. 
",940,60,2.338330030441284
101,reentrancy,"YES
 
The contract uses `msg.sender.call.value(amount)`, which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",883,47,1.8568229675292969
102,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the `Collect` function repeatedly, draining the contract of funds. This is a classic reentrancy attack. 
",1489,58,2.2968361377716064
103,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1723,47,1.9085750579833984
104,reentrancy,"YES
 
The contract uses a function `withdrawReward` that allows an external contract to call the `getFirstWithdrawalBonus` function again. This is a classic reentrancy vulnerability. 
",996,41,1.6414902210235596
105,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1715,47,1.9031281471252441
106,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1665,47,1.9028534889221191
107,reentrancy,"YES
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1493,45,1.8154127597808838
108,reentrancy,"YES
 
The code uses a function `WithdrawToHolder` that calls a function `WithdrawToken` with the `_to` and `_token` parameters. This function call is made before the `WithdrawToken` function has finished executing. This can lead to a reentrancy attack. 
",1607,64,2.545919418334961
109,reentrancy,"YES
 
The contract uses a function `airDrop` that allows an attacker to call it repeatedly. This is a classic reentrancy attack vector. 
",1208,35,1.4237067699432373
110,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1453,47,1.8887333869934082
111,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",1657,47,1.9012377262115479
112,reentrancy,"YES
 
The contract uses a function `withdrawAll` that allows the user to withdraw all their funds. This function calls `msg.sender.call.value(oCredit)`, which is vulnerable to reentrancy attacks. 
",921,51,2.0083601474761963
113,reentrancy,"YES
 
The contract uses a function `addToBalance` that allows the contract owner to add funds to the contract. This function is vulnerable to reentrancy attacks. 
",912,38,1.5091407299041748
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1411,47,1.885460376739502
115,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1407,47,1.8867669105529785
116,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1485,55,2.1785223484039307
117,reentrancy,"YES
 
The contract uses a function `transfer` that allows for the transfer of funds. This function is vulnerable to reentrancy attacks because it allows external contracts to call the `transfer` function before the initial execution is complete. 
",965,51,1.9928779602050781
118,reentrancy,"YES
 
The code uses a function `withdrawBalance` that calls `msg.sender.call.value(userBalance[msg.sender])()` which is vulnerable to reentrancy attacks. 
",908,44,1.7360718250274658
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1515,47,1.8988640308380127
120,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1381,47,1.8863143920898438
121,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1561,47,1.8985798358917236
122,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1395,47,1.8856911659240723
123,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` in the `Collect` function. This line allows an attacker to call the `Collect` function repeatedly, draining the contract of funds. This is a classic reentrancy attack. 
",1489,58,2.302734136581421
124,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1381,47,1.8837158679962158
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",1565,47,1.902052402496338
126,reentrancy,"YES
 
The contract uses a function `withdrawBalance` that allows the caller to withdraw funds. This function is vulnerable to reentrancy attacks because it allows the caller to call the function again before the initial execution is complete. 
",852,50,1.964965581893921
127,time manipulation,"NO 
",751,4,0.2248826026916504
128,time manipulation,"NO 
",1022,4,0.24477386474609375
129,time manipulation,"YES
 
The contract relies on `block.timestamp` for its functionality, which is susceptible to manipulation by miners. This can lead to the contract being exploited to manipulate the state of the contract. 
",1234,44,1.7583856582641602
130,time manipulation,"NO 
",870,4,0.23344206809997559
131,time manipulation,"NO 
",1020,4,0.24820351600646973
132,short addresses,"NO 
",1059,4,0.24822068214416504
133,denial of service,"NO 
",1022,4,0.2464897632598877
134,denial of service,"NO 
",1153,4,0.25318098068237305
135,denial of service,"NO 
",2382,4,0.33956313133239746
136,denial of service,"NO 
",1042,4,0.2474534511566162
137,denial of service,"NO 
",881,4,0.23187923431396484
138,denial of service,"NO 
",853,4,0.22962713241577148
