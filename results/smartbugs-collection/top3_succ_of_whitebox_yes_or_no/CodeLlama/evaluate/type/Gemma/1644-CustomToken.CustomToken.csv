case_id,vuln_type,audit_report,gt,eval_score,eval_input_token_num,eval_output_token_num,eval_inference_time
11,access control,"NO 
",access control,1.0,530.0,6.0,0.7650201320648193
12,access control,"NO 
",access control,1.0,530.0,6.0,61.89386796951294
13,access control,"NO 
",access control,1.0,530.0,6.0,0.8600766658782959
14,access control,"NO 
",access control,1.0,530.0,6.0,0.7868196964263916
15,access control,"NO 
",access control,1.0,530.0,6.0,0.8220574855804443
16,access control,"NO 
",access control,1.0,530.0,6.0,0.7853255271911621
17,access control,"NO 
",access control,1.0,530.0,6.0,0.8457291126251221
18,access control,"NO 
",access control,1.0,530.0,6.0,0.7915372848510742
19,access control,"NO 
",access control,1.0,530.0,6.0,0.8383810520172119
20,access control,"NO 
",access control,1.0,530.0,6.0,0.7872049808502197
21,access control,"NO 
",access control,1.0,530.0,6.0,0.779707670211792
22,access control,"NO 
",access control,1.0,530.0,6.0,0.9802670478820801
23,access control,"NO 
",access control,1.0,530.0,6.0,0.7765905857086182
24,access control,"NO 
",access control,1.0,530.0,6.0,0.8428263664245605
25,access control,"NO 
",access control,1.0,530.0,6.0,0.986701250076294
26,access control,"NO 
",access control,1.0,530.0,6.0,0.7772698402404785
27,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7889342308044434
28,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8691048622131348
29,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,2.0915603637695312
30,unchecked low level calls,"YES
 
The code has several vulnerabilities related to low-level calls.  Here's a breakdown:

* **`msg.sender.send(valuePaid)`:** This line sends Ether directly from the contract's `msg.sender` to the address specified. This is a potential vulnerability because it doesn't propagate errors. If the `send` operation fails, the contract execution will continue without any error handling.
* **`msg.sender.send(excessPaid)`:** Similar to the previous line, this line sends Ether from the contract's `msg.sender` to the address specified.
* **`currentMonarch.etherAddress.send(compensation)`:** This line sends Ether from the contract's `currentMonarch` to the address specified. 


These lines are vulnerable because they don't handle potential errors. If the `send` operation fails, the contract execution will continue without any error handling. 
",unchecked low level calls,3.0,705.0,6.0,1.039217472076416
31,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.76985764503479
32,unchecked low level calls,"YES
 
The `CustomToken` contract is vulnerable to a reentrancy attack. 

Here's why:

* **`CustomToken` contract:** The `CustomToken` contract is designed to manage a token.
* **`CustomToken` contract's `balanceOf`:** The `balanceOf` function is used to track the balance of the token for each address.
* **`CustomToken` contract's `Transfer` function:** The `Transfer` function is used to transfer tokens between addresses.
* **`CustomToken` contract's `CustomToken` constructor:** The `CustomToken` constructor is used to initialize the token.

The `CustomToken` contract's `balanceOf` and `Transfer` functions are vulnerable to reentrancy attacks because they do not have any checks to prevent reentrancy. 

**How a reentrancy attack works:**

1. **Attacker sends a large amount of tokens:** The attacker sends a large amount of tokens to the contract.
2. **Attacker calls `Transfer` function:** The attacker calls the `Transfer` function to transfer tokens to their own address.
3. **Attacker calls `balanceOf` function:** The attacker calls the `balanceOf` function to check their balance.
4. **Attacker calls `Transfer` function again:** The attacker calls the `Transfer` function again to transfer more tokens.
5. **Attacker calls `balanceOf`",unchecked low level calls,2.0,818.0,6.0,0.8313984870910645
33,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8216838836669922
34,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7723703384399414
35,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8269035816192627
36,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that doesn't propagate errors. This means that if the transfer fails, the contract won't revert.  The vulnerability lies in line 44:         token.call(bytes4(sha3(""transfer(address,uint256)"")),to,amount); 
 
The vulnerability lies in line 97:                 _addr.call.value(_wei); 
 
These lines are vulnerable to reentrancy attacks. 
",unchecked low level calls,4.0,624.0,6.0,0.8446552753448486
37,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7752463817596436
38,unchecked low level calls,"YES
 
The `WithdrawToken` function calls the `token.call` function, which is a low-level call that doesn't propagate errors. This means that if the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",unchecked low level calls,3.0,585.0,6.0,0.8527331352233887
39,unchecked low level calls,"YES
 
The code uses `call.value` and `gas` functions. These functions are low-level and can be exploited.  The `call.value` function can be used to send a value to a contract, and the `gas` function can be used to set the gas limit for the transaction.  These functions can be used to send a large amount of gas to a contract, which can be used to drain the contract of funds. 
",unchecked low level calls,3.0,620.0,6.0,0.9247798919677734
40,unchecked low level calls,"YES
 
The `execute` function calls a target contract with `_dst.call.value(_value)(_data)`. This is a low-level call that doesn't propagate errors.  The contract doesn't check the return value of the `execute` function. This can lead to unexpected behavior and potential vulnerabilities. 
",unchecked low level calls,3.0,589.0,6.0,1.1033375263214111
41,unchecked low level calls,"YES
 
The `execute` function calls a function on the target address (`_dst`) with the provided value (`_value`) and data (`_data`) using the `call.value` function. This function call is vulnerable because it does not check the return value of the `call.value` function. If the `call.value` function returns false, the execution of the contract will continue, but the contract will not be able to handle the error. 
",unchecked low level calls,3.0,622.0,6.0,1.1316099166870117
42,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,2.523207902908325
43,unchecked low level calls,"YES
 
The `CustomToken` function creates a token with a specific supply and assigns it to an address. This function is not related to the `Lotto` contract and does not directly contribute to the vulnerability of the `Lotto` contract. 

However, the `sendToWinner` and `withdrawLeftOver` functions in the `Lotto` contract call `send` and `msg.sender.send` which are low-level functions. These functions can be vulnerable to unchecked low-level calls. 
",unchecked low level calls,3.0,631.0,6.0,0.83892822265625
44,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8841586112976074
45,unchecked low level calls,"YES
 
The `execute` function calls the target contract with `_dst.call.value(_value)(_data)`. This is a low-level call that does not propagate errors.  The `_dst.call` function can fail, and the contract will continue to run.  This can lead to unexpected behavior and vulnerabilities. 
",unchecked low level calls,3.0,593.0,6.0,0.8838183879852295
46,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8501884937286377
47,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that doesn't propagate errors. This means that if the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",unchecked low level calls,3.0,582.0,6.0,1.1799399852752686
48,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8330693244934082
49,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8236172199249268
50,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8925793170928955
51,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8068130016326904
52,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7633733749389648
53,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.9535782337188721
54,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8064045906066895
55,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8247010707855225
56,unchecked low level calls,"YES

The contract uses `fuck.call(bytes4(sha3(""giveBlockReward()"")));` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",unchecked low level calls,3.0,569.0,6.0,0.7955994606018066
57,unchecked low level calls,"YES
 
The `call.value` function is vulnerable to low-level call issues.  The `call` function does not propagate errors, and the `value` parameter is not checked. This can lead to unexpected behavior and potential vulnerabilities. 
",unchecked low level calls,3.0,578.0,6.0,1.064507246017456
58,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8769609928131104
59,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8100638389587402
60,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,2.2920403480529785
61,unchecked low level calls,"YES
 
The code uses `call`, `callcode`, `delegatecall`, and `send` functions. These functions do not propagate errors, meaning that if they fail, the contract will continue to run. This can lead to unexpected outcomes and vulnerabilities. 
",unchecked low level calls,3.0,582.0,6.0,0.9020581245422363
62,unchecked low level calls,"YES

The code uses `addr.call.value(0 wei)();` which is a low-level call that doesn't propagate errors. This means that if the call fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",unchecked low level calls,3.0,580.0,6.0,0.8338723182678223
63,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.7614917755126953
64,unchecked low level calls,"YES
 
The `proxy` function calls `target.call.value(msg.value)(data)` which is a low-level call.  This function does not propagate errors, meaning that if the call fails, the contract will continue to execute. This can lead to unexpected behavior and potential vulnerabilities. 
",unchecked low level calls,3.0,587.0,6.0,0.8401074409484863
65,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8195531368255615
66,unchecked low level calls,"YES
 
The `WithdrawToken` function calls `token.call` which is a low-level function that doesn't propagate errors. This means that if the `token.call` function fails, the contract will continue to execute, potentially leading to unexpected behavior and vulnerabilities. 
",unchecked low level calls,3.0,582.0,6.0,0.7952401638031006
67,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,4.227441072463989
68,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.9405372142791748
69,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,3.0019450187683105
70,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8067536354064941
71,unchecked low level calls,"NO 
",unchecked low level calls,1.0,532.0,6.0,0.8112976551055908
72,unchecked low level calls,"YES
 
The `deposit()` function calls `target.call.value(msg.value)(data);` which is a low-level call.  This can lead to unexpected behavior and potential vulnerabilities. 
",unchecked low level calls,3.0,567.0,6.0,0.9000792503356934
73,front running,"NO 
",front running,1.0,530.0,6.0,0.8670337200164795
74,front running,"NO 
",front running,1.0,530.0,6.0,0.8330552577972412
75,front running,"YES
 
The contract's `CustomToken` constructor sets the total supply of tokens to 2100000000000000. This is a very high number, and it could be exploited by a malicious actor to drain the contract of funds. 
",front running,2.0,577.0,6.0,0.8248245716094971
76,front running,"NO 
",front running,1.0,530.0,6.0,0.843865156173706
77,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.7933104038238525
78,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.8061420917510986
79,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.831566333770752
80,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.7931506633758545
81,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.832634449005127
82,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.8327264785766602
83,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.8467295169830322
84,arithmetic,"YES
 
The code uses unsigned integers and the `count - input` operation can lead to arithmetic overflows. 
",arithmetic,3.0,550.0,6.0,0.8683409690856934
85,arithmetic,"YES

The `run` function in the provided code performs a subtraction operation on the `count` variable. This operation could potentially lead to an integer overflow if the input value is large enough. 
",arithmetic,3.0,567.0,6.0,0.8408029079437256
86,arithmetic,"YES
 
The code uses unsigned integers and performs arithmetic operations without proper checks for overflows and underflows. This can lead to unexpected results and potential vulnerabilities. 
",arithmetic,3.0,559.0,6.0,0.7712812423706055
87,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.7807762622833252
88,arithmetic,"NO 
",arithmetic,1.0,529.0,6.0,0.7935636043548584
89,arithmetic,"YES

The code uses unsigned integers and has a potential for arithmetic overflow. 
",arithmetic,3.0,543.0,6.0,0.8015632629394531
90,arithmetic,"YES

The `transfer` function in the provided code has a potential for integer overflow.  The line `balanceOf[_to] += _value;`  could cause an overflow if the value of `_value` is too large. 
",arithmetic,3.0,576.0,6.0,2.158513069152832
91,bad randomness,"NO 
",bad randomness,1.0,530.0,6.0,0.8576807975769043
92,bad randomness,"YES
The code uses `block.number` to generate random numbers for the raffle. This is a bad practice because `block.number` is predictable and can be manipulated by miners. 
",bad randomness,3.0,565.0,6.0,0.9081978797912598
93,bad randomness,"YES
The code uses a function called `rand` that relies on the block hash to generate a random number. This is a known vulnerability as the block hash can be predictable and therefore the random number can be manipulated. 
",bad randomness,3.0,573.0,6.0,1.6956872940063477
94,bad randomness,"NO 
",bad randomness,1.0,530.0,6.0,0.855006217956543
95,bad randomness,"NO 
",bad randomness,1.0,530.0,6.0,0.895097017288208
96,bad randomness,"NO 
",bad randomness,1.0,530.0,6.0,0.801201343536377
97,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,638.0,6.0,1.16514253616333
98,reentrancy,"NO 
",reentrancy,1.0,531.0,6.0,0.8794631958007812
99,reentrancy,"YES
 
The contract's `Collect` function allows for reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls an external contract (`msg.sender.call.value(_am)`) before the initial execution is complete. 
* **Potential for Reentrancy:** This allows an attacker to call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,625.0,6.0,0.8249220848083496
100,reentrancy,"YES
 
The contract uses the `call.value` function, which allows external contracts to call functions on the contract. This can lead to reentrancy attacks. 
",reentrancy,3.0,562.0,6.0,0.8466987609863281
101,reentrancy,"NO 
",reentrancy,1.0,531.0,6.0,0.8406436443328857
102,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `if` statement checks for a condition, but the `msg.sender.call.value(_am)()` call could be re-entered by the external contract. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,636.0,6.0,0.828209400177002
103,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. 
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a situation where the contract's state is manipulated. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,635.0,6.0,0.8230690956115723
104,reentrancy,"NO 
",reentrancy,1.0,531.0,6.0,0.8572568893432617
105,reentrancy,"YES
 
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is an external contract call.
* **Potential for Reentrancy:**  The `Collect` function could be called repeatedly by an attacker, leading to a reentrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,624.0,6.0,0.8134300708770752
106,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  This call to an external contract could be re-entered by the attacker, leading to a potential reentrancy attack. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,631.0,6.0,0.8313405513763428
107,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,638.0,6.0,0.7821950912475586
108,reentrancy,"YES
 
The `WithdrawToHolder` function is vulnerable to reentrancy attacks.  Here's why:

* **Uncontrolled External Calls:** The `WithdrawToHolder` function calls an external contract (`_addr.call.value(_wei)`) without any checks. This means an attacker could potentially call the function multiple times within a short period, draining the contract's funds. 
* **Reentrancy Vulnerability:** The `WithdrawToHolder` function doesn't handle the potential for reentrancy.  The attacker could exploit this vulnerability to drain funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,656.0,6.0,0.8909463882446289
109,reentrancy,"YES

The contract uses the `supportsToken` function to check if the caller has the token. This function is vulnerable to reentrancy attacks because it allows the attacker to call the `airDrop` function repeatedly before the initial execution is complete. 
",reentrancy,3.0,580.0,6.0,0.8717594146728516
110,reentrancy,"YES
 
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",reentrancy,3.0,558.0,6.0,0.8809664249420166
111,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the potential for the external contract to call itself again before the initial execution is complete. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,631.0,6.0,0.7953743934631348
112,reentrancy,"YES
 
The `withdrawAll` function calls `msg.sender.call.value(oCredit)`, which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",reentrancy,3.0,573.0,6.0,0.7784316539764404
113,reentrancy,"NO 
",reentrancy,1.0,531.0,6.0,0.7608261108398438
114,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",reentrancy,3.0,569.0,6.0,0.8031728267669678
115,reentrancy,"YES
 
The code has a reentrancy vulnerability.  The `CashOut` function allows for external contract calls before the initial execution is complete. This can lead to an attacker repeatedly calling the function and draining the contract of funds. 
",reentrancy,3.0,577.0,6.0,0.8012344837188721
116,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract. This means the contract can be called again before the initial execution is complete.
* **Potential for Reentrancy:**  The attacker can call `Collect` multiple times, potentially draining the contract's funds. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,637.0,6.0,0.8096308708190918
117,reentrancy,"YES
 
The contract has a function `CustomToken()` that creates a token with a specific supply, name, symbol, and decimals. This function is not a standard function for a smart contract and is likely a vulnerability. 
",reentrancy,2.0,574.0,6.0,0.9024062156677246
118,reentrancy,"YES
 
The contract has a function `CustomToken()` that creates a token with a specific supply, name, symbol, and decimals. This function is not a standard function for a smart contract and is likely a vulnerability. 
",reentrancy,1.0,574.0,6.0,0.8768486976623535
119,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",reentrancy,3.0,569.0,6.0,0.8303341865539551
120,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",reentrancy,3.0,569.0,6.0,0.8307924270629883
121,reentrancy,"YES
 
The code has a reentrancy vulnerability in the `Collect` function.  Here's why:

* **External Contract Call:** The `Collect` function calls `msg.sender.call.value(_am)()` which is a call to an external contract.
* **Potential for Reentrancy:**  The `Collect` function doesn't handle the external contract call's return value. This means an attacker could potentially call the `Collect` function repeatedly, draining the contract's funds. 


Let me know if you'd like to explore other aspects of smart contract security! 
",reentrancy,3.0,641.0,6.0,0.8800125122070312
122,reentrancy,"YES
 
The code uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy vulnerability. 
",reentrancy,3.0,569.0,6.0,0.848149299621582
123,reentrancy,"YES
The `Collect` function is vulnerable to reentrancy attacks.  Here's why:

* **External Contract Calls:** The `Collect` function calls `msg.sender.call.value(_am)()` which means it's calling an external contract.
* **Potential for Reentrancy:**  The `if` statement checks for a condition, but the `msg.sender.call.value(_am)()` call could be re-entered by the external contract. 


Let me know if you'd like a more detailed explanation of how this vulnerability works. 
",reentrancy,3.0,636.0,6.0,0.7715692520141602
124,reentrancy,"YES
 
The `CashOut` function allows for external contract calls before the initial execution is complete. This creates a reentrancy vulnerability. 
",reentrancy,3.0,558.0,6.0,0.8334662914276123
125,reentrancy,"YES
 
The contract uses `msg.sender.call.value(_am)()` which allows an attacker to call the contract again before the initial execution is complete. This is a classic reentrancy attack. 
",reentrancy,3.0,569.0,6.0,0.87833571434021
126,reentrancy,"YES
 
The contract uses the `withdrawBalance` function, which allows an attacker to call it repeatedly, draining the contract of funds. This is a classic reentrancy attack. 
",reentrancy,3.0,566.0,6.0,0.8424556255340576
127,time manipulation,"NO 
",time manipulation,1.0,530.0,6.0,0.7660353183746338
128,time manipulation,"NO 
",time manipulation,1.0,530.0,6.0,0.8206298351287842
129,time manipulation,"YES
 
The contract relies on `block.timestamp` for its functionality, which is susceptible to manipulation by miners. This can lead to the contract being exploited to manipulate the state of the contract. 
",time manipulation,3.0,567.0,6.0,0.7802145481109619
130,time manipulation,"NO 
",time manipulation,1.0,530.0,6.0,0.770611047744751
131,time manipulation,"NO 
",time manipulation,1.0,530.0,6.0,0.8150813579559326
132,short addresses,"YES
 
The contract's `CustomToken` function sets the initial supply of tokens and assigns them to a specific address. This could be exploited by an attacker to create a large number of tokens and then transfer them to a malicious address. 
",short addresses,2.0,576.0,6.0,0.843804121017456
133,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.8031899929046631
134,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.8047072887420654
135,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.7942149639129639
136,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.7915618419647217
137,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.870750904083252
138,denial of service,"NO 
",denial of service,1.0,531.0,6.0,0.813215970993042
