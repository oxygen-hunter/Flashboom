Randomness is hard to get right in Ethereum. While Solidity offers functions and variables that can access apparently hard-to-predict values, they are generally either more public than they seem or subject to miners' influence. Because these sources of randomness are to an extent predictable, malicious users can generally replicate it and attack the function relying on its unpredictablility.

The vulnerability lies in line 12:   uint256 private salt =  block.timestamp;

The vulnerability lies in line 18:     uint256 y = salt * block.number / (salt % 5);

The vulnerability lies in line 20:     uint256 seed = block.number / 3 + (salt % 300) + y;

The vulnerability lies in line 22:     uint256 h = uint256(blockhash(seed));

