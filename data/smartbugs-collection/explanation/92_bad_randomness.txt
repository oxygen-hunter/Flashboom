Randomness is hard to get right in Ethereum. While Solidity offers functions and variables that can access apparently hard-to-predict values, they are generally either more public than they seem or subject to miners' influence. Because these sources of randomness are to an extent predictable, malicious users can generally replicate it and attack the function relying on its unpredictablility.

The vulnerability lies in line 49:     uint public blockNumber = block.number;

The vulnerability lies in line 99:         address seed1 = contestants[uint(block.coinbase) % totalTickets].addr;

The vulnerability lies in line 101:         address seed2 = contestants[uint(msg.sender) % totalTickets].addr;

The vulnerability lies in line 103:         uint seed3 = block.difficulty;

The vulnerability lies in line 114:         blockNumber = block.number;

The vulnerability lies in line 158:             blockNumber = block.number;

